Code.gs
/**
 * TSH Safety Core Activity - Backend v39.9 (Yokoten Fix)
 * Google Apps Script (Code.gs)
 *
 * การเปลี่ยนแปลง:
 * - [FIX] ปรับปรุง `getYokotenPageData` ให้กรองข้อมูลหัวข้อที่ตอบแล้วบนเซิร์ฟเวอร์โดยตรง และไม่ใช้ Cache เพื่อให้แน่ใจว่าผู้ใช้จะเห็นเฉพาะหัวข้อที่ยังไม่ตอบล่าสุดเสมอ
 * - [FIX] ปรับปรุง `addMultipleYokotenResponses` ให้ส่งข้อมูล `unansweredTopics` และ `myHistory` ที่อัปเดตแล้วกลับไปให้ Client ทันทีหลังบันทึกเสร็จ เพื่อลดการเรียกซ้ำและแก้ปัญหาข้อมูลไม่อัปเดต
 * - [REFACTOR] รวม Logic การดึงข้อมูล Yokoten ไว้ในฟังก์ชัน `_getYokotenDataForUser` เพื่อลดความซ้ำซ้อนและจัดการได้ง่ายขึ้น
 */

// =================================================================
// SECTION 1: GLOBAL CONFIGURATION & CORE INFRASTRUCTURE
// =================================================================
// ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...
// --- GLOBAL CONFIGURATION ---
const SPREADSHEET_ID = "1OEAMoaf463Lhzt6hr4WUROedFtN_OfbivCwVkUegS6E";
const DRIVE_FOLDER_ID = "1tBqmIAlNZHC0aj_PzGvTIEZ2B3dA8U4u";
const SESSION_TIMEOUT_SECONDS = 6 * 3600;
const CACHE_EXPIRATION_SECONDS = 15 * 60; // 15 นาทีสำหรับ Server-side cache

const SHEETS = {
  ADMIN_LOGS: "Admin_Logs",
  EMPLOYEES: "Employees",
  POLICIES: "Policies",
  COMMITTEES: "Committees",
  KPI_ANNOUNCEMENTS: "KPIAnnouncements",
  KPI_DATA: "KPIData",
  PATROL_SESSIONS: "Patrol_Sessions",
  PATROL_ATTENDANCE: "Patrol_Attendance",
  PATROL_ISSUES: "Patrol_Issues",
  CCCF_ACTIVITY: "CCCF_Activity",
  CCCF_TARGETS: "CCCF_Targets",
  MACHINES: "Machines",
  DOCUMENTS: "Documents",
  DOCUMENT_MACHINE_LINKS: "Document_Machine_Links",
  OJT_DEPARTMENT_STATUS: "OJT_Department_Status",
  SCW_DOCUMENTS: "SCW_Documents",
  TRAINING_STATUS: "TrainingStatus",
  ACCIDENT_REPORTS: "AccidentReports",
  MAN_HOURS: "ManHours",
  // --- [NEW] YOKOTEN SHEETS ---
  YOKOTEN_TOPICS: "YokotenTopics",
  YOKOTEN_RESPONSES: "YokotenResponses",
};

function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('TSH Safety Core Activity')
    .addMetaTag('viewport', 'width=device-width, initial-scale=1.0');
}

function getSheet(name) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    return ss.getSheetByName(name);
  } catch (e) {
    console.error(`Error getting sheet "${name}": ${e.toString()}`);
    return null;
  }
}

function sheetToObjects(sheet) {
  if (!sheet) return [];
  const dataRange = sheet.getDataRange();
  if (!dataRange || dataRange.getNumRows() < 2) return [];
  
  const values = dataRange.getValues();
  const headers = values.shift().map(header => header.toString().trim());
  
  return values.map((row, index) => {
    let obj = { rowIndex: index + 2 };
    headers.forEach((header, i) => {
      if (header) {
        let value = row[i];
        if (value instanceof Date) {
          // ใช้ ISO string เพื่อรักษาข้อมูล timezone และให้ JavaScript ฝั่ง client จัดการได้ง่าย
          value = value.toISOString();
        }
        obj[header] = value;
      }
    });
    return obj;
  });
}

function getCachedSheetObjects(sheetName) {
  const cache = CacheService.getScriptCache();
  const cachedData = cache.get(sheetName);

  if (cachedData != null) {
    return JSON.parse(cachedData);
  }

  const sheet = getSheet(sheetName);
  const data = sheetToObjects(sheet);
  
  cache.put(sheetName, JSON.stringify(data), CACHE_EXPIRATION_SECONDS);  

  return data;
}

function clearOtherCurrentItems(sheet, currentRowIndex, headerName = "IsCurrent") {
  const dataRange = sheet.getDataRange();
  if (dataRange.getNumRows() <= 1) return;

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const colIndex = headers.indexOf(headerName);
  if (colIndex === -1) {
    console.warn(`Header "${headerName}" not found in sheet "${sheet.getName()}". Skipping clearOtherCurrentItems.`);
    return;
  }
  
  const allValues = dataRange.getValues();
  allValues.shift();
  
  let changesMade = false;
  const newValues = allValues.map((row, i) => {
      const rowInSheet = i + 2;
      if(rowInSheet !== currentRowIndex && row[colIndex] === true) {
          row[colIndex] = false;
          changesMade = true;
      }
      return row;
  });

  if(changesMade) {
      sheet.getRange(2, 1, newValues.length, newValues[0].length).setValues(newValues);
      console.log(`Successfully cleared 'IsCurrent' status in sheet "${sheet.getName()}".`);
  }
}

// =================================================================
// SECTION 2: AUTHENTICATION & SESSION MANAGEMENT
// =================================================================
// ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

function logAdminLogin(adminUser) {
  try {
    const sheet = getSheet(SHEETS.ADMIN_LOGS);
    if (sheet && adminUser) {
      sheet.appendRow([new Date(), adminUser.name, adminUser.id]);
    }
  } catch (e) {
    console.error("Could not log admin login: " + e.toString());
  }
}

function checkAdminPassword(password) {
  try {
    const adminPassword = PropertiesService.getScriptProperties().getProperty('ADMIN_PASSWORD');
    return password === adminPassword;
  } catch (e) {
    console.error("Error in checkAdminPassword: " + e.toString());
    throw new Error("Failed to check admin password: " + e.message);
  }
}

function loginUser(employeeId, password) {
  try {
    if (!employeeId || employeeId.length !== 6) {
      return { success: false, message: 'กรุณากรอกรหัสพนักงาน 6 หลัก' };
    }
    const employees = getCachedSheetObjects(SHEETS.EMPLOYEES);
    const userRecord = employees.find(emp => emp.EmployeeID && emp.EmployeeID.toString() === employeeId);
    if (!userRecord) return { success: false, message: 'รหัสพนักงานไม่ถูกต้อง' };
    if (password === userRecord.EmployeeID.toString()) {
      const userData = {
        name: userRecord.EmployeeName,
        id: userRecord.EmployeeID.toString(),
        department: userRecord.Department,
        email: userRecord.Email || "",
        role: userRecord.Role || "User",
        team: userRecord.Team || ""
      };
      const token = Utilities.getUuid();
      CacheService.getUserCache().put(token, JSON.stringify(userData), SESSION_TIMEOUT_SECONDS);
      return { success: true, user: userData, token: token };
    } else {
      return { success: false, message: 'รหัสผ่านไม่ถูกต้อง' };
    }
  } catch (e) {
    console.error("Login Error: " + e.stack);
    return { success: false, message: 'เกิดข้อผิดพลาดในการเข้าสู่ระบบ: ' + e.message };
  }
}

function verifySession(token) {
  try {
    if (!token) return { success: false };
    const userDataJson = CacheService.getUserCache().get(token);
    if (userDataJson) {
      const userData = JSON.parse(userDataJson);
      CacheService.getUserCache().put(token, userDataJson, SESSION_TIMEOUT_SECONDS);
      return { success: true, user: userData };
    }
    return { success: false };
  } catch (e) {
    console.error("Verify Session Error: " + e.stack);
    return { success: false, message: 'เกิดข้อผิดพลาดในการตรวจสอบเซสชัน: ' + e.message };
  }
}

function logoutUser(token) {
  try {
    if (token) CacheService.getUserCache().remove(token);
    return { success: true };
  } catch (e) {
    console.error("Logout Error: " + e.stack);
    return { success: false, message: 'เกิดข้อผิดพลาดในการออกจากระบบ: ' + e.message };
  }
}

// =================================================================
// SECTION 3: GENERIC CRUD HANDLERS
// =================================================================
// ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

const CRUD_CONFIG = {
  Employees: { sheetName: SHEETS.EMPLOYEES },
  Policies: { sheetName: SHEETS.POLICIES },
  Committees: { sheetName: SHEETS.COMMITTEES },
  KPIAnnouncements: { sheetName: SHEETS.KPI_ANNOUNCEMENTS },
  KPIData: { sheetName: SHEETS.KPI_DATA },
  Patrol_Sessions: { sheetName: SHEETS.PATROL_SESSIONS },
  Patrol_Attendance: { sheetName: SHEETS.PATROL_ATTENDANCE },
  Patrol_Issues: { sheetName: SHEETS.PATROL_ISSUES },
  CCCF_Activity: { sheetName: SHEETS.CCCF_ACTIVITY },
  CCCF_Targets: { sheetName: SHEETS.CCCF_TARGETS },
  Machines: { sheetName: SHEETS.MACHINES },
  Documents: { sheetName: SHEETS.DOCUMENTS },
  Document_Machine_Links: { sheetName: SHEETS.DOCUMENT_MACHINE_LINKS },
  OJT_Department_Status: { sheetName: SHEETS.OJT_DEPARTMENT_STATUS },
  SCW_Documents: { sheetName: SHEETS.SCW_DOCUMENTS },
  TrainingStatus: { sheetName: SHEETS.TRAINING_STATUS },
  AccidentReports: { sheetName: SHEETS.ACCIDENT_REPORTS },
  ManHours: { sheetName: SHEETS.MAN_HOURS },
  YokotenTopics: { sheetName: SHEETS.YOKOTEN_TOPICS },
  YokotenResponses: { sheetName: SHEETS.YOKOTEN_RESPONSES },
};

function createCrudHandlers(config) {
  const { sheetName } = config;
  return {
    getAll: () => getCachedSheetObjects(sheetName),
    add: (data) => {
      const sheet = getSheet(sheetName);
      if (!sheet) return { status: 'error', message: `ไม่พบ Sheet "${sheetName}"` };
      if (data.IsCurrent === true) clearOtherCurrentItems(sheet, -1, "IsCurrent");
      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const newRow = headers.map(header => {
        const idHeaders = ['Timestamp', 'SubmissionID', 'IssueID', 'AttendanceID', 'SessionID', 'ActivityID', 'TargetID', 'MachineID', 'DocumentID', 'ReportID', 'YokotenID', 'ResponseID'];
        if (idHeaders.includes(header) && !data[header]) {
            if (header === 'Timestamp') return new Date();
            return Utilities.getUuid();
        }
        if (header === 'AcknowledgedBy' && !data[header]) return JSON.stringify([]);
        if (header === 'EmployeeID' && data[header]) return "'" + data[header];
        const value = data[header];
        if (typeof value === 'boolean') return value;
        return value !== undefined && value !== null ? value : "";
      });
      sheet.appendRow(newRow);
      CacheService.getScriptCache().remove(sheetName);
      return { status: 'success', message: 'เพิ่มข้อมูลใหม่สำเร็จ' };
    },
    update: (data) => {
      const sheet = getSheet(sheetName);
      if (!sheet) return { status: 'error', message: `ไม่พบ Sheet "${sheetName}"` };
      const rowIndex = parseInt(data.rowIndex, 10);
      if (isNaN(rowIndex) || rowIndex < 2) return { status: 'error', message: 'rowIndex ไม่ถูกต้องสำหรับการอัปเดต' };
      
      if (data.IsCurrent === true) clearOtherCurrentItems(sheet, rowIndex, "IsCurrent");
      
      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const targetRange = sheet.getRange(rowIndex, 1, 1, headers.length);
      const currentValues = targetRange.getValues()[0];

      const newRowValues = headers.map((header, i) => {
        if (data.hasOwnProperty(header)) {
          let newValue = data[header];
          if (header === 'IsCurrent' || header === 'RiskAssessmentStatus') {
            return Boolean(newValue);
          }
          if (header === 'EmployeeID' && newValue) {
            return "'" + newValue;
          }
          return newValue;
        } else {
          return currentValues[i];
        }
      });

      targetRange.setValues([newRowValues]);
      CacheService.getScriptCache().remove(sheetName);
      return { status: 'success', message: 'อัปเดตข้อมูลสำเร็จ' };
    },
    del: (rowIndex) => {
      const sheet = getSheet(sheetName);
      if (!sheet) return { status: 'error', message: `ไม่พบ Sheet "${sheetName}"` };
      const rowNum = parseInt(rowIndex, 10);
      if (isNaN(rowNum) || rowNum < 2 || rowNum > sheet.getLastRow()) {
        return { status: 'error', message: 'rowIndex ไม่ถูกต้องสำหรับการลบ' };
      }
      sheet.deleteRow(rowNum);
      CacheService.getScriptCache().remove(sheetName);
      return { status: 'success', message: 'ลบข้อมูลสำเร็จ' };
    }
  };
}

// =================================================================
// SECTION 4: PAGE-SPECIFIC DATA FETCHERS & LOGIC
// =================================================================
// ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

function getStopCallWaitPageData() {
    try {
        const ojtData = getCachedSheetObjects(SHEETS.OJT_DEPARTMENT_STATUS);
        const allDocs = getCachedSheetObjects(SHEETS.SCW_DOCUMENTS);
        const activeDocument = allDocs.find(doc => doc.IsCurrent === true) || null;
        return { success: true, data: { ojtData, activeDocument } };
    } catch (e) {
        console.error(`Error in getStopCallWaitPageData: ${e.stack}`);
        return { success: false, message: e.toString() };
    }
}

function getTrainingDashboardData(year) {
  try {
    const allStatusData = getCachedSheetObjects(SHEETS.TRAINING_STATUS);
    const availableYears = [...new Set(allStatusData.map(s => s.Year))].filter(y => y).sort((a, b) => b - a);
    const currentYear = year || (availableYears.length > 0 ? availableYears[0] : new Date().getFullYear());
    const statusInYear = allStatusData.filter(s => s.Year == currentYear);
    const totalTargeted = statusInYear.reduce((sum, s) => sum + (parseInt(s.TotalEmployees) || 0), 0);
    const totalTrained = statusInYear.reduce((sum, s) => sum + (parseInt(s.TrainedCount) || 0), 0);
    const overallPercentage = totalTargeted > 0 ? parseFloat(((totalTrained / totalTargeted) * 100).toFixed(1)) : 0;
    const summaryCards = { totalCourses: statusInYear.length, totalTargeted, totalTrained, overallPercentage };
    const trainingStatusTable = statusInYear.map(row => {
        const target = parseInt(row.TotalEmployees) || 0;
        const trained = parseInt(row.TrainedCount) || 0;
        const successRate = target > 0 ? parseFloat(((trained / target) * 100).toFixed(1)) : 0;
        const remaining = target - trained;
        return { ...row, Remaining: remaining, SuccessRate: successRate };
    });
    return { success: true, data: { summaryCards, trainingStatusTable }, availableYears, selectedYear: currentYear };
  } catch (e) {
    console.error(`Error in getTrainingDashboardData: ${e.stack}`);
    return { success: false, message: e.toString() };
  }
}

function getMachineRegistryData() {
  try {
    const machines = getCachedSheetObjects(SHEETS.MACHINES);
    const documents = getCachedSheetObjects(SHEETS.DOCUMENTS);
    const links = getCachedSheetObjects(SHEETS.DOCUMENT_MACHINE_LINKS);
    return { success: true, data: { machines, documents, links } };
  } catch (e) {
    console.error(`Error in getMachineRegistryData: ${e.stack}`);
    return { success: false, message: e.toString() };
  }
}

function getDashboardRawData(year) {
  const allSessionsData = getCachedSheetObjects(SHEETS.PATROL_SESSIONS);
  const allIssuesData = getCachedSheetObjects(SHEETS.PATROL_ISSUES);
  const allCccfTargetsData = getCachedSheetObjects(SHEETS.CCCF_TARGETS);
  const allCccfActivityData = getCachedSheetObjects(SHEETS.CCCF_ACTIVITY);
  const availableYears = [...new Set(allSessionsData.map(s => s.Year))].filter(y => y).sort((a, b) => b - a);
  const currentYear = year || (availableYears.length > 0 ? availableYears[0] : new Date().getFullYear());
  return {
    sessions: allSessionsData.filter(s => s.Year == currentYear),
    issues: allIssuesData.filter(i => i.FoundDate && new Date(i.FoundDate).getFullYear() == currentYear),
    cccfTargets: allCccfTargetsData.filter(t => t.Year == currentYear),
    cccfActivity: allCccfActivityData.filter(c => c.ClosedDate && new Date(c.ClosedDate).getFullYear() == currentYear),
    attendance: getCachedSheetObjects(SHEETS.PATROL_ATTENDANCE),
    employees: getCachedSheetObjects(SHEETS.EMPLOYEES),
    allIssuesData: allIssuesData,
    allCccfTargetsData: allCccfTargetsData,
    availableYears: availableYears,
    selectedYear: currentYear
  };
}

function calculatePatrolAttendance(sessions, attendance, employees) {
  const calculateTeam = (teamName) => {
    const teamMembers = employees.filter(e => e.Team === teamName);
    if (teamMembers.length === 0) return { list: [], overall: { total: 0, attended: 0, percent: 0 } };
    const teamMemberIds = new Set(teamMembers.map(e => e.EmployeeID ? e.EmployeeID.toString() : null).filter(Boolean));
    const relevantSessionIds = new Set(sessions.map(s => s.SessionID));
    const relevantAttendance = attendance.filter(a => a.EmployeeID && teamMemberIds.has(a.EmployeeID.toString()) && a.SessionID && relevantSessionIds.has(a.SessionID));
    const list = teamMembers.map(emp => {
      const attendedCount = relevantAttendance.filter(a => a.EmployeeID && emp.EmployeeID && a.EmployeeID.toString() === emp.EmployeeID.toString()).length;
      const percent = sessions.length > 0 ? parseFloat(((attendedCount / sessions.length) * 100).toFixed(1)) : 0;
      return { name: emp.EmployeeName || 'Unnamed', total: sessions.length, attended: attendedCount, percent };
    });
    const totalPossibleSlots = sessions.length * teamMembers.length;
    const totalAttendedCount = list.reduce((sum, item) => sum + (item.attended || 0), 0);
    const overallPercent = totalPossibleSlots > 0 ? parseFloat(((totalAttendedCount / totalPossibleSlots) * 100).toFixed(1)) : 0;
    return { list, overall: { total: totalPossibleSlots, attended: totalAttendedCount, percent: overallPercent } };
  };
  return {
    management: calculateTeam('Management').list,
    supervisor: calculateTeam('Supervisor').list,
    managementOverall: calculateTeam('Management').overall,
    supervisorOverall: calculateTeam('Supervisor').overall
  };
}
function summarizePatrolIssues(issues) {
  const today = new Date();
  const agingIssues = issues.filter(i => ['Open', 'On Process'].includes(i.Status))
    .map(i => {
      const foundDate = new Date(i.FoundDate);
      const daysOpen = Math.floor((today - foundDate) / (1000 * 60 * 60 * 24));
      return { ...i, daysOpen };
    })
    .filter(i => i.daysOpen > 30)
    .sort((a, b) => b.daysOpen - a.daysOpen);
  const totalStatus = issues.reduce((acc, issue) => {
    const status = issue.Status || 'Unknown';
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, { 'Open': 0, 'On Process': 0, 'Achieved': 0 });
  const bySection = Object.values(issues.reduce((acc, issue) => {
    const section = issue.FoundBy_Section || "Unassigned";
    if (!acc[section]) acc[section] = { Section: section, Found: 0, Achieved: 0, OnProcess: 0 };
    acc[section].Found++;
    if (issue.Status === 'Achieved') acc[section].Achieved++;
    if (issue.Status === 'On Process') acc[section].OnProcess++;
    return acc;
  }, {})).map(s => ({ ...s, Percent: s.Found > 0 ? parseFloat(((s.Achieved / s.Found) * 100).toFixed(1)) : 0 }))
  .sort((a,b) => b.Found - a.Found);
  const byType = Object.values(issues.reduce((acc, issue) => {
    const type = issue.AccidentType || "Uncategorized";
    if (!acc[type]) acc[type] = { AccidentType: type, 'Rank A': 0, 'Rank B': 0, 'Rank C': 0, Total: 0 };
    const rank = issue.Rank || 'N/A';
    if (rank === 'A') acc[type]['Rank A']++;
    if (rank === 'B') acc[type]['Rank B']++;
    if (rank === 'C') acc[type]['Rank C']++;
    acc[type].Total++;
    return acc;
  }, {})).sort((a,b) => b.Total - a.Total);
  return { agingIssues, totalStatus, bySection, byType };
}
function summarizeCccfData(cccfTargets, cccfActivity) {
  const totalAnnualTarget = cccfTargets.reduce((sum, t) => sum + (parseInt(t.Total_Target, 10) || 0), 0);
  const totalAnnualAchieved = cccfActivity.filter(a => a.Status === 'Achieved').length;
  const totalAnnualOnProcess = cccfActivity.filter(a => a.Status === 'On Process').length;
  const overallAnnualPercent = totalAnnualTarget > 0 ? parseFloat(((totalAnnualAchieved / totalAnnualTarget) * 100).toFixed(1)) : 0;
  const monthlyBreakdown = Array.from({ length: 12 }, (_, i) => {
    const month = i + 1;
    const monthlyTarget = cccfTargets.filter(t => t.Month == month).reduce((sum, t) => sum + (parseInt(t.Total_Target, 10) || 0), 0);
    const monthlyAchieved = cccfActivity.filter(a => a.ClosedDate && (new Date(a.ClosedDate).getMonth() + 1) == month && a.Status === 'Achieved').length;
    return { month, target: monthlyTarget, achieved: monthlyAchieved };
  });
  const cccfTargetsBySection = cccfTargets.reduce((acc, target) => {
    const section = target.Section;
    if (!acc[section]) acc[section] = 0;
    acc[section] += parseInt(target.Total_Target, 10) || 0;
    return acc;
  }, {});
  const summaryBySection = Object.keys(cccfTargetsBySection).map(section => {
    const activitiesForSection = cccfActivity.filter(act => act.Issue_Section === section);
    const achievedCount = activitiesForSection.filter(act => act.Status === 'Achieved').length;
    const onProcessCount = activitiesForSection.filter(act => act.Status === 'On Process').length;
    const totalTarget = cccfTargetsBySection[section];
    const percent = totalTarget > 0 ? parseFloat(((achievedCount / totalTarget) * 100).toFixed(1)) : 0;
    return { Section: section, Target: totalTarget, Achieved: achievedCount, OnProcess: onProcessCount, Percent: percent };
  }).sort((a,b) => b.Target - a.Target);
  const summaryByAccidentType = Object.values(cccfActivity.reduce((acc, activity) => {
    const type = activity.AccidentType || "Uncategorized";
    if (!acc[type]) acc[type] = { AccidentType: type, 'Rank A': 0, 'Rank B': 0, 'Rank C': 0, Total: 0 };
    const rank = activity.Rank || 'N/A';
    if (rank === 'A') acc[type]['Rank A']++;
    if (rank === 'B') acc[type]['Rank B']++;
    if (rank === 'C') acc[type]['Rank C']++;
    acc[type].Total++;
    return acc;
  }, {})).sort((a,b) => b.Total - a.Total);
  return {
    summaryBySection,
    summaryByAccidentType,
    overallAnnualSummary: { target: totalAnnualTarget, achieved: totalAnnualAchieved, onProcess: totalAnnualOnProcess, percent: overallAnnualPercent },
    monthlyBreakdown
  };
}

function getPatrolCccfDashboardData(year, patrolSectionFilter = 'All', cccfSectionFilter = 'All') {
  try {
    const rawData = getDashboardRawData(year);
    const allPatrolSections = [...new Set(rawData.allIssuesData.map(i => i.FoundBy_Section).filter(Boolean))].sort();
    const allCccfSections = [...new Set(rawData.allCccfTargetsData.map(t => t.Section).filter(Boolean))].sort();
    const filteredIssues = patrolSectionFilter === 'All' ? rawData.issues : rawData.issues.filter(i => i.FoundBy_Section === patrolSectionFilter);
    const filteredCccfTargets = cccfSectionFilter === 'All' ? rawData.cccfTargets : rawData.cccfTargets.filter(t => t.Section === cccfSectionFilter);
    const filteredCccfActivity = cccfSectionFilter === 'All' ? rawData.cccfActivity : rawData.cccfActivity.filter(a => a.Issue_Section === cccfSectionFilter);
    const attendanceResult = calculatePatrolAttendance(rawData.sessions, rawData.attendance, rawData.employees);
    const issueSummary = summarizePatrolIssues(filteredIssues);
    const cccfSummary = summarizeCccfData(filteredCccfTargets, filteredCccfActivity);
    return {
      success: true,
      availableYears: rawData.availableYears,
      selectedYear: rawData.selectedYear,
      allPatrolSections,
      allCccfSections,
      data: {
        patrolSystem: {
          attendanceResult,
          followUp: { bySection: issueSummary.bySection, byType: issueSummary.byType, totalStatus: issueSummary.totalStatus },
          agingIssues: issueSummary.agingIssues
        },
        cccfActivity: {
          summaryBySection: cccfSummary.summaryBySection,
          summaryByAccidentType: cccfSummary.summaryByAccidentType,
          overallAnnualSummary: cccfSummary.overallAnnualSummary,
          monthlyBreakdown: cccfSummary.monthlyBreakdown
        }
      }
    };
  } catch (e) {
    console.error(`Error in getPatrolCccfDashboardData: ${e.stack}`);
    return { success: false, message: e.toString(), availableYears: [] };
  }
}

function getCccfManagementSummary(year) {
  try {
    const currentYear = year || new Date().getFullYear();
    const targets = getCachedSheetObjects(SHEETS.CCCF_TARGETS).filter(t => t.Year == currentYear);
    const activities = getCachedSheetObjects(SHEETS.CCCF_ACTIVITY).filter(c => c.ClosedDate && new Date(c.ClosedDate).getFullYear() == currentYear);
    const sections = [...new Set(targets.map(t => t.Section))];
    const summary = sections.map(section => {
      const targetsForSection = targets.filter(t => t.Section === section);
      const activitiesForSection = activities.filter(a => a.Issue_Section === section);
      const totalTarget = targetsForSection.reduce((sum, t) => sum + (parseInt(t.Total_Target, 10) || 0), 0);
      const achievedCount = activitiesForSection.filter(a => a.Status === 'Achieved').length;
      const onProcessCount = activitiesForSection.filter(a => a.Status === 'On Process').length;
      const accidentTypeDetails = activitiesForSection.reduce((acc, act) => {
        const type = act.AccidentType || 'Uncategorized';
        if (!acc[type]) { acc[type] = { 'Rank A': 0, 'Rank B': 0, 'Rank C': 0, Total: 0 }; }
        const rank = act.Rank || 'N/A';
        if (rank === 'A') acc[type]['Rank A']++;
        if (rank === 'B') acc[type]['Rank B']++;
        if (rank === 'C') acc[type]['Rank C']++;
        acc[type].Total++;
        return acc;
      }, {});
      return {
        section: section,
        target: totalTarget,
        achieved: achievedCount,
        onProcess: onProcessCount,
        percent: totalTarget > 0 ? parseFloat(((achievedCount / totalTarget) * 100).toFixed(1)) : 0,
        accidentTypes: Object.entries(accidentTypeDetails).map(([type, ranks]) => ({ type, ...ranks }))
      };
    });
    return { success: true, summary: summary };
  } catch (e) {
    console.error(`Error in getCccfManagementSummary: ${e.stack}`);
    return { success: false, message: e.toString() };
  }
}


function getAccidentDashboardData(year) {
  try {
    const allManHours = getCachedSheetObjects(SHEETS.MAN_HOURS);
    const allReports = getCachedSheetObjects(SHEETS.ACCIDENT_REPORTS);
    const allEmployees = getCachedSheetObjects(SHEETS.EMPLOYEES);
    const availableYears = [...new Set(allManHours.map(s => s.Year))].filter(y => y).sort((a, b) => b - a);
    const currentYear = year || (availableYears.length > 0 ? availableYears[0] : new Date().getFullYear());
    const reportsInYear = allReports.filter(r => r.IncidentDate && new Date(r.IncidentDate).getFullYear() == currentYear);
    const manHoursInYear = allManHours.filter(mh => mh.Year == currentYear);
    const totalManHours = manHoursInYear.reduce((sum, mh) => sum + (parseInt(mh.ManHours_TSH, 10) || 0), 0);
    const ltiCases = reportsInYear.filter(r => r.RecordableType === 'LTI');
    const mtcCases = reportsInYear.filter(r => r.RecordableType === 'MTC');
    const totalLTI = ltiCases.length;
    const totalRecordableCases = totalLTI + mtcCases.length;
    const totalLostWorkdays = ltiCases.reduce((sum, r) => sum + (parseInt(r.LostWorkdays, 10) || 0), 0);
    const tshCases = reportsInYear.filter(r => r.EmployeeType === 'TSH').length;
    const KPI_MULTIPLIER = 1000000;
    const ltifr = totalManHours > 0 ? (totalLTI / totalManHours * KPI_MULTIPLIER).toFixed(2) : 0;
    const isr = totalManHours > 0 ? (totalLostWorkdays / totalManHours * KPI_MULTIPLIER).toFixed(2) : 0;
    const trir = totalManHours > 0 ? (totalRecordableCases / totalManHours * KPI_MULTIPLIER).toFixed(2) : 0;
    const ifr_tsh = totalManHours > 0 ? (tshCases / totalManHours * KPI_MULTIPLIER).toFixed(2) : 0;
    const monthlyTrend = Array.from({ length: 12 }, (_, i) => {
      const month = i + 1;
      const reportsInMonth = reportsInYear.filter(r => new Date(r.IncidentDate).getMonth() + 1 === month);
      const manHoursInMonth = manHoursInYear.find(mh => mh.Month == month);
      const totalManHoursMonth = (parseInt(manHoursInMonth?.ManHours_TSH, 10) || 0);
      const ltiMonth = reportsInMonth.filter(r => r.RecordableType === 'LTI').length;
      const recordableMonth = reportsInMonth.filter(r => ['LTI', 'MTC'].includes(r.RecordableType)).length;
      return {
        month: month,
        ltifr: totalManHoursMonth > 0 ? (ltiMonth / totalManHoursMonth * KPI_MULTIPLIER) : 0,
        trir: totalManHoursMonth > 0 ? (recordableMonth / totalManHoursMonth * KPI_MULTIPLIER) : 0
      };
    });
    const caseTypeProportions = {
      LTI: totalLTI,
      MTC: mtcCases.length,
      'First Aid': reportsInYear.filter(r => r.RecordableType === 'First Aid').length,
      'Near-Miss': reportsInYear.filter(r => r.RecordableType === 'Near-Miss').length
    };
    const top5Locations = Object.entries(reportsInYear.reduce((acc, r) => {
        const location = r.Location || 'ไม่ระบุ';
        acc[location] = (acc[location] || 0) + 1;
        return acc;
      }, {})).sort(([, a], [, b]) => b - a).slice(0, 5).map(([name, value]) => ({ name, value }));
    return {
      success: true,
      availableYears,
      selectedYear: currentYear,
      data: {
        kpiCards: { ltifr, isr, trir, ifr_tsh },
        summaryCards: {
          totalManHours: totalManHours.toLocaleString(),
          lostTimeAccidents: totalLTI,
          totalRecordableCases: totalRecordableCases,
          totalEmployees: allEmployees.length
        },
        charts: {
          monthlyTrend,
          caseTypeProportions,
          top5Locations
        },
        latestReports: reportsInYear.sort((a, b) => new Date(b.IncidentDate) - new Date(a.IncidentDate)).slice(0, 20)
      }
    };
  } catch (e) {
    console.error(`Error in getAccidentDashboardData: ${e.stack}`);
    return { success: false, message: e.toString(), availableYears: [] };
  }
}

// =================================================================
// --- [REVISED] YOKOTEN MODULE (User Acknowledgment Enabled) ---
// =================================================================

const yokotenTopicHandlers = createCrudHandlers(CRUD_CONFIG.YokotenTopics);
const yokotenResponseHandlers = createCrudHandlers(CRUD_CONFIG.YokotenResponses);

function addYokotenTopic(data) {
  data.YokotenID = `YKT-${new Date().getTime()}`;
  data.DateIssued = new Date();
  CacheService.getScriptCache().removeAll([SHEETS.YOKOTEN_TOPICS, 'yokotenDashboardData']);
  return yokotenTopicHandlers.add(data);
}

/**
 * [RESTORED] ฟังก์ชันสำหรับ User เพื่อส่งการรับทราบด้วยตนเอง
 */
function acknowledgeYokotenTopic(responseData, token) {
  try {
    const session = verifySession(token);
    if (!session.success || !session.user) {
      return { status: 'error', message: 'เซสชันไม่ถูกต้อง' };
    }
    const user = session.user;

    const { yokotenId, isRelated, comment } = responseData;
    if (!yokotenId || !isRelated) {
        return { status: 'error', message: 'ข้อมูลไม่ครบถ้วน' };
    }

    const allTopics = sheetToObjects(getSheet(SHEETS.YOKOTEN_TOPICS));
    const topic = allTopics.find(t => t.YokotenID === yokotenId);
    if (!topic) {
        return { status: 'error', message: 'ไม่พบหัวข้อ Yokoten' };
    }

    const responsesSheet = getSheet(SHEETS.YOKOTEN_RESPONSES);
    const headers = responsesSheet.getRange(1, 1, 1, responsesSheet.getLastColumn()).getValues()[0];
    
    const fullResponseData = {
        YokotenID: yokotenId,
        TopicDescription: topic.TopicDescription,
        IsRelated: isRelated,
        Comment: comment || "",
        EmployeeID: user.id,
        EmployeeName: user.name,
        Department: user.department,
        ResponseDate: new Date(),
        ResponseID: Utilities.getUuid(),
        RecordedBy: "User" // ระบุว่าผู้ใช้บันทึกเอง
    };

    const newRow = headers.map(header => fullResponseData[header] !== undefined && fullResponseData[header] !== null ? fullResponseData[header] : "");
    responsesSheet.appendRow(newRow);

    CacheService.getScriptCache().removeAll([SHEETS.YOKOTEN_RESPONSES, 'yokotenDashboardData']);

    return { 
      status: 'success', 
      message: 'บันทึกการรับทราบสำเร็จ',
      newResponse: fullResponseData // ส่งข้อมูลที่เพิ่งบันทึกกลับไปให้ Client อัปเดต UI ทันที
    };

  } catch (e) {
    console.error(`Error in acknowledgeYokotenTopic: ${e.stack}`);
    return { status: 'error', message: 'เกิดข้อผิดพลาด: ' + e.message };
  }
}
function _calculateAndUpdateAverageResponseTime(topicsSheet, topicRowIndex, yokotenId) {
    const allResponses = sheetToObjects(getSheet(SHEETS.YOKOTEN_RESPONSES));
    const allTopics = sheetToObjects(topicsSheet);
    const topic = allTopics.find(t => t.YokotenID === yokotenId);
    if (!topic) return;
    const responsesForTopic = allResponses.filter(r => r.YokotenID === yokotenId);
    if (responsesForTopic.length === 0) return;
    const issueDate = new Date(topic.DateIssued);
    const totalHours = responsesForTopic.reduce((sum, res) => {
        const responseDate = new Date(res.ResponseDate);
        const diffMs = responseDate - issueDate;
        return sum + (diffMs / (1000 * 60 * 60));
    }, 0);
    const avgHours = totalHours / responsesForTopic.length;
    const avgDays = (avgHours / 24).toFixed(1);
    const headers = topicsSheet.getRange(1, 1, 1, topicsSheet.getLastColumn()).getValues()[0];
    const avgTimeColIndex = headers.indexOf('AverageResponseTime');
    if (avgTimeColIndex !== -1) {
        topicsSheet.getRange(topicRowIndex, avgTimeColIndex + 1).setValue(`${avgDays} วัน`);
    }
}
function getYokotenPageData(token) {
  try {
    const session = verifySession(token);
    if (!session.success) throw new Error("Invalid session.");
    const user = session.user;
    const data = _getYokotenDataForUser(user);
    const allTopics = data.allTopics || [];
    const myHistory = data.myHistory || [];
    
    const unacknowledgedCount = allTopics.length - myHistory.length;
    const lastAcknowledgedDate = myHistory.length > 0 ? new Date(myHistory[0].ResponseDate).toLocaleDateString('th-TH') : 'N/A';

    return {
      success: true,
      data: {
        allTopics,
        myHistory,
        userStats: {
            unacknowledgedCount,
            acknowledgedCount: myHistory.length,
            lastAcknowledgedDate
        }
      }
    };
  } catch (e) {
    console.error(`Error in getYokotenPageData: ${e.stack}`);
    return { success: false, message: e.toString() };
  }
}
function _getYokotenDataForUser(user) {
  const allTopics = sheetToObjects(getSheet(SHEETS.YOKOTEN_TOPICS))
    .sort((a, b) => new Date(b.DateIssued) - new Date(a.DateIssued));
  const allResponses = sheetToObjects(getSheet(SHEETS.YOKOTEN_RESPONSES));

  const myHistory = allResponses
    .filter(r => r.EmployeeID && r.EmployeeID.toString().trim() === user.id.toString().trim())
    .sort((a, b) => new Date(b.ResponseDate) - new Date(a.ResponseDate));

  return {
    allTopics: allTopics,
    myHistory: myHistory
  };
}
function getYokotenAdminPageData() {
    const allTopics = sheetToObjects(getSheet(SHEETS.YOKOTEN_TOPICS))
      .sort((a, b) => new Date(b.DateIssued) - new Date(a.DateIssued));
    const allEmployees = getCachedSheetObjects(SHEETS.EMPLOYEES);
    const allResponses = sheetToObjects(getSheet(SHEETS.YOKOTEN_RESPONSES));
    return {
        success: true,
        data: {
            allTopics,
            allEmployees,
            allResponses
        }
    };
}
function getYokotenDashboardData() {
  const cache = CacheService.getScriptCache();
  const cacheKey = 'yokotenDashboardData';
  const cached = cache.get(cacheKey);
  if (cached != null) {
    return JSON.parse(cached);
  }
  try {
    const allTopics = getCachedSheetObjects(SHEETS.YOKOTEN_TOPICS);
    const allResponses = getCachedSheetObjects(SHEETS.YOKOTEN_RESPONSES);
    const allEmployees = getCachedSheetObjects(SHEETS.EMPLOYEES);
    const currentYear = new Date().getFullYear();
    
    const topicsSummary = allTopics.map(topic => {
        const responsesForTopic = allResponses.filter(r => r.YokotenID === topic.YokotenID);
        const respondedIds = new Set(responsesForTopic.map(r => r.EmployeeID.toString()));
        const respondedList = allEmployees.filter(emp => respondedIds.has(emp.EmployeeID.toString()));
        const unrespondedList = allEmployees.filter(emp => !respondedIds.has(emp.EmployeeID.toString()));
        const responsesByDept = responsesForTopic.reduce((acc, res) => { const dept = res.Department || 'N/A'; if (!acc[dept]) acc[dept] = 0; acc[dept]++; return acc; }, {});
        const totalEmployeesByDept = allEmployees.reduce((acc, emp) => { const dept = emp.Department || 'N/A'; if (!acc[dept]) acc[dept] = 0; acc[dept]++; return acc; }, {});
        const acknowledgementByDept = Object.keys(totalEmployeesByDept).map(dept => ({
            department: dept,
            rate: totalEmployeesByDept[dept] > 0 ? ((responsesByDept[dept] || 0) / totalEmployeesByDept[dept]) * 100 : 0
        })).sort((a,b) => b.rate - a.rate);

        return {
            ...topic,
            respondedCount: respondedIds.size,
            totalEmployees: allEmployees.length,
            responseRate: allEmployees.length > 0 ? parseFloat(((respondedIds.size / allEmployees.length) * 100).toFixed(1)) : 0,
            relatedCount: responsesForTopic.filter(r => r.IsRelated === 'Yes').length,
            unrelatedCount: responsesForTopic.filter(r => r.IsRelated === 'No').length,
            respondedList: respondedList.map(e => ({ name: e.EmployeeName, department: e.Department })),
            unrespondedList: unrespondedList.map(e => ({ name: e.EmployeeName, department: e.Department })),
            acknowledgementByDept
        };
    }).sort((a, b) => new Date(b.DateIssued) - new Date(a.DateIssued));

    const latestTopic = topicsSummary.length > 0 ? topicsSummary[0] : null;
    const totalTopicsThisYear = allTopics.filter(t => new Date(t.DateIssued).getFullYear() === currentYear).length;

    const result = {
      success: true,
      data: {
        topicsSummary,
        kpiCards: {
            latestTopicResponseRate: latestTopic ? latestTopic.responseRate : 0,
            latestTopicUnacknowledged: latestTopic ? latestTopic.unrespondedList.length : 0,
            avgResponseTime: latestTopic ? latestTopic.AverageResponseTime || 'N/A' : 'N/A',
            totalTopicsThisYear: totalTopicsThisYear
        }
      }
    };
    
    cache.put(cacheKey, JSON.stringify(result), CACHE_EXPIRATION_SECONDS);
    return result;
  } catch (e) {
    console.error(`Error in getYokotenDashboardData: ${e.stack}`);
    return { success: false, message: e.toString() };
  }
}


// =================================================================
// SECTION 5: CLIENT-SIDE EXPOSED FUNCTIONS & FINAL SETUP
// =================================================================
// ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

const employeeHandlers = createCrudHandlers(CRUD_CONFIG.Employees);
const policyHandlers = createCrudHandlers(CRUD_CONFIG.Policies);
const committeeHandlers = createCrudHandlers(CRUD_CONFIG.Committees);
const kpiAnnHandlers = createCrudHandlers(CRUD_CONFIG.KPIAnnouncements);
const kpiDataHandlers = createCrudHandlers(CRUD_CONFIG.KPIData);
const patrolSessionHandlers = createCrudHandlers(CRUD_CONFIG.Patrol_Sessions);
const patrolAttendanceHandlers = createCrudHandlers(CRUD_CONFIG.Patrol_Attendance);
const patrolIssueHandlers = createCrudHandlers(CRUD_CONFIG.Patrol_Issues);
const cccfActivityHandlers = createCrudHandlers(CRUD_CONFIG.CCCF_Activity);
const cccfTargetHandlers = createCrudHandlers(CRUD_CONFIG.CCCF_Targets);
const trainingStatusHandlers = createCrudHandlers(CRUD_CONFIG.TrainingStatus);
const accidentReportHandlers = createCrudHandlers(CRUD_CONFIG.AccidentReports);
const manHoursHandlers = createCrudHandlers(CRUD_CONFIG.ManHours);

function getPageData(sheetName, sortField) {
  try {
    const allItems = getCachedSheetObjects(sheetName);
    if (allItems.length === 0) { return { current: null, past: [] }; }
    allItems.sort((a, b) => new Date(b[sortField]) - new Date(a[sortField]));
    let currentItem = allItems.find(p => p.IsCurrent === true) || allItems[0];
    const pastItems = allItems.filter(p => p.rowIndex !== currentItem.rowIndex);
    return { current: currentItem, past: pastItems };
  } catch (e) {
    console.error(`Error in getPageData for ${sheetName}: ${e.toString()}`);
    return { current: null, past: [] };
  }
}

function getPageData_Policy() { return getPageData(SHEETS.POLICIES, "EffectiveDate"); }
function getPageData_Committee() { return getPageData(SHEETS.COMMITTEES, "TermStartDate"); }
function getPageData_KpiAnnouncements() { return getPageData(SHEETS.KPI_ANNOUNCEMENTS, "EffectiveDate"); }

function getKpiDataForYear(year) {
  if (!year) return [];
  const allData = getCachedSheetObjects(SHEETS.KPI_DATA);
  return allData.filter(item => item.Year && String(item.Year).trim() == String(year).trim());
}

function getEmployees() { return employeeHandlers.getAll(); }
function addEmployee(data) { return employeeHandlers.add(data); }
function deleteEmployee(rowIndex) { return employeeHandlers.del(rowIndex); }
function importEmployees(jsonData) { return importData(SHEETS.EMPLOYEES, jsonData, 'EmployeeID'); }

function addPolicy(data) { return policyHandlers.add(data); }
function updatePolicy(data) { return policyHandlers.update(data); }
function deletePolicy(rowIndex) { return policyHandlers.del(rowIndex); }
function acknowledgePolicy(rowIndex, name) { return acknowledgeItem(SHEETS.POLICIES, rowIndex, name); }

function addCommittee(data) { return committeeHandlers.add(data); }
function updateCommittee(data) { return committeeHandlers.update(data); }
function deleteCommittee(rowIndex) { return committeeHandlers.del(rowIndex); }
function acknowledgeCommittee(rowIndex, name) { return acknowledgeItem(SHEETS.COMMITTEES, rowIndex, name); }

function addKpiAnnouncement(data) { return kpiAnnHandlers.add(data); }
function updateKpiAnnouncement(data) { return kpiAnnHandlers.update(data); }
function deleteKpiAnnouncement(rowIndex) { return kpiAnnHandlers.del(rowIndex); }
function acknowledgeKpiAnnouncement(rowIndex, name) { return acknowledgeItem(SHEETS.KPI_ANNOUNCEMENTS, rowIndex, name); }

function addKpiMetric(data) { return kpiDataHandlers.add(data); }
function updateKpiMetric(data) { return kpiDataHandlers.update(data); }
function deleteKpiMetric(rowIndex) { return kpiDataHandlers.del(rowIndex); }
function importKpiData(jsonData) { return importData(SHEETS.KPI_DATA, jsonData); }

function getPatrolSessions() { return patrolSessionHandlers.getAll(); }
function addPatrolSession(data) { return patrolSessionHandlers.add(data); }
function updatePatrolSession(data) { return patrolSessionHandlers.update(data); }
function deletePatrolSession(rowIndex) { return patrolSessionHandlers.del(rowIndex); }

function getPatrolAttendance() { return patrolAttendanceHandlers.getAll(); }
function addPatrolAttendance(data) { return patrolAttendanceHandlers.add(data); }
function updatePatrolAttendance(data) { return patrolAttendanceHandlers.update(data); }
function deletePatrolAttendance(rowIndex) { return patrolAttendanceHandlers.del(rowIndex); }

function getPatrolIssues() { return patrolIssueHandlers.getAll(); }
function addPatrolIssue(data) { return patrolIssueHandlers.add(data); }
function updatePatrolIssue(data) { return patrolIssueHandlers.update(data); }
function deletePatrolIssue(rowIndex) { return patrolIssueHandlers.del(rowIndex); }
function importPatrolIssues(jsonData) { return importData(SHEETS.PATROL_ISSUES, jsonData, 'IssueNumber'); }

function getCccfActivity() { return cccfActivityHandlers.getAll(); }
function addCccfActivity(data) { return cccfActivityHandlers.add(data); }
function updateCccfActivity(data) { return cccfActivityHandlers.update(data); }
function deleteCccfActivity(rowIndex) { return cccfActivityHandlers.del(rowIndex); }

function getCccfTargets() { return cccfTargetHandlers.getAll(); }
function addCccfTarget(data) { data.Total_Target = (parseInt(data.Target_TSH, 10) || 0) + (parseInt(data.Target_Subcon, 10) || 0); return cccfTargetHandlers.add(data); }
function updateCccfTarget(data) { data.Total_Target = (parseInt(data.Target_TSH, 10) || 0) + (parseInt(data.Target_Subcon, 10) || 0); return cccfTargetHandlers.update(data); }
function deleteCccfTarget(rowIndex) { return cccfTargetHandlers.del(rowIndex); }
function importCccfActivity(jsonData) { return importData(SHEETS.CCCF_ACTIVITY, jsonData); }

function addTrainingStatus(data) { return trainingStatusHandlers.add(data); }
function updateTrainingStatus(data) { return trainingStatusHandlers.update(data); }
function deleteTrainingStatus(rowIndex) { return trainingStatusHandlers.del(rowIndex); }

function getAccidentReports() { return accidentReportHandlers.getAll(); }
function updateAccidentReport(data) { return accidentReportHandlers.update(data); }
function deleteAccidentReport(rowIndex) { return accidentReportHandlers.del(rowIndex); }

function getManHours() { return manHoursHandlers.getAll(); }
function addManHours(data) { return manHoursHandlers.add(data); }
function updateManHours(data) { return manHoursHandlers.update(data); }
function deleteManHours(rowIndex) { return manHoursHandlers.del(rowIndex); }

function acknowledgeItem(sheetName, rowIndex, employeeName) {
  const sheet = getSheet(sheetName);
  if (!sheet) return { status: 'error', message: `ไม่พบ Sheet "${sheetName}"` };
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const ackColIndex = headers.indexOf("AcknowledgedBy");
  if (ackColIndex === -1) return { status: 'error', message: 'ไม่พบคอลัมน์ AcknowledgedBy' };
  const range = sheet.getRange(rowIndex, ackColIndex + 1);
  let ackList = [];
  try {
    const val = range.getValue();
    if (val) ackList = JSON.parse(val);
  } catch (e) {
    console.warn(`Could not parse AcknowledgedBy value at row ${rowIndex}. Initializing as empty array.`);
  }
  if (!Array.isArray(ackList)) ackList = [];
  if (!ackList.includes(employeeName)) {
    ackList.push(employeeName);
    range.setValue(JSON.stringify(ackList));
    CacheService.getScriptCache().remove(sheetName);
    return { status: 'success', message: 'รับทราบข้อมูลเรียบร้อยแล้ว' };
  }
  return { status: 'info', message: 'คุณได้รับทราบข้อมูลนี้แล้ว' };
}

function importData(sheetName, jsonData, idField = null) {
  try {
    if (!Array.isArray(jsonData) || jsonData.length === 0) throw new Error("ข้อมูลที่ได้รับไม่ถูกต้องหรือว่างเปล่า");
    const sheet = getSheet(sheetName);
    if (!sheet) throw new Error(`ไม่พบ Sheet '${sheetName}'`);
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    let existingIds = null;
    if (idField) {
      existingIds = new Set(sheetToObjects(sheet).map(item => item[idField] ? item[idField].toString() : null));
    }
    const dataToAppend = jsonData.map(importedRow => {
      if (typeof importedRow !== 'object' || importedRow === null) return null;
      if (idField && (!importedRow[idField] || (existingIds && existingIds.has(importedRow[idField].toString())))) {
        return null;
      }
      return headers.map(header => {
          if (header === 'EmployeeID' && importedRow[header]) return "'" + importedRow[header];
          if (typeof importedRow[header] === 'boolean') return importedRow[header];
          if (importedRow[header] && (header.toLowerCase().includes('date') || header.toLowerCase().includes('updated'))) {
            try {
              const dateValue = new Date(importedRow[header]);
              if (!isNaN(dateValue.getTime())) return dateValue;
            } catch (e) { /* ignore parse error */ }
          }
          return importedRow[header] !== undefined && importedRow[header] !== null ? importedRow[header] : "";
      });
    }).filter(row => row !== null);

    if (dataToAppend.length === 0) {
      return { status: 'info', message: "ไม่มีข้อมูลใหม่สำหรับนำเข้า (อาจเป็นข้อมูลที่ซ้ำกับของเดิม)" };
    }
    sheet.getRange(sheet.getLastRow() + 1, 1, dataToAppend.length, headers.length).setValues(dataToAppend);
    CacheService.getScriptCache().remove(sheetName);
    return { status: 'success', message: `นำเข้าข้อมูลใหม่ ${dataToAppend.length} รายการสำเร็จ` };
  } catch (e) {
    console.error(`Import Error (${sheetName}): ${e.stack}`);
    return { status: 'error', message: `เกิดข้อผิดพลาดระหว่างการนำเข้า: ${e.message}` };
  }
}


index.html
<!DOCTYPE html>
<html lang="th">
<head>
    <base target="_top">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TSH Safety Core Activity</title>
    <!-- External libraries are the same -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        /* CSS styles are the same */
        body { font-family: 'Kanit', sans-serif; background-color: #f1f5f9; }
        .dark body { background-color: #020617; }
        .card { background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.07), 0 2px 4px -2px rgb(0 0 0 / 0.07); transition: all 0.2s ease-in-out; }
        .dark .card { background-color: #1e293b; border: 1px solid #334155; }
        .form-input, .form-select, .form-textarea, .form-checkbox, .form-multiselect { border-radius: 8px; transition: all 0.2s ease-in-out; }
        .form-input, .form-select, .form-textarea { background-color: #f8fafc; border: 1px solid #cbd5e1; }
        .dark .form-input, .dark .form-select, .dark .form-textarea { background-color: #334155; border-color: #475569; color: #f1f5f9; }
        .form-input:focus, .form-select:focus, .form-textarea:focus { outline: none; border-color: #2563eb; box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.4); }
        .form-checkbox { color: #2563eb; }
        .btn { padding: 0.625rem 1.25rem; border-radius: 8px; font-weight: 500; border: 1px solid transparent; display: inline-flex; align-items: center; justify-content: center;  
            transition: all 0.2s ease-in-out;  
        }
        .btn:hover {
            transform: translateY(-2px);
            filter: brightness(1.1);
        }
        .btn:active {
            transform: translateY(0px);
            filter: brightness(1);
        }
        .btn:disabled { cursor: not-allowed; opacity: 0.7; transform: none; filter: none; }
        .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.875rem; }
        .btn-primary { background-color: #2563eb; color: white; } .btn-primary:hover:not(:disabled) { background-color: #1d4ed8; }
        .btn-secondary { background-color: #ffffff; color: #1e293b; border-color: #cbd5e1; } .btn-secondary:hover:not(:disabled) { background-color: #f8fafc; }
        .dark .btn-secondary { background-color: #334155; color: #f1f5f9; border-color: #475569; } .dark .btn-secondary:hover:not(:disabled) { background-color: #475569; }
        #sidebar { transition: transform 0.3s ease-in-out; }
        .page-content { display: none; } .page-content.active { display: block; }
        .nav-link.active { background-color: #2563eb; color: white; }
        #app-container { display: none; } 
        ::-webkit-scrollbar { width: 8px; height: 8px; } ::-webkit-scrollbar-track { background: #e2e8f0; } ::-webkit-scrollbar-thumb { background: #94a3b8; border-radius: 10px; }
        .dark ::-webkit-scrollbar-track { background: #1e293b; } .dark ::-webkit-scrollbar-thumb { background: #475569; }
        .tab-button { padding: 0.5rem 1rem; border: none; background: transparent; cursor: pointer; border-bottom: 3px solid transparent; font-weight: 500; color: #64748b; }
        .dark .tab-button { color: #94a3b8; } .tab-button.active { color: #2563eb; border-bottom-color: #2563eb; } .dark .tab-button.active { color: #60a5fa; border-bottom-color: #60a5fa; }
        .tab-content { display: none; } .tab-content.active { display: block; }
        .status-badge { display: inline-block; padding: 0.2rem 0.6rem; border-radius: 9999px; font-weight: 500; font-size: 0.75rem; text-align: center; }
        .status-normal { background-color: #dcfce7; color: #166534; } .dark .status-normal { background-color: #14532d; color: #bbf7d0; }
        .status-expiring { background-color: #fef9c3; color: #854d0e; } .dark .status-expiring { background-color: #713f12; color: #fde047; }
        .status-expired { background-color: #fee2e2; color: #991b1b; } .dark .status-expired { background-color: #7f1d1d; color: #fca5a5; }
        .progress-bar-bg { background-color: #e5e7eb; } .dark .progress-bar-bg { background-color: #4b5563; }
        .progress-bar-fg { background-color: #2563eb; transition: width 0.5s ease-in-out; }
        .progress-bar-fg.is-green { background-color: #22c55e; }
        .progress-bar-fg.is-yellow { background-color: #f59e0b; }
        .progress-bar-fg.is-red { background-color: #ef4444; }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        .loading-message-pulse {
            animation: pulse 1.5s infinite ease-in-out;
        }
        .inline-loader-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            position: relative;
            z-index: 10;
        }
        .dark .inline-loader-container {
            background-color: rgba(30, 41, 59, 0.7);
        }
        .inline-loader-spinner {
            animation: spin 1s linear infinite;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
        }
        .dark .inline-loader-spinner {
            border-color: #334155;
            border-top-color: #60a5fa;
        }
    </style>

    <script>
        if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) { 
            document.documentElement.classList.add('dark'); 
        } else { 
            document.documentElement.classList.remove('dark'); 
        }
    </script>
</head>
<body class="text-slate-900 dark:text-slate-200">

    <div id="session-loader" class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-slate-900/90 text-white">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-white mb-4"></div>
        <p id="loading-message" class="text-lg loading-message-pulse">กำลังตรวจสอบเซสชัน...</p>
    </div>

    <div id="login-overlay" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-slate-100 dark:bg-slate-900">
        <div class="w-full max-w-4xl flex flex-row card overflow-hidden">
            <div class="hidden md:block md:w-1/2 relative">
                <div class="absolute inset-0 bg-no-repeat bg-center bg-cover" style="background-image: url('https://lh3.googleusercontent.com/d/1Lq60zK89RTczxeERT_vb6op3BTcIyOlI');"></div>
                <div class="absolute inset-0 flex flex-col justify-end items-start p-8 text-white bg-gradient-to-t from-black/60 to-transparent">
                    <h2 class="text-3xl font-bold mb-2" style="text-shadow: 1px 1px 4px rgba(0,0,0,0.5);">Safety is our #1 Priority</h2>
                    <p class="text-sm">ระบบจัดการกิจกรรมด้านความปลอดภัย</p>
                </div>
            </div>
            <div class="w-full md:w-1/2 p-8 flex flex-col justify-center">
                <div class="w-full max-w-sm mx-auto">
                    <div class="text-center mb-6">
                        <img src="https://lh3.googleusercontent.com/d/1I-KYA5pgwzXBwnn810G2e5LTQ4qvpfOa" alt="TSH Logo" class="w-20 h-auto mx-auto mb-4">
                        <h2 class="text-2xl font-bold text-slate-900 dark:text-white">ยินดีต้อนรับ</h2>
                        <p class="mt-1 text-sm text-slate-500 dark:text-slate-400">เข้าสู่ระบบ Safety Core Activity</p>
                    </div>
                    <form id="login-form" class="space-y-4">
                        <div><label for="login-employee-id" class="text-sm font-medium">รหัสพนักงาน</label><input id="login-employee-id" name="employeeId" type="text" required maxlength="6" class="w-full mt-1 px-3 py-2 form-input"></div>
                        <div><label for="login-password" class="text-sm font-medium">รหัสผ่าน</label><input id="login-password" name="password" type="password" required class="w-full mt-1 px-3 py-2 form-input"><p class="mt-1 text-xs text-slate-500 dark:text-slate-400">รหัสผ่านคือรหัสพนักงาน 6 หลัก</p></div>
                        <div><button type="submit" class="w-full btn btn-primary mt-2">เข้าสู่ระบบ</button></div>
                        <div id="login-error" class="text-sm text-center text-red-600 font-medium h-4"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="app-container" class="flex h-screen">
        <aside id="sidebar" class="bg-white dark:bg-slate-900 text-slate-900 dark:text-slate-200 w-64 flex-shrink-0 flex-col space-y-2 py-4 absolute inset-y-0 left-0 md:relative md:translate-x-0 transform -translate-x-full z-30 border-r dark:border-slate-800">
            <div class="px-4 pb-2 border-b dark:border-slate-800 flex items-center space-x-3">
                <img src="https://lh3.googleusercontent.com/d/1I-KYA5pgwzXBwnn810G2e5LTQ4qvpfOa" alt="TSH Logo" class="w-10 h-auto">
                <div><h2 class="text-lg font-bold">TSH Safety Core</h2><span class="text-xs text-slate-500 dark:text-slate-400">Activity System</span></div>
            </div>
            <nav id="main-nav" class="flex-grow px-2">
                <ul class="space-y-1">
                    <li><a href="#dashboard" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>ภาพรวม</span></a></li>
                    <li><a href="#search" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>ค้นหารายบุคคล</span></a></li>
                </ul>
                <div class="pt-4 mt-4 space-y-1 border-t dark:border-slate-800" id="main-menu-links">
                    <p class="px-4 pt-2 pb-1 text-xs font-semibold text-slate-400 uppercase">เมนูหลัก</p>
                    <ul class="space-y-1">
                        <li><a href="#policy" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>นโยบายความปลอดภัย</span></a></li>
                        <li><a href="#committee" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>คณะกรรมการความปลอดภัย</span></a></li>
                        <li><a href="#kpi" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>KPI</span></a></li>
                        <li><a href="#patrol-cccf" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>Patrol & CCCF</span></a></li>
                        <li><a href="#machine-safety" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>Machine Device</span></a></li>
                        <li><a href="#ojt" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>Stop - Call - Wait</span></a></li>
                        <li><a href="#training" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>Safety Training</span></a></li>
                        <li><a href="#accident" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>รายงานอุบัติเหตุ</span></a></li>
                        <li><a href="#yokoten" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>YOKOTEN</span></a></li>
                    </ul>
                </div>
                <div id="admin-menu-section" class="admin-feature hidden">
                    <div class="pt-4 mt-4 space-y-1 border-t dark:border-slate-800">
                        <p class="px-4 pt-2 pb-1 text-xs font-semibold text-slate-400 uppercase">Admin</p>
                        <ul class="space-y-1">
                            <li><a href="#employee" data-action="navigate" class="nav-link flex items-center px-4 py-2 text-sm font-medium rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700/50"><span>จัดการพนักงาน</span></a></li>
                        </ul>
                    </div>
                </div>
            </nav>
            <div class="px-4 mt-auto space-y-2 border-t dark:border-slate-800 pt-4">
                <button id="admin-login-btn" class="w-full btn btn-secondary">Admin Login</button>
                <button id="admin-logout-btn" class="hidden w-full btn bg-yellow-400 text-black hover:bg-yellow-500">Logout Admin</button>
                <button id="user-logout-btn" class="w-full btn btn-secondary">ออกจากระบบ</button>
            </div>
        </aside>

        <div class="flex-1 flex flex-col overflow-hidden">
            <header class="flex-shrink-0 flex justify-between items-center p-4 bg-white dark:bg-slate-900 border-b dark:border-slate-800">
                <div class="flex items-center">
                    <button id="sidebar-toggle" class="md:hidden text-slate-600 dark:text-slate-300 focus:outline-none"><svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg></button>
                    <h1 id="page-title" class="text-xl font-semibold ml-2 md:ml-4"></h1>
                </div>
                <div class="flex items-center space-x-4">
                    <button id="dark-mode-toggle" class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 focus:outline-none"><svg id="sun-icon" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M12 12a5 5 0 100-10 5 5 0 000 10z"></path></svg><svg id="moon-icon" class="w-6 h-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg></button>
                    <div id="user-info" class="text-sm text-right"></div>
                </div>
            </header>
            <main class="flex-1 overflow-x-hidden overflow-y-auto p-4 md:p-6">
                <div id="dashboard-page" class="page-content"></div>
                <div id="search-page" class="page-content"></div>
                <div id="ojt-page" class="page-content"></div>
                <div id="policy-page" class="page-content"></div>
                <div id="committee-page" class="page-content"></div>
                <div id="kpi-page" class="page-content"></div>
                <div id="employee-page" class="page-content"></div>
                <div id="patrol-cccf-page" class="page-content"></div>
                <div id="machine-safety-page" class="page-content"></div>
                <div id="training-page" class="page-content"></div>
                <div id="accident-page" class="page-content"></div>
                <div id="yokoten-page" class="page-content"></div>
            </main>
        </div>
    </div>

    <div id="modal-wrapper" class="hidden fixed inset-0 z-40 flex items-center justify-center p-2 md:p-4">
        <div id="modal-backdrop" class="absolute inset-0 bg-slate-900 bg-opacity-75"></div>
        <div id="modal-container" class="relative p-4 md:p-6 w-full max-w-2xl max-h-[90vh] flex flex-col card">
            <div class="flex justify-between items-center border-b dark:border-slate-700 pb-3 mb-4 flex-shrink-0">
                <h3 id="modal-title" class="text-xl font-bold"></h3>
                <button id="modal-close-btn" class="text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 text-3xl font-light">&times;</button>
            </div>
            <div id="modal-body" class="flex-grow overflow-auto pr-2"></div>
        </div>
    </div>

    <script>
        // =================================================================
        // SECTION 1: GLOBAL STATE & CONFIGURATION
        // =================================================================
        // ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

        const AppState = {
            isAdmin: false,
            currentUser: null,
            currentPageId: 'dashboard',
            sessionToken: null,
            kpi: { announcements: { current: null, past: [] }, dataForYear: [] },
            patrolMgmtData: { employees: [], sessions: [] },
            machineRegistry: { machines: [], documents: [], links: [] },
            accidentReporting: { tempFiles: [] }
        };
        const departmentList = ['', 'ACC', 'BOI', 'CIC', 'CS', 'C&FA', 'ENG', 'FN', 'GR', 'HRD', 'HRM', 'IT', 'MTN', 'MKT', 'MC', 'OS', 'PD1', 'PD2', 'PC', 'PE', 'PUR-D', 'PUR-I', 'QA', 'QC', 'QS', 'R&D', 'SHE', 'SYS-ENG', 'WH'];
        const issueSectionList = ['', 'PD1 Element 3/1', 'PD1 Element 3/2', 'PD1 Element 4', 'PD1 Assy 3/1', 'PD1 Assy 3/2', 'PD1 Assy 3/3', 'PD2 Element', 'PD2 Assy'];
        const cccfSectionList = ['', 'PD1 Element/diecast', 'PD1 Element 3/1', 'PD1 Element 3/2', 'PD1 PVC Cutting', 'PD1 Assy 3/1', 'PD1 Assy 3/2', 'PD1 Assy 3/3', 'PD2 Sub Stand', 'PD2 Element', 'PD2 Assy', 'OS', 'PC', 'MTN', 'PE', 'QA Product Audit', 'QA Incoming', 'QA New Model', 'QC1', 'QC2', 'CS', 'WH'];
        const documentTypeList = ['', 'Safety Device M/C Standard', 'Layout & Checkpoint Safety Device', 'Work Instruction', 'Safety Working Standard'];
        const PATROL_CONFIG = { sessions: { title: 'Patrol Sessions', cacheKey: 'cachedPatrolSessions', getFunc: 'getPatrolSessions', addFunc: 'addPatrolSession', updateFunc: 'updatePatrolSession', deleteFunc: 'deletePatrolSession', columns: [ { key: 'PatrolDate', label: 'วันที่และเวลาตรวจ' }, { key: 'Year', label: 'ปี' }, { key: 'Description', label: 'รายละเอียด' }, { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditModal('sessions', ${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteItem('sessions', ${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`} ], formFields: [ { label: 'Patrol Date & Time', name: 'PatrolDate', type: 'datetime-local', required: true }, { label: 'Year', name: 'Year', type: 'number', defaultValue: new Date().getFullYear(), required: true }, { label: 'Description', name: 'Description', type: 'text' } ] }, attendance: { title: 'Attendance', cacheKey: 'cachedPatrolAttendance', getFunc: 'getPatrolAttendance', addFunc: 'addPatrolAttendance', updateFunc: 'updatePatrolAttendance', deleteFunc: 'deletePatrolAttendance', columns: [ { key: 'SessionID', label: 'Session ID' }, { key: 'WalkType', label: 'ประเภทการเดิน' }, { key: 'EmployeeID', label: 'รหัสพนักงาน' }, { key: 'EmployeeName', label: 'ชื่อ' }, { key: 'Team', label: 'ทีม' }, { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditModal('attendance', ${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteItem('attendance', ${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`} ], formFields: [ { label: 'รอบการตรวจ (Patrol Session)', name: 'SessionID', type: 'select', options: [], required: true }, { label: 'ประเภทการเดิน', name: 'WalkType', type: 'select', options: ['','เดินปกติ', 'เดินซ่อม'], required: true }, { label: 'ทีม', name: 'Team', type: 'select', options: ['', 'Management', 'Supervisor'], required: true }, { label: 'พนักงาน', name: 'EmployeeID', type: 'select', options: [], required: true }, { label: 'ชื่อ (จะถูกเติมอัตโนมัติ)', name: 'EmployeeName', type: 'text', required: true, readonly: true }, { label: 'ประเภทการตรวจ', name: 'PatrolType', type: 'select', options: ['', 'Top Management Safety Patrol (Monthly)', 'Management Safety Patrol (Weekly)', '5S & Safety Top management'], required: true }, { label: 'สถานะ', name: 'Status', type: 'select', options: ['Attended'], defaultValue: 'Attended', required: true } ] }, issues: { title: 'Issues', cacheKey: 'cachedPatrolIssues', getFunc: 'getPatrolIssues', addFunc: 'addPatrolIssue', updateFunc: 'updatePatrolIssue', deleteFunc: 'deletePatrolIssue', importFunc: 'importPatrolIssues', columns: [ { key: 'FoundDate', label: 'วันที่พบ' }, { key: 'IssueNumber', label: 'หมายเลขประเด็น' }, { key: 'AccidentType', label: 'ประเภท' }, { key: 'Status', label: 'สถานะ' }, { key: 'FoundBy_Section', label: 'ส่วนงานที่พบ' }, { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditModal('issues', ${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteItem('issues', ${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`} ], formFields: [ { label: 'วันที่พบ', name: 'FoundDate', type: 'date', required: true }, { label: 'หมายเลขประเด็นทีพบ', name: 'IssueNumber', type: 'text', required: true }, { label: 'ส่วนงานที่พบ', name: 'FoundBy_Section', type: 'select', options: [...new Set([...departmentList, ...issueSectionList])], required: true }, { label: 'Accident Type (ประเภท)', name: 'AccidentType', type: 'select', options: ['', 'ST1 Caught by Machine', 'ST2 Heavy Object', 'ST3 Vehicle', 'ST4 Falls', 'ST5 Electrocution', 'ST6 Other'], required: true }, { label: 'Rank (ระดับ)', name: 'Rank', type: 'select', options: ['', 'A', 'B', 'C'], required: true }, { label: 'สถานะ', name: 'Status', type: 'select', options: ['On Process', 'Achieved'], required: true }, { label: 'วันที่แก้ไขเสร็จ', name: 'AchievedDate', type: 'date' } ] }, cccf_targets: { title: 'CCCF Targets', cacheKey: 'cachedCccfTargets', getFunc: 'getCccfTargets', addFunc: 'addCccfTarget', updateFunc: 'updateCccfTarget', deleteFunc: 'deleteCccfTarget', columns: [ { key: 'Year', label: 'ปี' }, { key: 'Month', label: 'เดือน' }, { key: 'Section', label: 'หน่วยงาน' }, { key: 'Target_TSH', label: 'เป้าหมาย (TSH)' }, { key: 'Target_Subcon', label: 'เป้าหมาย (Sub)' }, { key: 'Total_Target', label: 'เป้าหมายรวม' }, { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditModal('cccf_targets', ${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteItem('cccf_targets', ${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`} ], formFields: [ { label: 'ปี', name: 'Year', type: 'number', defaultValue: new Date().getFullYear(), required: true }, { label: 'เดือน', name: 'Month', type: 'select', options: Array.from({length: 12}, (_, i) => ({ value: i + 1, label: new Date(0, i).toLocaleString('th-TH', { month: 'long' }) })), required: true }, { label: 'หน่วยงาน', name: 'Section', type: 'select', options: cccfSectionList, required: true }, { label: 'เป้าหมาย (TSH)', name: 'Target_TSH', type: 'number', required: true, defaultValue: 0 }, { label: 'เป้าหมาย (Sub Contractor)', name: 'Target_Subcon', type: 'number', required: true, defaultValue: 0 } ] }, cccf_activity: { title: 'CCCF Activity (การปิดประเด็น)', cacheKey: 'cachedCccfActivity', getFunc: 'getCccfActivity', addFunc: 'addCccfActivity', updateFunc: 'updateCccfActivity', deleteFunc: 'deleteCccfActivity', importFunc: 'importCccfActivity', columns: [ { key: 'ClosedDate', label: 'วันที่ปิด' }, { key: 'Issue_Section', label: 'หน่วยงาน' }, { key: 'Status', label: 'สถานะ' }, { key: 'AccidentType', label: 'ประเภท' }, { key: 'Rank', label: 'ระดับ' }, { key: 'ClosedBy_Name', label: 'ผู้ปิด' }, { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditModal('cccf_activity', ${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteItem('cccf_activity', ${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`} ], formFields: [ { label: 'หน่วยงานที่พบประเด็น', name: 'Issue_Section', type: 'select', options: cccfSectionList, required: true }, { label: 'ผู้ปิดประเด็น (หัวหน้างาน)', name: 'ClosedBy_EmployeeID', type: 'select', options: [], required: true }, { label: 'ชื่อผู้ปิด (จะถูกเติมอัตโนมัติ)', name: 'ClosedBy_Name', type: 'text', readonly: true }, { label: 'วันที่ปิดประเด็น', name: 'ClosedDate', type: 'date', required: true }, { label: 'สถานะ', name: 'Status', type: 'select', options: ['Achieved', 'On Process'], required: true }, { label: 'Accident Type', name: 'AccidentType', type: 'select', options: ['', 'ST1 Caught by Machine', 'ST2 Heavy Object', 'ST3 Vehicle', 'ST4 Falls', 'ST5 Electrocution', 'ST6 Other'], required: true }, { label: 'Rank', name: 'Rank', type: 'select', options: ['', 'A', 'B', 'C'], required: true }, { label: 'คำอธิบายประเด็น', name: 'IssueDescription', type: 'textarea' }, { label: 'การดำเนินการแก้ไข', name: 'ActionTaken', type: 'textarea' } ] } };

        const pageLoaders = {
            'dashboard': () => loadPlaceholderPage('dashboard-page', 'ภาพรวม (Dashboard)'),
            'search': () => loadPlaceholderPage('search-page', 'ค้นหารายบุคคล'),
            'ojt': loadStopCallWaitPage,
            'policy': createCardBasedPageLoader({ pageId: 'policy', title: 'นโยบายความปลอดภัย', cacheKey: 'cachedPolicies', fetchFunction: 'getPageData_Policy', cardRenderer: createPolicyCard, addModalFunction: showAddOrEditPolicyModal }),
            'committee': createCardBasedPageLoader({ pageId: 'committee', title: 'คณะกรรมการความปลอดภัย', cacheKey: 'cachedCommittees', fetchFunction: 'getPageData_Committee', cardRenderer: createCommitteeCard, addModalFunction: showAddOrEditCommitteeModal }),
            'kpi': loadKpiPage,
            'employee': loadEmployeePage,
            'patrol-cccf': loadPatrolCccfPage,
            'machine-safety': loadMachineRegistryPage,
            'training': loadTrainingPage,
            'accident': loadAccidentReportingPage,
            'yokoten': loadYokotenPage,
        };

        // =================================================================
        // SECTION 2: CORE APP LOGIC (Auth, Navigation, UI Helpers)
        // =================================================================
        // ... (โค้ดส่วนนี้เหมือนเดิมทั้งหมด) ...

        document.addEventListener('DOMContentLoaded', () => {
            console.log("สคริปต์เริ่มทำงาน: DOMContentLoaded");
            setupEventListeners();
            setupDarkMode();
            
            function initializeSession() {
                AppState.sessionToken = localStorage.getItem('sessionToken');

                if (AppState.sessionToken) {
                    console.log("พบ Token ของเซสชัน กำลังตรวจสอบกับเซิร์ฟเวอร์...");
                    showLoading('กำลังตรวจสอบเซสชัน...');

                    const verificationTimeout = setTimeout(() => {
                        console.error("การตรวจสอบเซสชันหมดเวลาหลังจาก 15 วินาที");
                        localStorage.removeItem('sessionToken');
                        showLoginPage();
                    }, 15000);

                    google.script.run
                        .withSuccessHandler(result => {
                            clearTimeout(verificationTimeout);
                            console.log("เซิร์ฟเวอร์ตอบกลับการตรวจสอบเซสชัน");
                            handleSessionVerification(result);
                        })
                        .withFailureHandler(error => {
                            clearTimeout(verificationTimeout);
                            console.error("การเรียกเซิร์ฟเวอร์เพื่อตรวจสอบเซสชันล้มเหลว:", error);
                            localStorage.removeItem('sessionToken');
                            showLoginPage();
                        })
                        .verifySession(AppState.sessionToken);
                } else {
                    console.log("ไม่พบ Token ของเซสชัน กำลังแสดงหน้าล็อกอิน");
                    showLoginPage();
                }
            }

            initializeSession();
        });

        function handleSessionVerification(result) {
            if (result && result.success) {
                startApp(result.user);
            } else {
                localStorage.removeItem('sessionToken');
                showLoginPage();
            }
        }

        function showLoginPage() {
            hideLoading();
            document.getElementById('login-overlay').classList.remove('hidden');
        }

        function handleLogin(e) {
            e.preventDefault();
            const btn = e.target.querySelector('button[type="submit"]');
            btn.disabled = true;
            btn.innerHTML = '<div class="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mx-auto"></div>';
            document.getElementById('login-error').textContent = '';
            showLoading('กำลังเข้าสู่ระบบ...');

            google.script.run.withSuccessHandler(res => {
                if (res.success) {
                    AppState.sessionToken = res.token;
                    localStorage.setItem('sessionToken', AppState.sessionToken);
                    startApp(res.user);
                } else {
                    document.getElementById('login-error').textContent = res.message || 'Login failed.';
                    btn.disabled = false;
                    btn.textContent = 'เข้าสู่ระบบ';
                    hideLoading();
                }
            }).withFailureHandler(err => {
                document.getElementById('login-error').textContent = `Error: ${err.message}`;
                btn.disabled = false;
                btn.textContent = 'เข้าสู่ระบบ';
                hideLoading();
            }).loginUser(document.getElementById('login-employee-id').value, document.getElementById('login-password').value);
        }

        function startApp(user) {
            AppState.currentUser = user;
            hideLoading();
            document.getElementById('login-overlay').classList.add('hidden');
            document.getElementById('app-container').style.display = 'flex';
            document.getElementById('user-info').innerHTML = `<p class="font-semibold text-slate-700 dark:text-slate-200">${AppState.currentUser.name}</p><p class="text-xs text-slate-500 dark:text-slate-400">${AppState.currentUser.id}</p>`;
            initializeApp();
        }

        function initializeApp() {
            if (localStorage.getItem('isAdminLoggedIn') === 'true') {
                AppState.isAdmin = true;
            }
            toggleAdminUI(AppState.currentUser.role === 'Admin' || AppState.isAdmin);
            const initialPage = window.location.hash.substring(1) || 'dashboard';
            navigateTo(pageLoaders[initialPage] ? initialPage : 'dashboard');
        }

        function handleLogout() {
            showLoading('กำลังออกจากระบบ...');
            google.script.run.withSuccessHandler(() => {
                sessionStorage.clear();
                localStorage.removeItem('sessionToken');
                localStorage.removeItem('isAdminLoggedIn');
                AppState.sessionToken = null;
                AppState.currentUser = null;
                AppState.isAdmin = false;
                hideLoading();
                document.getElementById('app-container').style.display = 'none';
                showLoginPage();
                toggleAdminUI(false);
            }).withFailureHandler(showError).logoutUser(AppState.sessionToken);
        }

        function showLoading(message = 'กำลังโหลดข้อมูล...') {
            const indicator = document.getElementById('session-loader');
            const messageEl = document.getElementById('loading-message');
            if (indicator && messageEl) {
                messageEl.textContent = message;
                indicator.classList.remove('hidden');
            }
        }
        const hideLoading = () => document.getElementById('session-loader').classList.add('hidden');

        function renderLoadingPlaceholder(containerElementId, message = 'กำลังโหลด...') {
            const container = document.getElementById(containerElementId);
            if (container) {
                container.innerHTML = `
                    <div id="inline-loader-${containerElementId}" class="inline-loader-container w-full h-full min-h-[150px] flex flex-col items-center justify-center">
                        <div class="inline-loader-spinner mb-3"></div>
                        <p class="text-slate-600 dark:text-slate-300">${message}</p>
                    </div>
                `;
            }
        }

        function removeLoadingPlaceholder(containerElementId) {
            const placeholder = document.getElementById(`inline-loader-${containerElementId}`);
            if (placeholder) {
                placeholder.remove();
            }
        }

        function showError(error) {
            hideLoading();
            console.error('Apps Script Error:', error);
            const errorMessage = (error && error.message) ?
                error.message :
                (typeof error === 'object' ? JSON.stringify(error) : error);

            showInfoModal('เกิดข้อผิดพลาด', `ไม่สามารถทำรายการได้: ${errorMessage || 'กรุณาลองใหม่อีกครั้ง'}`);
        }

    function navigateTo(pageId) {
        // [REMOVED] บล็อกโค้ดที่เรียก stopYokotenPolling() ถูกลบออกไป
        // เนื่องจากไม่มีการใช้งานฟังก์ชัน polling ในโค้ดปัจจุบัน
        
        AppState.currentPageId = pageId;
        window.location.hash = pageId;
        showLoading(`กำลังโหลดหน้า ${pageId}...`);
        document.querySelectorAll('.page-content').forEach(p => p.classList.remove('active'));
        document.querySelectorAll('.nav-link').forEach(l => l.classList.toggle('active', l.getAttribute('href') === `#${pageId}`));
        const targetPage = document.getElementById(`${pageId}-page`);
        const pageLink = document.querySelector(`a[href="#${pageId}"] span`);
        document.getElementById('page-title').textContent = pageLink ? pageLink.textContent.trim() : 'Dashboard';
        if (targetPage && pageLoaders[pageId]) {
            pageLoaders[pageId]();
            targetPage.classList.add('active');
        } else {
            navigateTo('dashboard');
        }
    }

        function setupEventListeners() {
            document.getElementById('main-nav').addEventListener('click', e => {
                const link = e.target.closest('a.nav-link[data-action="navigate"]');
                if (link) {
                    e.preventDefault();
                    navigateTo(link.getAttribute('href').substring(1));
                    if (window.innerWidth < 768) document.getElementById('sidebar').classList.add('-translate-x-full');
                }
            });

            document.getElementById('sidebar-toggle').addEventListener('click', () => document.getElementById('sidebar').classList.toggle('-translate-x-full'));
            document.getElementById('admin-login-btn').addEventListener('click', handleAdminLogin);
            document.getElementById('admin-logout-btn').addEventListener('click', handleAdminLogout);
            document.getElementById('user-logout-btn').addEventListener('click', handleLogout);
            document.getElementById('modal-close-btn').addEventListener('click', closeModal);
            document.getElementById('modal-backdrop').addEventListener('click', closeModal);
            document.getElementById('login-form').addEventListener('submit', handleLogin);
        }

        function handleAdminLogin() {
            openModal('เข้าสู่ระบบ Admin', `<form id="admin-login-form" class="space-y-4"><div><label for="admin-password-input" class="text-sm font-medium">กรุณากรอกรหัสผ่าน Admin</label><input id="admin-password-input" name="password" type="password" required class="w-full mt-1 px-3 py-2 form-input"></div><div class="text-right pt-2 space-x-2"><button type="button" onclick="closeModal()" class="btn btn-secondary">ยกเลิก</button><button type="submit" class="btn btn-primary bg-yellow-400 text-black hover:bg-yellow-500">เข้าสู่ระบบ</button></div></form>`);
            document.getElementById('admin-password-input').focus();
            document.getElementById('admin-login-form').addEventListener('submit', e => {
                e.preventDefault();
                const form = e.target;
                const btn = form.querySelector('button[type="submit"]');
                btn.disabled = true;
                const password = document.getElementById('admin-password-input').value;
                if (password) {
                    showLoading('กำลังตรวจสอบรหัสผ่าน...');
                    google.script.run.withSuccessHandler(isValid => {
                        if (isValid) {
                            AppState.isAdmin = true;
                            localStorage.setItem('isAdminLoggedIn', 'true');
                            google.script.run.logAdminLogin(AppState.currentUser);
                            closeModal();
                            showInfoModal("สำเร็จ", "เข้าสู่ระบบ Admin สำเร็จ");
                            toggleAdminUI(true);
                            navigateTo(AppState.currentPageId);
                        } else {
                            showInfoModal("ผิดพลาด", "รหัสผ่านไม่ถูกต้อง");
                            btn.disabled = false;
                        }
                        hideLoading();
                    }).withFailureHandler(err => {
                        showError(err);
                        btn.disabled = false;
                        hideLoading();
                    }).checkAdminPassword(password);
                } else {
                    btn.disabled = false;
                }
            });
        }

        function handleAdminLogout() {
            AppState.isAdmin = false;
            localStorage.removeItem('isAdminLoggedIn');
            showInfoModal("สำเร็จ", "ออกจากระบบ Admin เรียบร้อยแล้ว");
            toggleAdminUI(false);
            navigateTo(AppState.currentPageId);
        }

        function toggleAdminUI(show) {
            AppState.isAdmin = show;
            document.querySelectorAll('.admin-feature').forEach(el => el.classList.toggle('hidden', !AppState.isAdmin));
            document.getElementById('admin-login-btn').classList.toggle('hidden', AppState.isAdmin || (AppState.currentUser && AppState.currentUser.role === 'Admin'));
            document.getElementById('admin-logout-btn').classList.toggle('hidden', !AppState.isAdmin);
            if (AppState.currentUser && AppState.currentUser.role === 'Admin') {
                document.getElementById('admin-menu-section').classList.remove('hidden');
            } else {
                document.getElementById('admin-menu-section').classList.toggle('hidden', !AppState.isAdmin);
            }
        }

        function setupDarkMode() {
            const darkModeToggle = document.getElementById('dark-mode-toggle');
            const sunIcon = document.getElementById('sun-icon');
            const moonIcon = document.getElementById('moon-icon');
            const htmlEl = document.documentElement;
            const updateIcons = () => {
                if (htmlEl.classList.contains('dark')) {
                    sunIcon.classList.add('hidden');
                    moonIcon.classList.remove('hidden');
                } else {
                    sunIcon.classList.remove('hidden');
                    moonIcon.classList.add('hidden');
                }
            };
            darkModeToggle.addEventListener('click', () => {
                htmlEl.classList.toggle('dark');
                localStorage.setItem('theme', htmlEl.classList.contains('dark') ? 'dark' : 'light');
                updateIcons();
                if (pageLoaders[AppState.currentPageId]) pageLoaders[AppState.currentPageId]();
            });
            updateIcons();
        }

        function fetchFromServer(cacheKey, fetchFunctionString, resolve, reject, params = []) {
            const runner = google.script.run.withSuccessHandler(data => {
                try {
                    sessionStorage.setItem(cacheKey, JSON.stringify(data));
                    resolve(data);
                } catch (e) {
                    console.error("Error saving to sessionStorage:", e);
                    resolve(data);
                }
            }).withFailureHandler(reject);
            runner[fetchFunctionString](...params);
        }

        function getData(baseCacheKey, fetchFunctionString, params = [], forceRefresh = false) {
            return new Promise((resolve, reject) => {
                const cacheKey = params.length > 0 ? `${baseCacheKey}_${JSON.stringify(params)}` : baseCacheKey;

                // ถ้า forceRefresh เป็น true, จะข้ามการตรวจสอบ cache ทั้งหมด
                if (!forceRefresh) {
                    const cachedData = sessionStorage.getItem(cacheKey);
                    if (cachedData) {
                        try {
                            resolve(JSON.parse(cachedData));
                            return; // จบการทำงานถ้าเจอข้อมูลใน cache
                        } catch (e) {
                            // ถ้าข้อมูลใน cache เสียหาย ให้ลบทิ้งแล้วไปดึงใหม่
                            sessionStorage.removeItem(cacheKey);
                        }
                    }
                }
                
                // ส่วนนี้จะทำงานเมื่อ:
                // 1. forceRefresh เป็น true
                // 2. ไม่พบข้อมูลใน cache
                fetchFromServer(cacheKey, fetchFunctionString, resolve, reject, params);
            });
        }

        function createTable(data, columns, noDataMessage = "ไม่พบข้อมูล", highlightRowCheck = null) {
            if (!data || data.length === 0) return `<p class="text-center py-4 text-slate-500">${noDataMessage}</p>`;
            const thead = `<thead><tr class="border-b dark:border-slate-700 bg-slate-50 dark:bg-slate-800">${columns.map(col => `<th class="px-6 py-3 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider">${col.label}</th>`).join('')}</tr></thead>`;
            const tbody = `<tbody class="divide-y divide-slate-200 dark:divide-slate-700">${data.map((row) => { const highlightClass = highlightRowCheck && highlightRowCheck(row) ? 'bg-blue-50 dark:bg-blue-900/30' : 'hover:bg-slate-50 dark:hover:bg-slate-800/50'; return `<tr class="${highlightClass}">${columns.map(col => `<td class="px-6 py-4 whitespace-nowrap text-sm">${col.render ? col.render(row[col.key], row) : (row[col.key] || '')}</td>`).join('')}</tr>`; }).join('')}</tbody>`;
            return `<div class="align-middle inline-block min-w-full"><table class="min-w-full divide-y divide-slate-200 dark:divide-slate-700">${thead}${tbody}</table></div>`;
        }

        function createForm(fields) {
            return fields.map(field => {
                const value = field.value !== undefined ? field.value : '';
                const required = field.required ? 'required' : '';
                const readonly = field.readonly ? 'readonly' : '';
                const step = field.step ? `step="${field.step}"` : '';
                let inputHtml = '';
                if (field.type === 'textarea') {
                    inputHtml = `<textarea id="form-${field.name}" name="${field.name}" class="w-full mt-1 px-3 py-2 form-textarea" ${required} ${readonly} rows="4">${value}</textarea>`;
                } else if (field.type === 'checkbox') {
                    return `<div class="flex items-center mt-2"><input id="form-${field.name}" name="${field.name}" type="checkbox" class="h-4 w-4 form-checkbox" ${value ? 'checked' : ''}><label for="form-${field.name}" class="ml-2 block text-sm">${field.label}</label></div>`;
                } else if (field.type === 'select') {
                    const optionsHtml = field.options.map(opt => {
                        const optionValue = typeof opt === 'object' ? opt.value : opt;
                        const optionLabel = typeof opt === 'object' ? opt.label : opt;
                        return `<option value="${optionValue}" ${ optionValue == value ? 'selected' : ''} class="bg-white dark:bg-slate-700">${optionLabel}</option>`;
                    }).join('');
                    inputHtml = `<select id="form-${field.name}" name="${field.name}" class="w-full mt-1 px-3 py-2 form-select" ${required}>${optionsHtml}</select>`;
                } else if (field.type === 'multicheckbox') {
                    const checkboxesHtml = field.options.map(opt => `<div class="flex items-center"><input type="checkbox" id="form-${field.name}-${opt.value}" name="${field.name}" value="${opt.value}" class="h-4 w-4 form-checkbox" ${(field.value || []).includes(opt.value) ? 'checked' : ''}><label for="form-${field.name}-${opt.value}" class="ml-2">${opt.label}</label></div>`).join('');
                    inputHtml = `<div class="mt-2 space-y-2 max-h-60 overflow-y-auto border dark:border-slate-600 p-3 rounded-lg">${checkboxesHtml}</div>`;
                } else {
                    inputHtml = `<input type="${field.type || 'text'}" id="form-${field.name}" name="${field.name}" value="${value}" class="w-full mt-1 px-3 py-2 form-input" ${required} ${readonly} ${step}>`;
                }
                return `<div><label for="form-${field.name}" class="text-sm font-medium">${field.label}</label>${inputHtml}</div>`;
            }).join('');
        }

        function openModal(title, contentHtml, size = 'max-w-2xl') {
            document.getElementById('modal-container').className = `relative p-4 md:p-6 w-full ${size} max-h-[90vh] flex flex-col card`;
            document.getElementById('modal-title').innerHTML = title;
            document.getElementById('modal-body').innerHTML = contentHtml;
            document.getElementById('modal-wrapper').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('modal-wrapper').classList.add('hidden');
        }

        function showInfoModal(title, message) {
            openModal(title, `<p>${message}</p><div class="text-right mt-6"><button onclick="closeModal()" class="btn btn-primary">ตกลง</button></div>`);
        }

        function showConfirmModal(title, message, onConfirm) {
            openModal(title, `<p>${message}</p><div class="text-right mt-6 space-x-2"><button onclick="closeModal()" class="btn btn-secondary">ยกเลิก</button><button id="modal-confirm-btn" class="btn btn-primary bg-red-600 hover:bg-red-700">ยืนยัน</button></div>`);
            document.getElementById('modal-confirm-btn').onclick = onConfirm;
        }

        function showDocumentModal(originalUrl) {
            const modalContainer = document.getElementById('modal-container');
            modalContainer.className = 'relative p-4 md:p-6 w-full max-w-full md:max-w-6xl h-full md:h-auto md:max-h-[95vh] flex flex-col card';
            let contentHtml = '';
            if (originalUrl.match(/\.(jpeg|jpg|gif|png|webp|avif)$/i) || originalUrl.includes('googleusercontent.com') || originalUrl.includes('drive.google.com/uc')) {
                contentHtml = `<div class="w-full h-full flex items-center justify-center"><img src="${originalUrl}" class="max-w-full max-h-full object-contain"></div>`;
            } else {
                const viewerUrl = `https://docs.google.com/gview?url=${encodeURIComponent(originalUrl)}&embedded=true`;
                contentHtml = `<iframe src="${viewerUrl}" class="w-full h-full flex-grow" frameborder="0"></iframe>`;
            }
            openModal('แสดงเอกสาร', contentHtml);
        }
        
        function showAttachmentLinksModal(event, encodedLinksJson) {
            event.stopPropagation(); 
            try {
                const links = JSON.parse(decodeURIComponent(encodedLinksJson));
                if (!Array.isArray(links) || links.length === 0) {
                    showInfoModal('เอกสารแนบ', 'ไม่พบลิงก์เอกสาร');
                    return;
                }
                const linksHtml = links.map(link => 
                    `<li class="py-2 border-b dark:border-slate-700 last:border-b-0">
                        <a href="${link.url}" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:underline flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>
                            ${link.name}
                        </a>
                    </li>`
                ).join('');
                openModal('รายการเอกสารแนบ', `<ul class="space-y-2">${linksHtml}</ul>`);
            } catch (e) {
                console.error("เกิดข้อผิดพลาดในการแยกวิเคราะห์ลิงก์เอกสารแนบ:", e);
                showError({ message: "รูปแบบข้อมูลเอกสารแนบไม่ถูกต้อง" });
            }
        }

        function handleApiResponse(response, cacheKeysToClear = [], callback = null) {
            hideLoading();
            
            if (response.status !== 'success') {
                showInfoModal('ผิดพลาด', response.message);
            } else {
                closeModal();
            }

            if (response.status === 'success') {
                cacheKeysToClear.forEach(key => {
                    Object.keys(sessionStorage).forEach(k => {
                        if (k.startsWith(key)) sessionStorage.removeItem(k);
                    });
                });
                
                // --- [START OF CHANGE] ---
                // ตรวจสอบว่ามี callback function ส่งมาหรือไม่
                if (typeof callback === 'function') {
                    // ถ้ามี ให้เรียกใช้ callback นั้นเลย
                    // callback นี้จะรับผิดชอบการโหลดหน้าและทำงานอื่นๆ ต่อไป
                    callback();
                } else if (pageLoaders[AppState.currentPageId]) {
                    // ถ้าไม่มี callback ให้ทำงานแบบเดิม คือโหลดหน้าปัจจุบันใหม่
                    pageLoaders[AppState.currentPageId]();
                }
            }
        }

        function createFormActionHandler(form, funcName, cacheKeys) {
            const submitBtn = form.querySelector('button[type="submit"]');
            submitBtn.disabled = true;
            showLoading('กำลังบันทึกข้อมูล...');
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => {
                if (data.hasOwnProperty(key)) {
                    if (!Array.isArray(data[key])) {
                        data[key] = [data[key]];
                    }
                    data[key].push(value);
                } else {
                    data[key] = value;
                }
            });
            if (form.querySelector('[name="IsCurrent"]')) {
                data.IsCurrent = form.querySelector('[name="IsCurrent"]').checked;
            }
            if (form.querySelector('[name="RiskAssessmentStatus"]')) {
                data.RiskAssessmentStatus = form.querySelector('[name="RiskAssessmentStatus"]').checked;
            }
            
            google.script.run.withSuccessHandler(res => handleApiResponse(res, cacheKeys)).withFailureHandler(err => {
                submitBtn.disabled = false;
                showError(err);
            })[funcName](data);
        }

       // =================================================================
        // SECTION 3: PAGE-SPECIFIC LOGIC
        // =================================================================

    // =================================================================
    // --- [REVISED] YOKOTEN MODULE (User Acknowledgment Enabled) ---
    // =================================================================

    async function loadYokotenPage() {
        const container = document.getElementById('yokoten-page');
        renderLoadingPlaceholder(container.id, 'กำลังโหลดข้อมูล Yokoten...');
        
        try {
            const pageResult = await new Promise((resolve, reject) => {
                if (AppState.isAdmin) {
                    google.script.run.withSuccessHandler(resolve).withFailureHandler(reject).getYokotenAdminPageData();
                } else {
                    google.script.run.withSuccessHandler(resolve).withFailureHandler(reject).getYokotenPageData(AppState.sessionToken);
                }
            });

            const dashboardResult = await getData('cachedYokotenDashboardData', 'getYokotenDashboardData', [], true);

            if (!pageResult.success) throw new Error(pageResult.message);
            if (!dashboardResult.success) throw new Error(dashboardResult.message);

            renderYokotenPage(pageResult.data, dashboardResult.data);

        } catch (err) {
            showError(err);
            container.innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูล Yokoten ได้');
        } finally {
            hideLoading();
        }
    }

    function renderYokotenPage(pageData, dashboardData) {
        const container = document.getElementById('yokoten-page');
        
        container.innerHTML = `
            <div class="border-b border-gray-200 dark:border-gray-700 mb-6">
                <nav id="yokoten-tabs" class="-mb-px flex space-x-8 overflow-x-auto" aria-label="Tabs">
                    <button class="tab-button active" data-target="yokoten-main-view">ภาพรวม</button>
                    <button class="tab-button" data-target="yokoten-history-view">ประวัติของฉัน</button>
                    <button class="tab-button admin-feature hidden" data-target="yokoten-admin-view">จัดการข้อมูล (Admin)</button>
                </nav>
            </div>
            <div id="yokoten-main-view" class="tab-content active"></div>
            <div id="yokoten-history-view" class="tab-content"></div>
            <div id="yokoten-admin-view" class="tab-content admin-feature hidden"></div>
        `;
        
        const renderYokotenHistoryView = (history, topics) => {
            const container = document.getElementById('yokoten-history-view');
            const columns = [
                { key: 'ResponseDate', label: 'วันที่บันทึก', render: v => new Date(v).toLocaleString('th-TH') },
                { key: 'TopicDescription', label: 'หัวข้อ', render: v => v || 'N/A' },
                { key: 'IsRelated', label: 'การตอบกลับ', render: v => v === 'Yes' ? '<span class="status-badge status-normal">เกี่ยวข้อง</span>' : '<span class="status-badge status-expired">ไม่เกี่ยวข้อง</span>' },
                { key: 'Comment', label: 'ความคิดเห็น' },
                { key: 'RecordedBy', label: 'ผู้บันทึก', render: v => v || 'N/A' }
            ];
            container.innerHTML = `<div class="card p-4 md:p-6">${createTable(history, columns, 'ยังไม่มีประวัติการรับทราบ')}</div>`;
        };

        if (AppState.isAdmin) {
            renderYokotenAdminDashboard(dashboardData);
            renderYokotenAdminTools(pageData);
            renderYokotenHistoryView(pageData.allResponses || [], pageData.allTopics);
        } else {
            renderYokotenUserView(pageData);
            renderYokotenHistoryView(pageData.myHistory || [], pageData.allTopics);
        }
        
        document.querySelectorAll('#yokoten-tabs .tab-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const targetId = e.currentTarget.dataset.target;
                document.querySelectorAll('#yokoten-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                e.currentTarget.classList.add('active');
                document.querySelectorAll('#yokoten-page .tab-content').forEach(content => content.classList.remove('active'));
                document.getElementById(targetId).classList.add('active');
            });
        });
        
        toggleAdminUI(AppState.isAdmin);
    }

    function renderYokotenUserView(pageData) {
        const container = document.getElementById('yokoten-main-view');
        const { allTopics, myHistory, userStats } = pageData;
        const historyMap = new Map((myHistory || []).map(h => [h.YokotenID, h]));

        const createTopicCard = (topic) => {
            const myResponse = historyMap.get(topic.YokotenID);
            const isAcknowledged = !!myResponse;

            return `
            <div id="yokoten-card-${topic.YokotenID}" class="card p-5 transition-all duration-300">
                <div class="flex justify-between items-start gap-4">
                    <div class="flex-grow">
                        <p class="text-sm text-slate-500 dark:text-slate-400">วันที่ประกาศ: ${new Date(topic.DateIssued).toLocaleString('th-TH', { dateStyle: 'medium', timeStyle: 'short' })}</p>
                        <p class="text-lg font-semibold mt-1">${topic.TopicDescription}</p>
                        ${topic.SourceAccidentID ? `<span class="text-xs font-mono bg-slate-100 dark:bg-slate-700 px-2 py-1 rounded">อ้างอิง: ${topic.SourceAccidentID}</span>` : ''}
                    </div>
                    <div class="flex-shrink-0" id="status-container-${topic.YokotenID}">
                        ${isAcknowledged
                            ? `<div class="flex items-center gap-2 text-green-600 dark:text-green-400 font-semibold"><svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg> รับทราบแล้ว</div>`
                            : `<div class="text-yellow-600 dark:text-yellow-400 font-semibold">รอการรับทราบ</div>`
                        }
                    </div>
                </div>
                ${topic.AttachmentLink ? `<a href="${topic.AttachmentLink}" target="_blank" rel="noopener noreferrer" class="mt-4 btn btn-secondary"> <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path></svg> ดูไฟล์แนบ</a>` : ''}
                
                <div class="mt-4 pt-4 border-t dark:border-slate-700" id="response-area-${topic.YokotenID}">
                    ${isAcknowledged
                        ? `
                        <p class="text-sm"><strong>การตอบกลับของคุณ:</strong> <span class="font-semibold ${myResponse.IsRelated === 'Yes' ? 'text-blue-600' : 'text-red-600'}">${myResponse.IsRelated === 'Yes' ? 'เกี่ยวข้อง' : 'ไม่เกี่ยวข้อง'}</span></p>
                        ${myResponse.Comment ? `<p class="text-sm mt-1"><strong>ความคิดเห็น:</strong> ${myResponse.Comment}</p>` : ''}
                        <p class="text-xs text-slate-500 mt-2">บันทึกเมื่อ: ${new Date(myResponse.ResponseDate).toLocaleString('th-TH')}</p>
                        `
                        : `
                        <form class="yokoten-ack-form" data-yokoten-id="${topic.YokotenID}">
                            <div class="space-y-3">
                                <div>
                                    <label class="text-sm font-medium">หัวข้อนี้เกี่ยวข้องกับงานของคุณหรือไม่?</label>
                                    <div class="mt-2 flex gap-4">
                                       <label class="flex items-center"><input type="radio" name="isRelated" value="Yes" required class="form-checkbox h-4 w-4"><span class="ml-2">เกี่ยวข้อง</span></label>
                                       <label class="flex items-center"><input type="radio" name="isRelated" value="No" class="form-checkbox h-4 w-4"><span class="ml-2">ไม่เกี่ยวข้อง</span></label>
                                    </div>
                                </div>
                                <div>
                                    <label class="text-sm font-medium">ความคิดเห็นเพิ่มเติม (ถ้ามี)</label>
                                    <textarea name="comment" rows="2" class="w-full mt-1 form-textarea"></textarea>
                                </div>
                                <div class="text-right">
                                    <button type="submit" class="btn btn-primary">ยืนยันการรับทราบ</button>
                                </div>
                            </div>
                        </form>
                        `
                    }
                </div>
            </div>
            `;
        };

        container.innerHTML = `
            <div class="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">ยังไม่ได้รับทราบ</p><p class="text-3xl font-bold text-yellow-600">${userStats.unacknowledgedCount} <span class="text-lg">หัวข้อ</span></p></div>
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">รับทราบแล้ว</p><p class="text-3xl font-bold text-green-600">${userStats.acknowledgedCount} <span class="text-lg">หัวข้อ</span></p></div>
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">รับทราบล่าสุด</p><p class="text-2xl font-bold">${userStats.lastAcknowledgedDate}</p></div>
            </div>
            <h2 class="text-xl font-bold mb-4">รายการ Yokoten</h2>
            <div class="space-y-4">
                ${allTopics && allTopics.length > 0 ? allTopics.map(createTopicCard).join('') : '<p>ยังไม่มีหัวข้อ Yokoten</p>'}
            </div>
        `;

        document.querySelectorAll('.yokoten-ack-form').forEach(form => {
            form.addEventListener('submit', handleAcknowledgeSubmit);
        });
    }

    /**
     * [BUG FIX] แก้ไขปุ่มหมุนค้าง
     */
    function handleAcknowledgeSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const btn = form.querySelector('button[type="submit"]');
        btn.disabled = true;
        btn.innerHTML = '<div class="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mx-auto"></div>';

        const formData = new FormData(form);
        const responseData = {
            yokotenId: form.dataset.yokotenId,
            isRelated: formData.get('isRelated'),
            comment: formData.get('comment')
        };

        google.script.run
            .withSuccessHandler(res => {
                if (res.status === 'success' && res.newResponse) {
                    const card = document.getElementById(`yokoten-card-${responseData.yokotenId}`);
                    if (card) {
                        const response = res.newResponse;
                        const responseArea = document.getElementById(`response-area-${responseData.yokotenId}`);
                        const statusContainer = document.getElementById(`status-container-${responseData.yokotenId}`);

                        const responseHtml = `
                        <p class="text-sm"><strong>การตอบกลับของคุณ:</strong> <span class="font-semibold ${response.IsRelated === 'Yes' ? 'text-blue-600' : 'text-red-600'}">${response.IsRelated === 'Yes' ? 'เกี่ยวข้อง' : 'ไม่เกี่ยวข้อง'}</span></p>
                        ${response.Comment ? `<p class="text-sm mt-1"><strong>ความคิดเห็น:</strong> ${response.Comment}</p>` : ''}
                        <p class="text-xs text-slate-500 mt-2">บันทึกเมื่อ: ${new Date(response.ResponseDate).toLocaleString('th-TH')}</p>
                        `;
                        const statusHtml = `<div class="flex items-center gap-2 text-green-600 dark:text-green-400 font-semibold"><svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg> รับทราบแล้ว</div>`;
                        
                        responseArea.innerHTML = responseHtml;
                        statusContainer.innerHTML = statusHtml;

                        card.classList.remove('border-slate-300', 'dark:border-slate-700');
                        card.classList.add('border-green-500', 'bg-green-50', 'dark:bg-green-900/20');
                    }
                } else {
                    showError({ message: res.message });
                    btn.disabled = false;
                    btn.textContent = 'ยืนยันการรับทราบ';
                }
            })
            .withFailureHandler(err => {
                showError(err);
                btn.disabled = false;
                btn.textContent = 'ยืนยันการรับทราบ';
            })
            .acknowledgeYokotenTopic(responseData, AppState.sessionToken);
    }
    
    function renderYokotenAdminDashboard(dashboardData) {
        const container = document.getElementById('yokoten-main-view');
        const { topicsSummary, kpiCards } = dashboardData;
        const topicOptions = topicsSummary.map(t => `<option value="${t.YokotenID}">${t.TopicDescription}</option>`).join('');
        container.innerHTML = `
            <h2 class="text-2xl font-bold mb-4">Admin Dashboard & Tracking</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">อัตราการรับทราบ (ล่าสุด)</p><p class="text-3xl font-bold text-blue-600">${kpiCards.latestTopicResponseRate}%</p></div>
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">ยังไม่รับทราบ (ล่าสุด)</p><p class="text-3xl font-bold text-red-600">${kpiCards.latestTopicUnacknowledged} <span class="text-lg">คน</span></p></div>
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">เฉลี่ยเวลารับทราบ (ล่าสุด)</p><p class="text-3xl font-bold">${kpiCards.avgResponseTime}</p></div>
                <div class="card p-4"><p class="text-sm font-medium text-slate-500">หัวข้อทั้งหมด (ปีนี้)</p><p class="text-3xl font-bold">${kpiCards.totalTopicsThisYear}</p></div>
            </div>
            <div class="card p-6">
                <div class="flex items-center gap-4 mb-6">
                    <label for="topic-selector" class="font-medium flex-shrink-0">เลือกหัวข้อเพื่อดูสรุป:</label>
                    <select id="topic-selector" class="form-select flex-grow">${topicOptions}</select>
                </div>
                <div id="admin-dashboard-content"></div>
            </div>
        `;
        const selector = document.getElementById('topic-selector');
        const renderDashboardContent = () => {
            const selectedId = selector.value;
            const selectedTopicData = topicsSummary.find(t => t.YokotenID === selectedId);
            renderAdminDashboardContent(selectedTopicData);
        };
        selector.addEventListener('change', renderDashboardContent);
        if (topicsSummary.length > 0) {
            renderDashboardContent();
        } else {
            document.getElementById('admin-dashboard-content').innerHTML = '<p>ยังไม่มีหัวข้อ Yokoten ให้แสดงผล</p>';
        }
    }

    function renderAdminDashboardContent(topicData) {
        const container = document.getElementById('admin-dashboard-content');
        if (!topicData) {
            container.innerHTML = '<p>ไม่พบข้อมูลสำหรับหัวข้อนี้</p>';
            return;
        }
        container.innerHTML = `
            <div class="space-y-6">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                        <h4 class="font-semibold mb-2 text-green-600">รายชื่อผู้ที่รับทราบแล้ว (${topicData.respondedList.length} คน)</h4>
                        <div class="max-h-48 overflow-y-auto text-sm space-y-1 border p-3 rounded-lg dark:border-slate-700 bg-green-50 dark:bg-green-900/20">
                            ${topicData.respondedList.length > 0 
                                ? topicData.respondedList.map(e => `<div><strong>${e.name}</strong> (${e.department})</div>`).join('') 
                                : '<p class="text-center text-slate-500">ยังไม่มีผู้รับทราบ</p>'
                            }
                        </div>
                    </div>
                    <div>
                        <h4 class="font-semibold mb-2 text-red-600">รายชื่อผู้ที่ยังไม่รับทราบ (${topicData.unrespondedList.length} คน)</h4>
                        <div class="max-h-48 overflow-y-auto text-sm space-y-1 border p-3 rounded-lg dark:border-slate-700 bg-red-50 dark:bg-red-900/20">
                            ${topicData.unrespondedList.length > 0 
                                ? topicData.unrespondedList.map(e => `<div><strong>${e.name}</strong> (${e.department})</div>`).join('') 
                                : '<p class="text-center text-slate-500">รับทราบครบทุกคนแล้ว</p>'
                            }
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    function renderYokotenAdminTools(pageData) {
        const container = document.getElementById('yokoten-admin-view');
        const { allTopics, allEmployees, allResponses } = pageData;
        container.innerHTML = `
            <div class="border-b border-gray-200 dark:border-gray-700 mb-4">
                <nav id="admin-tools-tabs" class="-mb-px flex space-x-6" aria-label="Tabs">
                    <button class="tab-button active" data-target="admin-record-tab">บันทึกการรับทราบ</button>
                    <button class="tab-button" data-target="admin-manage-topics-tab">คลังหัวข้อ</button>
                </nav>
            </div>
            <div>
                <div id="admin-record-tab" class="tab-content active"></div>
                <div id="admin-manage-topics-tab" class="tab-content"></div>
            </div>
        `;
        document.querySelectorAll('#admin-tools-tabs .tab-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const targetId = e.currentTarget.dataset.target;
                document.querySelectorAll('#admin-tools-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                e.currentTarget.classList.add('active');
                document.querySelectorAll('#yokoten-admin-view .tab-content').forEach(content => content.classList.remove('active'));
                document.getElementById(targetId).classList.add('active');
            });
        });
        renderAdminRecordTab(pageData);
        renderAdminManageTopicsTab(pageData);
    }
    function renderAdminRecordTab(pageData) {
        const container = document.getElementById('admin-record-tab');
        const { allTopics, allEmployees, allResponses } = pageData;
        const topicOptions = allTopics.map(t => `<option value="${t.YokotenID}">${t.TopicDescription}</option>`).join('');
        const departmentOptions = [...new Set(allEmployees.map(e => e.Department))].sort().map(d => `<option value="${d}">${d}</option>`).join('');
        container.innerHTML = `
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="card p-6">
                    <h3 class="text-xl font-bold mb-4">บันทึกการรับทราบ</h3>
                    <form id="yokoten-record-form" class="space-y-4">
                        <div>
                            <label class="text-sm font-medium">1. เลือกหัวข้อ Yokoten</label>
                            <select id="record-topic-selector" name="yokotenId" class="w-full mt-1 form-select" required>${topicOptions}</select>
                        </div>
                        <div>
                            <label class="text-sm font-medium">2. เลือกพนักงาน</label>
                            <div class="flex gap-2 mt-2 mb-1">
                                <button type="button" id="select-all-btn" class="btn btn-sm btn-secondary">เลือกทั้งหมด</button>
                                <select id="dept-selector" class="form-select text-sm p-1"><option value="">เลือกตามแผนก</option>${departmentOptions}</select>
                                <button type="button" id="clear-selection-btn" class="btn btn-sm btn-secondary">ล้าง</button>
                            </div>
                            <select id="employee-selector" name="employeeIds" class="w-full form-input" multiple required size="8"></select>
                        </div>
                        <div>
                            <label class="text-sm font-medium">3. ระบุการตอบกลับ</label>
                            <div class="mt-2 flex gap-4">
                               <label class="flex items-center"><input type="radio" name="isRelated" value="Yes" required class="form-checkbox h-4 w-4"><span class="ml-2">เกี่ยวข้อง</span></label>
                               <label class="flex items-center"><input type="radio" name="isRelated" value="No" class="form-checkbox h-4 w-4"><span class="ml-2">ไม่เกี่ยวข้อง</span></label>
                            </div>
                        </div>
                        <div><label class="text-sm font-medium">4. ความคิดเห็นเพิ่มเติม</label><textarea name="comment" rows="3" class="w-full mt-1 form-textarea"></textarea></div>
                        <button type="submit" class="w-full btn btn-primary">บันทึกข้อมูล</button>
                    </form>
                </div>
                <div class="card p-6">
                    <h3 class="text-xl font-bold mb-4">รายชื่อผู้ที่รับทราบแล้ว</h3>
                    <div id="acknowledged-list" class="max-h-96 overflow-y-auto text-sm space-y-1 border p-3 rounded-lg dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50">
                        <p class="text-slate-500">กรุณาเลือกหัวข้อเพื่อดูข้อมูล</p>
                    </div>
                </div>
            </div>
        `;
        const topicSelector = document.getElementById('record-topic-selector');
        const employeeSelector = document.getElementById('employee-selector');
        const acknowledgedList = document.getElementById('acknowledged-list');
        const updateEmployeeList = () => {
            const selectedTopicId = topicSelector.value;
            const respondedIds = new Set(allResponses.filter(r => r.YokotenID === selectedTopicId).map(r => r.EmployeeID.toString()));
            employeeSelector.innerHTML = allEmployees
                .filter(emp => !respondedIds.has(emp.EmployeeID.toString()))
                .map(e => `<option value="${e.EmployeeID}">${e.EmployeeName} (${e.Department})</option>`)
                .join('');
            acknowledgedList.innerHTML = allEmployees
                .filter(emp => respondedIds.has(emp.EmployeeID.toString()))
                .map(e => `<div><strong>${e.name}</strong> (${e.Department})</div>`)
                .join('') || '<p class="text-slate-500">ยังไม่มีผู้รับทราบ</p>';
        };
        topicSelector.addEventListener('change', updateEmployeeList);
        document.getElementById('select-all-btn').addEventListener('click', () => { Array.from(employeeSelector.options).forEach(opt => opt.selected = true); });
        document.getElementById('dept-selector').addEventListener('change', (e) => {
            const selectedDept = e.target.value;
            Array.from(employeeSelector.options).forEach(opt => {
                const employee = allEmployees.find(emp => emp.EmployeeID.toString() === opt.value);
                opt.selected = employee && employee.Department === selectedDept;
            });
        });
        document.getElementById('clear-selection-btn').addEventListener('click', () => { employeeSelector.selectedIndex = -1; });
        document.getElementById('yokoten-record-form').addEventListener('submit', handleRecordResponseSubmit);
        updateEmployeeList();
    }
    function renderAdminManageTopicsTab(pageData) {
        const container = document.getElementById('admin-manage-topics-tab');
        const { allTopics } = pageData;
        const topicRows = allTopics.map(topic => `
            <tr class="border-b dark:border-slate-700">
                <td class="p-3">${new Date(topic.DateIssued).toLocaleDateString('th-TH')}</td>
                <td class="p-3">${topic.TopicDescription}</td>
                <td class="p-3">${topic.AttachmentLink ? '<a href="'+topic.AttachmentLink+'" target="_blank" class="text-blue-500 hover:underline">Link</a>' : 'ไม่มี'}</td>
                <td class="p-3">
                    <button onclick="showEditTopicModal('${topic.YokotenID}')" class="btn btn-sm btn-secondary">แก้ไข</button>
                    <button onclick="handleDeleteTopic('${topic.YokotenID}')" class="btn btn-sm bg-red-500 text-white hover:bg-red-600 ml-2">ลบ</button>
                </td>
            </tr>
        `).join('');
        container.innerHTML = `
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold">คลังหัวข้อ Yokoten</h3>
                <button onclick="showEditTopicModal()" class="btn btn-primary bg-green-600 hover:bg-green-700">สร้างหัวข้อใหม่</button>
            </div>
            <div class="card p-4 overflow-x-auto">
                <table class="w-full text-sm">
                    <thead class="text-left bg-slate-50 dark:bg-slate-800"><tr>
                        <th class="p-3">วันที่ประกาศ</th><th class="p-3">รายละเอียด</th><th class="p-3">ไฟล์แนบ</th><th class="p-3">ดำเนินการ</th>
                    </tr></thead>
                    <tbody>${topicRows}</tbody>
                </table>
            </div>
        `;
    }
    async function showEditTopicModal(yokotenId = null) {
        const isEditing = !!yokotenId;
        const title = isEditing ? 'แก้ไขหัวข้อ' : 'สร้างหัวข้อใหม่';
        openModal(title, renderLoadingPlaceholder('modal-body'));
        const allTopics = (await getData('cachedAdminData', 'getYokotenAdminPageData', [], true)).data.allTopics;
        const topic = isEditing ? allTopics.find(t => t.YokotenID === yokotenId) : null;
        const fields = [
            { label: 'รายละเอียดหัวข้อ', name: 'TopicDescription', type: 'textarea', value: topic?.TopicDescription, required: true },
            { label: 'ลิงก์ไฟล์แนบ', name: 'AttachmentLink', type: 'url', value: topic?.AttachmentLink },
            { label: 'Source Accident ID', name: 'SourceAccidentID', value: topic?.SourceAccidentID }
        ];
        let formHtml = `<form id="topic-edit-form" class="space-y-4">`;
        if (isEditing) {
            formHtml += `<input type="hidden" name="rowIndex" value="${topic.rowIndex}">`;
            formHtml += `<input type="hidden" name="YokotenID" value="${topic.YokotenID}">`;
        }
        formHtml += createForm(fields);
        formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
        document.getElementById('modal-body').innerHTML = formHtml;
        document.getElementById('topic-edit-form').addEventListener('submit', (e) => {
            e.preventDefault();
            const func = isEditing ? 'updateYokotenTopic' : 'addYokotenTopic';
            createFormActionHandler(e.target, func, ['cachedAdminData', 'cachedYokotenTopics'], () => loadYokotenPage());
        });
    }
    function handleDeleteTopic(yokotenId) {
        showConfirmModal('ยืนยันการลบ', 'คุณแน่ใจหรือไม่ที่จะลบหัวข้อนี้? การตอบกลับทั้งหมดที่เกี่ยวข้องจะถูกลบไปด้วย', () => {
            showLoading('กำลังลบข้อมูล...');
            google.script.run
                .withSuccessHandler(res => handleApiResponse(res, ['cachedAdminData', 'cachedYokotenTopics', 'cachedYokotenResponses'], () => loadYokotenPage()))
                .withFailureHandler(showError)
                .deleteYokotenTopic(yokotenId);
        });
    }
    function handleRecordResponseSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const btn = form.querySelector('button[type="submit"]');
        btn.disabled = true;
        showLoading('กำลังบันทึกข้อมูล...');
        const formData = new FormData(form);
        const data = {
            yokotenId: formData.get('yokotenId'),
            employeeIds: formData.getAll('employeeIds'),
            isRelated: formData.get('isRelated'),
            comment: formData.get('comment')
        };
        google.script.run
            .withSuccessHandler(res => {
                btn.disabled = false;
                hideLoading();
                if(res.status === 'success') {
                    showInfoModal('สำเร็จ', res.message);
                    getData('cachedAdminData', 'getYokotenAdminPageData', [], true).then(pageDataResult => {
                        renderAdminRecordTab(pageDataResult.data);
                    });
                } else {
                    showError({ message: res.message });
                }
            })
            .withFailureHandler(err => {
                btn.disabled = false;
                showError(err);
            })
            .recordYokotenResponses(data, AppState.sessionToken);
    }

        // --- โมดูลรายงานอุบัติเหตุ [อัปเดต] ---
        async function loadAccidentReportingPage(year = null) {
            const container = document.getElementById('accident-page');
            container.innerHTML = `
                <div id="accident-dashboard-view">
                    <div class="flex justify-between items-center mb-6 flex-wrap gap-4">
                        <div class="flex items-center gap-3">
                            <h2 class="text-2xl font-bold">Accident Dashboard</h2>
                            <select id="accident-year-select" class="form-select text-base"></select>
                        </div>
                        <button id="manage-accident-data-btn" class="admin-feature hidden btn btn-secondary bg-yellow-400 text-black hover:bg-yellow-500">จัดการข้อมูล</button>
                    </div>
                    <div id="accident-kpi-cards-container"></div>
                    <div id="accident-summary-cards-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6"></div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                        <div id="accident-monthly-trend-container" class="card p-4 md:p-6"></div>
                        <div id="accident-case-type-container" class="card p-4 md:p-6"></div>
                    </div>
                     <div class="card p-4 md:p-6 mb-6">
                        <div id="accident-top-locations-container"></div>
                    </div>
                    <div class="card p-4 md:p-6">
                        <h3 class="text-lg font-semibold mb-4">รายงานล่าสุด</h3>
                        <div id="accident-latest-reports-container" class="overflow-x-auto"></div>
                    </div>
                </div>
                <div id="accident-management-view" class="hidden"></div>
            `;
            
            renderLoadingPlaceholder('accident-kpi-cards-container');
            renderLoadingPlaceholder('accident-summary-cards-container');
            renderLoadingPlaceholder('accident-monthly-trend-container');
            renderLoadingPlaceholder('accident-case-type-container');
            renderLoadingPlaceholder('accident-top-locations-container');
            renderLoadingPlaceholder('accident-latest-reports-container');

            try {
                const result = await getData(`cachedAccidentData_${year || 'latest'}`, 'getAccidentDashboardData', year ? [year] : []);
                if (!result.success) throw new Error(result.message);
                renderAccidentDashboard(result);
            } catch (err) {
                showError(err);
                container.innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูล Accident Reporting ได้');
            } finally {
                hideLoading();
            }
        }
        
        function renderAccidentDashboard(result) {
            const { data, availableYears, selectedYear } = result;
            const kpis = data.kpiCards || { ltifr: 0, isr: 0, trir: 0, ifr_tsh: 0 };
            const summaries = data.summaryCards || { totalManHours: 0, lostTimeAccidents: 0, totalRecordableCases: 0, totalEmployees: 0 };
            const charts = data.charts || { monthlyTrend: [], caseTypeProportions: {}, top5Locations: [] };
            const latestReports = data.latestReports || [];
            const yearSelect = document.getElementById('accident-year-select');
            yearSelect.innerHTML = (availableYears && availableYears.length > 0 ? availableYears : [new Date().getFullYear()]).map(y => `<option value="${y}" ${y == selectedYear ? 'selected' : ''}>${y}</option>`).join('');
            yearSelect.addEventListener('change', (e) => loadAccidentReportingPage(e.target.value));
            const kpiContainer = document.getElementById('accident-kpi-cards-container');
            removeLoadingPlaceholder('accident-kpi-cards-container');
            kpiContainer.innerHTML = `<div class="card p-4 text-center"><p class="text-sm text-slate-500 dark:text-slate-400">LTIFR</p><p class="text-2xl font-bold text-red-600">${kpis.ltifr}</p></div><div class="card p-4 text-center"><p class="text-sm text-slate-500 dark:text-slate-400">ISR</p><p class="text-2xl font-bold text-orange-500">${kpis.isr}</p></div><div class="card p-4 text-center"><p class="text-sm text-slate-500 dark:text-slate-400">TRIR</p><p class="text-2xl font-bold text-yellow-500">${kpis.trir}</p></div><div class="card p-4 text-center col-span-2 md:col-span-1"><p class="text-sm text-slate-500 dark:text-slate-400">IFR (TSH)</p><p class="text-2xl font-bold text-blue-500">${kpis.ifr_tsh}</p></div>`;
            document.getElementById('accident-kpi-cards-container').className = 'grid grid-cols-2 md:grid-cols-4 gap-4 mb-6';
            const summaryContainer = document.getElementById('accident-summary-cards-container');
            removeLoadingPlaceholder('accident-summary-cards-container');
            summaryContainer.innerHTML = `<div class="card p-4"><p class="text-sm text-slate-500 dark:text-slate-400">Total Man-Hours</p><p class="text-xl font-semibold">${summaries.totalManHours}</p></div><div class="card p-4"><p class="text-sm text-slate-500 dark:text-slate-400">Lost Time Accidents (LTA)</p><p class="text-xl font-semibold">${summaries.lostTimeAccidents}</p></div><div class="card p-4"><p class="text-sm text-slate-500 dark:text-slate-400">Total Recordable Cases</p><p class="text-xl font-semibold">${summaries.totalRecordableCases}</p></div><div class="card p-4"><p class="text-sm text-slate-500 dark:text-slate-400">TSH Employees</p><p class="text-xl font-semibold">${summaries.totalEmployees}</p></div>`;
            drawAccidentMonthlyChart(charts.monthlyTrend);
            drawAccidentCaseTypeChart(charts.caseTypeProportions);
            drawAccidentLocationChart(charts.top5Locations);
            const reportsContainer = document.getElementById('accident-latest-reports-container');
            removeLoadingPlaceholder('accident-latest-reports-container');
            const reportColumns = [ { key: 'IncidentDate', label: 'วันที่เกิดเหตุ' }, { key: 'RecordableType', label: 'ประเภท' }, { key: 'Location', label: 'พื้นที่' }, { key: 'Description', label: 'รายละเอียด' }, { key: 'Status', label: 'สถานะ' }, { key: 'AttachmentLinks', label: 'เอกสารแนบ', render: (v, row) => { if (!v) return '<span class="text-slate-400">ไม่มี</span>'; try { const links = JSON.parse(v); if (Array.isArray(links) && links.length > 0) { return `<button onclick="showAttachmentLinksModal(event, '${encodeURIComponent(v)}')" class="btn btn-sm btn-secondary">ดูไฟล์ (${links.length})</button>`; } return '<span class="text-slate-400">ไม่มี</span>'; } catch(e) { return '<span class="text-slate-400">ไม่มี</span>'; } } }, ];
            reportsContainer.innerHTML = createTable(latestReports, reportColumns, 'ไม่พบข้อมูลอุบัติเหตุ');
            document.getElementById('manage-accident-data-btn').addEventListener('click', showAccidentManagementView);
            toggleAdminUI(AppState.isAdmin);
        }
        function drawAccidentMonthlyChart(monthlyData) {
            const container = document.getElementById('accident-monthly-trend-container');
            removeLoadingPlaceholder('accident-monthly-trend-container');
            container.innerHTML = '<h3 class="text-lg font-semibold mb-4">LTIFR & TRIR Monthly Trend</h3><div class="h-80 relative"><canvas id="accident-monthly-chart"></canvas></div>';
            const ctx = document.getElementById('accident-monthly-chart');
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const monthNames = ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."];
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: monthNames,
                    datasets: [
                        { label: 'LTIFR', data: monthlyData.map(d => d.ltifr), backgroundColor: '#ef4444', yAxisID: 'y' },
                        { label: 'TRIR', data: monthlyData.map(d => d.trir), backgroundColor: '#f59e0b', yAxisID: 'y' }
                    ]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    scales: {
                        x: { ticks: { color: textColor }, grid: { color: gridColor } },
                        y: { position: 'left', beginAtZero: true, ticks: { color: textColor }, grid: { color: gridColor } }
                    },
                    plugins: { legend: { position: 'bottom', labels: { color: textColor } } }
                }
            });
        }

        function drawAccidentCaseTypeChart(caseData) {
            const container = document.getElementById('accident-case-type-container');
            removeLoadingPlaceholder('accident-case-type-container');
            container.innerHTML = '<h3 class="text-lg font-semibold mb-4">สัดส่วนประเภทอุบัติเหตุ</h3><div class="h-80 relative"><canvas id="accident-case-type-chart"></canvas></div>';
            const ctx = document.getElementById('accident-case-type-chart');
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const labels = Object.keys(caseData);
            const values = Object.values(caseData);
            const isDark = document.documentElement.classList.contains('dark');
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: ['#ef4444', '#f59e0b', '#3b82f6', '#64748b'],
                        borderColor: isDark ? '#1e293b' : '#ffffff',
                    }]
                },
                options: {
                    responsive: true, maintainAspectRatio: false,
                    plugins: { legend: { position: 'bottom', labels: { color: textColor } } }
                }
            });
        }

        function drawAccidentLocationChart(locationData) {
            const container = document.getElementById('accident-top-locations-container');
            removeLoadingPlaceholder('accident-top-locations-container');
            container.innerHTML = '<h3 class="text-lg font-semibold mb-4">5 อันดับพื้นที่ที่เกิดอุบัติเหตุสูงสุด</h3><div class="h-80 relative"><canvas id="accident-location-chart"></canvas></div>';
            const ctx = document.getElementById('accident-location-chart');
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const labels = locationData.map(d => d.name);
            const values = locationData.map(d => d.value);
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{ label: 'จำนวนเคส', data: values, backgroundColor: '#8b5cf6' }]
                },
                options: {
                    indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                    scales: {
                        x: { beginAtZero: true, ticks: { color: textColor, stepSize: 1 }, grid: { color: gridColor } },
                        y: { ticks: { color: textColor }, grid: { color: gridColor } }
                    },
                    plugins: { legend: { display: false } }
                }
            });
        }
        
        function showAccidentManagementView() {
            document.getElementById('accident-dashboard-view').classList.add('hidden');
            const mgmtView = document.getElementById('accident-management-view');
            mgmtView.classList.remove('hidden');
            mgmtView.innerHTML = `
                <div class="flex items-center mb-6">
                    <button onclick="hideAccidentManagementView()" class="flex items-center text-blue-600 dark:text-blue-400 hover:underline">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                        กลับไป Dashboard
                    </button>
                </div>
                <h2 class="text-2xl font-bold mb-4">จัดการข้อมูลรายงานอุบัติเหตุ</h2>
                <div class="border-b border-gray-200 dark:border-gray-700 mb-4">
                    <nav id="accident-mgmt-tabs" class="-mb-px flex space-x-2 md:space-x-8 overflow-x-auto" aria-label="Tabs">
                        <button class="tab-button active flex-shrink-0" data-target="reports">ทะเบียนคุมอุบัติเหตุ</button>
                        <button class="tab-button flex-shrink-0" data-target="manhours">ชั่วโมงการทำงาน</button>
                    </nav>
                </div>
                <div>
                    <div id="reports-tab" class="tab-content active"></div>
                    <div id="manhours-tab" class="tab-content"></div>
                </div>
            `;
            
            document.querySelectorAll('#accident-mgmt-tabs .tab-button').forEach(button => {
                button.addEventListener('click', () => {
                    const targetId = button.dataset.target;
                    document.querySelectorAll('#accident-mgmt-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    document.querySelectorAll('#accident-management-view .tab-content').forEach(content => content.classList.remove('active'));
                    document.getElementById(`${targetId}-tab`).classList.add('active');
                    loadAccidentMgmtTabData(targetId);
                });
            });
            loadAccidentMgmtTabData('reports');
        }

        function hideAccidentManagementView() {
            document.getElementById('accident-management-view').classList.add('hidden');
            document.getElementById('accident-dashboard-view').classList.remove('hidden');
            loadAccidentReportingPage();
        }

        async function loadAccidentMgmtTabData(tabId) {
            const container = document.getElementById(`${tabId}-tab`);
            renderLoadingPlaceholder(container.id, 'กำลังโหลดข้อมูล...');
            
            if (tabId === 'reports') {
                try {
                    const data = await getData('cachedAccidentReports', 'getAccidentReports');
                    renderAccidentMgmtTable('reports', data);
                } catch(err) { showError(err); }
            } else if (tabId === 'manhours') {
                try {
                    const data = await getData('cachedManHours', 'getManHours');
                    renderAccidentMgmtTable('manhours', data);
                } catch(err) { showError(err); }
            }
        }
        
        function renderAccidentMgmtTable(type, data) {
            let container, columns, title, addBtnFunc;
            if (type === 'reports') {
                container = document.getElementById('reports-tab');
                title = 'ทะเบียนคุมอุบัติเหตุ';
                addBtnFunc = `showAddOrEditAccidentReportModal()`;
                columns = [
                    { key: 'IncidentDate', label: 'วันที่เกิดเหตุ' },
                    { key: 'RecordableType', label: 'ประเภท' },
                    { key: 'Location', label: 'พื้นที่' },
                    { key: 'Status', label: 'สถานะ' },
                    { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditAccidentReportModal(${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteAccidentReport(${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`}
                ];
            } else { // manhours
                container = document.getElementById('manhours-tab');
                title = 'ชั่วโมงการทำงาน';
                addBtnFunc = `showAddOrEditManHoursModal()`;
                columns = [
                    { key: 'Year', label: 'ปี' },
                    { key: 'Month', label: 'เดือน' },
                    { key: 'ManHours_TSH', label: 'ชั่วโมง (TSH)' },
                    { key: 'ManHours_Subcon', label: 'ชั่วโมง (Subcon)' },
                    { key: 'Actions', label: 'ดำเนินการ', render: (v, row) => `<button onclick="showAddOrEditManHoursModal(${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button><button onclick="handleDeleteManHours(${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>`}
                ];
                data.sort((a,b) => b.Year - a.Year || b.Month - a.Month);
            }
            
            container.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">${title}</h3>
                    <button onclick="${addBtnFunc}" class="btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มรายการใหม่</button>
                </div>
                <div class="card p-4 overflow-x-auto">${createTable(data, columns, 'ไม่มีข้อมูล')}</div>
            `;
        }
        
        async function showAddOrEditAccidentReportModal(rowIndex = null) {
            let record = null;
            const isEditing = !!rowIndex;
            const title = isEditing ? 'แก้ไขรายงานอุบัติเหตุ' : 'เพิ่มรายงานอุบัติเหตุใหม่';
            openModal(title, `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`, 'max-w-3xl');

            if (isEditing) {
                try {
                    const allData = await getData('cachedAccidentReports', 'getAccidentReports');
                    record = allData.find(item => item.rowIndex === rowIndex);
                } catch (err) { showError(err); closeModal(); return; }
            }
            
            const fields = [
                { label: 'วันที่เกิดเหตุ', name: 'IncidentDate', type: 'date', value: record?.IncidentDate, required: true },
                { label: 'ประเภทพนักงาน', name: 'EmployeeType', type: 'select', options: ['', 'TSH', 'Sub Contractor'], value: record?.EmployeeType, required: true },
                { label: 'ประเภทเคส', name: 'RecordableType', type: 'select', options: ['', 'LTI', 'MTC', 'First Aid', 'Near-Miss'], value: record?.RecordableType, required: true },
                { label: 'จำนวนวันหยุดงาน (ถ้าเป็น LTI)', name: 'LostWorkdays', type: 'number', value: record?.LostWorkdays || 0 },
                { label: 'แผนก/พื้นที่เกิดเหตุ', name: 'Location', type: 'select', options: departmentList, value: record?.Location, required: true },
                { label: 'สถานะเคส', name: 'Status', type: 'select', options: ['', 'Open', 'On Process', 'Closed'], value: record?.Status, required: true },
                { label: 'รายละเอียดเหตุการณ์', name: 'Description', type: 'textarea', value: record?.Description, required: true },
            ];

            let existingFilesHtml = '';
            if (isEditing && record.AttachmentLinks) {
                try {
                    const links = JSON.parse(record.AttachmentLinks);
                    if (Array.isArray(links) && links.length > 0) {
                        existingFilesHtml = '<p class="text-sm font-medium mt-4">ไฟล์ที่แนบแล้ว:</p><ul class="list-disc list-inside text-sm space-y-1">';
                        links.forEach(link => {
                            existingFilesHtml += `<li><a href="${link.url}" target="_blank" class="text-blue-600 hover:underline">${link.name}</a></li>`;
                        });
                        existingFilesHtml += '</ul>';
                    }
                } catch(e) { console.warn("Could not parse AttachmentLinks", e); }
            }

            let formHtml = `<form id="accident-report-form" class="space-y-4">
                ${isEditing ? `<input type="hidden" name="rowIndex" value="${record.rowIndex}">` : ''}
                ${createForm(fields)}
                <div>
                    <label class="text-sm font-medium">แนบไฟล์ (รูปภาพ, PDF)</label>
                    <input type="file" id="file-input" multiple class="block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 mt-1"/>
                    <div id="file-list" class="mt-2 text-sm text-slate-600"></div>
                    ${existingFilesHtml}
                </div>
                <div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div>
            </form>`;
            
            openModal(title, formHtml, 'max-w-3xl');
            AppState.accidentReporting.tempFiles = [];
            document.getElementById('file-input').addEventListener('change', handleFileSelect);
            document.getElementById('accident-report-form').addEventListener('submit', handleAccidentReportFormSubmit);
        }

        function handleFileSelect(event) {
            AppState.accidentReporting.tempFiles = Array.from(event.target.files);
            updateFileList();
        }

        function updateFileList() {
            const fileListDiv = document.getElementById('file-list');
            if (!fileListDiv) return;
            if (AppState.accidentReporting.tempFiles.length === 0) {
                fileListDiv.innerHTML = '';
            } else {
                fileListDiv.innerHTML = `<p class="font-medium">ไฟล์ที่เลือก:</p><ul>${AppState.accidentReporting.tempFiles.map(f => `<li class="truncate">- ${f.name} (${(f.size / 1024).toFixed(1)} KB)</li>`).join('')}</ul>`;
            }
        }

        async function handleAccidentReportFormSubmit(e) {
            e.preventDefault();
            const form = e.target;
            const submitBtn = form.querySelector('button[type="submit"]');
            submitBtn.disabled = true;
            showLoading('กำลังบันทึกและอัปโหลดไฟล์...');

            const formData = new FormData(form);
            const reportData = Object.fromEntries(formData.entries());
            
            const filePromises = AppState.accidentReporting.tempFiles.map(file => readFileAsBase64(file));
            const fileContents = await Promise.all(filePromises);

            const isEditing = !!reportData.rowIndex;
            const funcName = isEditing ? 'updateAccidentReport' : 'submitAccidentReport';
            const cacheKeys = ['cachedAccidentData', 'cachedAccidentReports'];

            if(isEditing) {
                google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, cacheKeys))
                    .withFailureHandler(err => { submitBtn.disabled = false; showError(err); })
                    .updateAccidentReport(reportData);
            } else {
                 google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, cacheKeys))
                    .withFailureHandler(err => { submitBtn.disabled = false; showError(err); })
                    .submitAccidentReport(reportData, fileContents);
            }
        }

        function readFileAsBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const base64 = event.target.result.split(',')[1];
                    resolve({ base64, filename: file.name, mimeType: file.type });
                };
                reader.onerror = (error) => reject(error);
                reader.readAsDataURL(file);
            });
        }
        
        function handleDeleteAccidentReport(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบรายงานอุบัติเหตุนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedAccidentData', 'cachedAccidentReports'])).withFailureHandler(showError).deleteAccidentReport(rowIndex);
            });
        }

        async function showAddOrEditManHoursModal(rowIndex = null) {
            let record = null;
            const isEditing = !!rowIndex;
            const title = isEditing ? 'แก้ไขข้อมูลชั่วโมงทำงาน' : 'เพิ่มข้อมูลชั่วโมงทำงาน';
            openModal(title, `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`);

            if (isEditing) {
                try {
                    const allData = await getData('cachedManHours', 'getManHours');
                    record = allData.find(item => item.rowIndex === rowIndex);
                } catch (err) { showError(err); closeModal(); return; }
            }

            // --- [UPDATE] เพิ่ม "step: '0.01'" เพื่อให้กรอกทศนิยม 2 ตำแหน่งได้ ---
            const fields = [
                { label: 'ปี', name: 'Year', type: 'number', value: record?.Year || new Date().getFullYear(), required: true },
                { label: 'เดือน', name: 'Month', type: 'select', options: Array.from({length: 12}, (_, i) => ({ value: i + 1, label: new Date(0, i).toLocaleString('th-TH', { month: 'long' }) })), value: record?.Month, required: true },
                { label: 'ชั่วโมงทำงาน (TSH)', name: 'ManHours_TSH', type: 'number', value: record?.ManHours_TSH, required: true, step: '0.01' },
                { label: 'ชั่วโมงทำงาน (Sub Contractor)', name: 'ManHours_Subcon', type: 'number', value: record?.ManHours_Subcon, required: true, step: '0.01' }
            ];

            let formHtml = `<form id="manhours-form" class="space-y-4">
                ${isEditing ? `<input type="hidden" name="rowIndex" value="${record.rowIndex}">` : ''}
                ${createForm(fields)}
                <div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div>
            </form>`;
            
            openModal(title, formHtml);
            document.getElementById('manhours-form').addEventListener('submit', handleAddOrEditManHours);
        }
        
        function handleAddOrEditManHours(e) {
            e.preventDefault();
            const func = e.target.querySelector('[name="rowIndex"]') ? 'updateManHours' : 'addManHours';
            createFormActionHandler(e.target, func, ['cachedAccidentData', 'cachedManHours']);
        }

        function handleDeleteManHours(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบข้อมูลชั่วโมงทำงานนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedAccidentData', 'cachedManHours'])).withFailureHandler(showError).deleteManHours(rowIndex);
            });
        }
        
        // --- DASHBOARD MODULE ---
        // Placeholder for now
        function loadDashboardPage() {
            const container = document.getElementById('dashboard-page');
            container.innerHTML = createPlaceholder('ภาพรวม (Dashboard)');
            hideLoading();
        }

        function renderDashboard(data) {
            const actionContainer = document.getElementById('dashboard-action-items');
            removeLoadingPlaceholder('dashboard-action-items');
            if (data.actionItems && data.actionItems.length > 0) {
                const itemsHtml = data.actionItems.map(item => `
                    <li class="flex items-center justify-between p-3 hover:bg-slate-50 dark:hover:bg-slate-800/50 rounded-lg">
                        <div>
                            <span class="font-semibold text-blue-600 dark:text-blue-400">${item.type}:</span>
                            <span class="ml-2">${item.title}</span>
                        </div>
                        <a href="${item.link}" data-action="navigate" class="btn btn-sm btn-secondary">ไปที่เมนู</a>
                    </li>
                `).join('');
                actionContainer.innerHTML = `
                    <div class="card p-4">
                        <h3 class="text-lg font-semibold mb-2 text-yellow-600 dark:text-yellow-400">รายการที่ต้องดำเนินการ</h3>
                        <ul class="divide-y dark:divide-slate-700">${itemsHtml}</ul>
                    </div>`;
            } else {
                actionContainer.innerHTML = '';
            }

            const summaryContainer = document.getElementById('dashboard-summary-cards');
            removeLoadingPlaceholder('dashboard-summary-cards');
            const cards = data.summaryCards;
            summaryContainer.innerHTML = `
                <div class="card p-6"><p class="text-sm text-slate-500 dark:text-slate-400">วันทำงานปลอดภัย</p><p class="text-4xl font-bold text-green-600">${cards.daysSafe}</p></div>
                <div class="card p-6"><p class="text-sm text-slate-500 dark:text-slate-400">ประเด็น Patrol ที่ยังไม่ปิด</p><p class="text-4xl font-bold text-red-600">${cards.openIssues}</p></div>
                <div class="card p-6"><p class="text-sm text-slate-500 dark:text-slate-400">ความคืบหน้า CCCF (YTD)</p><p class="text-4xl font-bold text-blue-600">${cards.cccfProgress}%</p><p class="text-xs text-slate-500 dark:text-slate-400">เป้าหมาย: ${cards.totalAchieved} / ${cards.totalTarget}</p></div>
            `;

            const patrolChartContainer = document.getElementById('dashboard-patrol-chart-container');
            removeLoadingPlaceholder('dashboard-patrol-chart-container');
            patrolChartContainer.innerHTML = `<h3 class="text-lg font-semibold mb-4">สรุปสถานะประเด็น Patrol</h3><div class="h-80 relative"><canvas id="dashboard-patrol-chart"></canvas></div>`;
            const patrolCtx = document.getElementById('dashboard-patrol-chart');
            if (patrolCtx) {
                const chartData = data.charts.patrolIssues;
                drawChart(patrolCtx.id, 'doughnut', Object.keys(chartData), Object.values(chartData), 'สถานะ');
            }
        }
        
        // --- OJT/SCW MODULE ---
        async function loadStopCallWaitPage() {
            const container = document.getElementById('ojt-page');
            container.innerHTML = `
                <div class="card p-6 mb-6">
                    <div class="flex justify-between items-start flex-wrap gap-2 mb-4">
                        <h2 class="text-2xl font-bold text-slate-800 dark:text-slate-100">หลักการ Stop - Call - Wait</h2>
                        <div id="scw-doc-container"></div>
                    </div>
                    <div class="grid md:grid-cols-3 gap-6">
                        <div class="card border-l-8 border-red-500 p-6 flex flex-col justify-center text-center h-40 shadow-lg">
                            <h3 class="text-4xl font-extrabold text-red-600 dark:text-red-400 tracking-wider">STOP</h3>
                            <p class="mt-2 text-slate-600 dark:text-slate-300">เมื่อพบเหตุไม่ปลอดภัย ให้ <strong>หยุด</strong> งานทันที</p>
                        </div>
                        <div class="card border-l-8 border-green-500 p-6 flex flex-col justify-center text-center h-40 shadow-lg">
                            <h3 class="text-4xl font-extrabold text-green-600 dark:text-green-400 tracking-wider">CALL</h3>
                            <p class="mt-2 text-slate-600 dark:text-slate-300"><strong>เรียก</strong> หัวหน้างานหรือผู้เกี่ยวข้อง</p>
                        </div>
                        <div class="card border-l-8 border-yellow-500 p-6 flex flex-col justify-center text-center h-40 shadow-lg">
                            <h3 class="text-4xl font-extrabold text-yellow-500 dark:text-yellow-400 tracking-wider">WAIT</h3>
                            <p class="mt-2 text-slate-600 dark:text-slate-300"><strong>รอ</strong> การแก้ไขจนกว่าจะปลอดภัย</p>
                        </div>
                    </div>
                </div>
                <div id="ojt-personal-summary-container"></div>
                <div class="card p-4 md:p-6">
                    <div class="flex justify-between items-center mb-4 flex-wrap gap-2">
                        <h2 class="text-xl font-semibold">สถานะการจัดอบรม OJT (ภาพรวมทุกแผนก)</h2>
                        <button id="add-ojt-dept-btn" class="admin-feature hidden btn btn-primary bg-green-600 hover:bg-green-700">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                            เพิ่ม/แก้ไขข้อมูลแผนก
                        </button>
                    </div>
                    <div id="ojt-dept-table-container" class="overflow-x-auto"></div>
                </div>
            `;

            renderLoadingPlaceholder('ojt-dept-table-container', 'กำลังโหลดข้อมูล OJT...');

            try {
                const result = await getData('cachedScwPageData', 'getStopCallWaitPageData');
                if (!result.success) throw new Error(result.message);

                renderStopCallWaitPage(result.data);
            } catch (err) {
                showError(err);
                document.getElementById('ojt-dept-table-container').innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูล Stop - Call - Wait ได้');
            } finally {
                hideLoading();
            }
        }
        function renderStopCallWaitPage(data) {
            const { ojtData, activeDocument } = data;
            const userDepartment = AppState.currentUser?.department;
            const userDeptOjtData = userDepartment ? ojtData.find(dept => dept.Department === userDepartment) : null;

            const personalSummaryContainer = document.getElementById('ojt-personal-summary-container');
            if (userDeptOjtData) {
                const status = getStatusForOjtDept(userDeptOjtData.NextReviewDate);
                const remaining = (parseInt(userDeptOjtData.TotalEmployees) || 0) - (parseInt(userDeptOjtData.OjtCompletedCount) || 0);
                personalSummaryContainer.innerHTML = `
                    <div class="card p-4 md:p-6 mb-6 bg-blue-50 dark:bg-blue-900/30 border-l-4 border-blue-500">
                        <h3 class="text-lg font-semibold text-blue-800 dark:text-blue-300">สรุปสถานะ OJT แผนก ${userDeptOjtData.Department}</h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-3 text-center">
                            <div>
                                <p class="text-sm text-slate-500 dark:text-slate-400">OJT แล้ว</p>
                                <p class="text-2xl font-bold">${userDeptOjtData.OjtCompletedCount || 0} / ${userDeptOjtData.TotalEmployees || 0}</p>
                            </div>
                            <div>
                                <p class="text-sm text-slate-500 dark:text-slate-400">คงเหลือ</p>
                                <p class="text-2xl font-bold ${remaining > 0 ? 'text-red-500' : 'text-green-500'}">${remaining}</p>
                            </div>
                            <div>
                                <p class="text-sm text-slate-500 dark:text-slate-400">OJT ล่าสุด</p>
                                <p class="text-xl font-semibold">${userDeptOjtData.LastOjtDate || 'N/A'}</p>
                            </div>
                            <div>
                                <p class="text-sm text-slate-500 dark:text-slate-400">สถานะ</p>
                                <div class="mt-1"><span class="status-badge ${status.class}">${status.text}</span></div>
                            </div>
                        </div>
                    </div>
                    `;
            } else {
                personalSummaryContainer.innerHTML = '';
            }

            const docContainer = document.getElementById('scw-doc-container');
            if (activeDocument && activeDocument.DocumentLink) {
                docContainer.innerHTML = `
                    <div class="text-right">
                        <button onclick="showDocumentModal('${activeDocument.DocumentLink}')" class="btn btn-secondary">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            ${activeDocument.DocumentName || 'เปิดเอกสาร'}
                        </button>
                        <button onclick="showUpdateScwDocModal()" title="แก้ไขเอกสารแนบ" class="admin-feature hidden ml-2 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button>
                    </div>`;
            } else {
                docContainer.innerHTML = `
                    <div class="text-right">
                        <span class="text-sm text-slate-500">ไม่มีเอกสารแนบ</span>
                        <button onclick="showUpdateScwDocModal()" title="แก้ไขเอกสารแนบ" class="admin-feature hidden ml-2 p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button>
                    </div>`;
            }
            renderOjtDepartmentTable(ojtData);
            document.getElementById('add-ojt-dept-btn').addEventListener('click', () => showAddOrEditOjtDeptModal());
            toggleAdminUI(AppState.isAdmin);
        }
        function getStatusForOjtDept(nextReviewDateStr) {
            if (!nextReviewDateStr) {
                return { text: 'ไม่มีข้อมูล', class: 'bg-gray-200 text-gray-800' };
            }
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const nextReviewDate = new Date(nextReviewDateStr);
            const diffTime = nextReviewDate - today;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            if (diffDays < 0) {
                return { text: 'หมดอายุ', class: 'status-expired' };
            } else if (diffDays <= 30) {
                return { text: 'ใกล้หมดอายุ', class: 'status-expiring' };
            } else {
                return { text: 'ปกติ', class: 'status-normal' };
            }
        }
        function renderOjtDepartmentTable(records) {
            const container = document.getElementById('ojt-dept-table-container');
            if (!container) return;
            removeLoadingPlaceholder('ojt-dept-table-container');
            const userDepartment = AppState.currentUser?.department;
            records.sort((a, b) => new Date(a.NextReviewDate) - new Date(b.NextReviewDate));
            const columns = [{ key: 'Department', label: 'แผนก' }, { key: 'TotalEmployees', label: 'พนักงานทั้งหมด', render: v => v || 0 }, { key: 'OjtCompletedCount', label: 'OJT แล้ว', render: v => v || 0 }, {
                key: 'Remaining',
                label: 'คงเหลือ',
                render: (v, row) => {
                    const remaining = (parseInt(row.TotalEmployees) || 0) - (parseInt(row.OjtCompletedCount) || 0);
                    return `<span class="font-bold ${remaining > 0 ? 'text-red-500' : 'text-green-500'}">${remaining}</span>`;
                }
            }, { key: 'LastOjtDate', label: 'OJT ล่าสุด' }, {
                key: 'Status',
                label: 'สถานะ',
                render: (v, row) => {
                    const status = getStatusForOjtDept(row.NextReviewDate);
                    return `<span class="status-badge ${status.class}">${status.text}</span>`;
                }
            }, {
                key: 'Actions',
                label: 'ดำเนินการ',
                render: (v, row) => `
                    <div class="admin-feature hidden">
                        <button onclick="showAddOrEditOjtDeptModal(${row.rowIndex})" class="text-yellow-500 hover:underline mr-2">แก้ไข</button>
                        <button onclick="handleDeleteOjtDeptRecord(${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>
                    </div>`
            }];

            container.innerHTML = createTable(records, columns, 'ยังไม่มีข้อมูลการอบรมรายแผนก', (row) => row.Department === userDepartment);
            toggleAdminUI(AppState.isAdmin);
        }
        async function showAddOrEditOjtDeptModal(rowIndex = null) {
            let record = null;
            openModal(rowIndex ? `แก้ไขข้อมูล OJT แผนก` : 'เพิ่มข้อมูล OJT แผนก', `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`);

            if (rowIndex) {
                try {
                    const result = await getData('cachedScwPageData', 'getStopCallWaitPageData');
                    if (!result.success) throw new Error(result.message);
                    record = result.data.ojtData.find(r => r.rowIndex === rowIndex);
                } catch (err) {
                    showError(err);
                    closeModal();
                    return;
                }
            }
            const isEditing = !!record;
            const title = isEditing ? `แก้ไขข้อมูล OJT แผนก ${record.Department}` : 'เพิ่มข้อมูล OJT แผนก';

            const fields = [{ label: 'แผนก', name: 'Department', type: 'select', options: departmentList, value: record?.Department, required: true }, { label: 'จำนวนพนักงานทั้งหมด', name: 'TotalEmployees', type: 'number', value: record?.TotalEmployees, required: true }, { label: 'จำนวนพนักงานที่ OJT แล้ว', name: 'OjtCompletedCount', type: 'number', value: record?.OjtCompletedCount, required: true }, { label: 'วันที่ OJT ล่าสุดของแผนก', name: 'LastOjtDate', type: 'date', value: record?.LastOjtDate, required: true }, ];

            let formHtml = `<form id="ojt-dept-form" class="space-y-4">`;
            if (isEditing) {
                formHtml += `<input type="hidden" name="rowIndex" value="${record.rowIndex}">`;
            }
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${isEditing ? 'บันทึกการแก้ไข' : 'เพิ่มข้อมูล'}</button></div></form>`;

            openModal(title, formHtml);

            document.getElementById('ojt-dept-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const func = isEditing ? 'updateOjtDepartmentRecord' : 'addOjtDepartmentRecord';
                createFormActionHandler(e.target, func, ['cachedScwPageData']);
            });
        }
        function handleDeleteOjtDeptRecord(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบข้อมูล OJT ของแผนกนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, ['cachedScwPageData']))
                    .withFailureHandler(showError)
                    .deleteOjtDepartmentRecord(rowIndex);
            });
        }
        async function showUpdateScwDocModal() {
            let doc = null;
            openModal('แก้ไขเอกสารแนบ Stop - Call - Wait', `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`);

            try {
                const result = await getData('cachedScwPageData', 'getStopCallWaitPageData');
                if (!result.success) throw new Error(result.message);
                doc = result.data.activeDocument;
            } catch (err) {
                showError(err);
                closeModal();
                return;
            }
            const title = 'แก้ไขเอกสารแนบ Stop - Call - Wait';
            const fields = [{ label: 'ชื่อเอกสาร', name: 'DocumentName', value: doc?.DocumentName, required: true }, { label: 'ลิงก์เอกสาร (จาก Google Drive)', name: 'DocumentLink', value: doc?.DocumentLink, required: true }, ];

            let formHtml = `<form id="scw-doc-form" class="space-y-4">${createForm(fields)}<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">บันทึก</button></div></form>`;

            openModal(title, formHtml);

            document.getElementById('scw-doc-form').addEventListener('submit', (e) => {
                e.preventDefault();
                createFormActionHandler(e.target, 'setScwDocument', ['cachedScwPageData']);
            });
        }

        // --- SAFETY TRAINING MODULE ---
        async function loadTrainingPage(year = null) {
            const container = document.getElementById('training-page');
            // Set up initial HTML structure
            container.innerHTML = `
                <div class="flex justify-between items-center mb-4 flex-wrap gap-4">
                    <div class="flex items-center gap-3">
                        <h2 class="text-2xl font-bold">Safety Training Dashboard</h2>
                        <div id="training-year-filter"></div>
                    </div>
                    <button id="add-training-status-btn" class="admin-feature hidden btn btn-primary bg-green-600 hover:bg-green-700">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                        เพิ่มข้อมูลการอบรม
                    </button>
                </div>
                <div id="training-summary-cards"></div>
                <div class="card p-4 md:p-6">
                    <div id="training-table-container" class="overflow-x-auto"></div>
                </div>
            `;

            // Show inline loading for the table
            renderLoadingPlaceholder('training-table-container', 'กำลังโหลดข้อมูลการอบรม...');

            try {
                const result = await getData(`cachedTrainingData_${year || 'latest'}`, 'getTrainingDashboardData', year ? [year] : []);
                if (!result.success) throw new Error(result.message);
                renderTrainingPage(result);
            } catch (err) {
                showError(err);
                document.getElementById('training-table-container').innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูล Safety Training ได้');
            } finally {
                hideLoading(); // Hide main loader
            }
        }
        function renderTrainingPage(result) {
            const { data, availableYears, selectedYear } = result;
            const container = document.getElementById('training-page');
            removeLoadingPlaceholder('training-table-container'); // Remove inline loader

            const yearFilterContainer = document.getElementById('training-year-filter');
            const yearOptions = availableYears.map(y => `<option value="${y}" ${y == selectedYear ? 'selected' : ''}>${y}</option>`).join('');
            yearFilterContainer.innerHTML = availableYears.length > 0 ? `
                    <select id="training-year-select" class="form-select text-base">
                        ${yearOptions}
                    </select>` : `<span class="text-base font-semibold">${selectedYear}</span>`;

            const summary = data.summaryCards;
            document.getElementById('training-summary-cards').innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                        <div class="card p-5 border-l-4 border-blue-500">
                            <p class="text-sm text-slate-500 dark:text-slate-400">หลักสูตรทั้งหมด (ใน ${selectedYear})</p>
                            <p class="text-3xl font-bold mt-1">${summary.totalCourses}</p>
                        </div>
                        <div class="card p-5 border-l-4 border-yellow-500">
                            <p class="text-sm text-slate-500 dark:text-slate-400">พนักงานเป้าหมาย</p>
                            <p class="text-3xl font-bold mt-1">${summary.totalTargeted.toLocaleString()}</p>
                        </div>
                        <div class="card p-5 border-l-4 border-green-500">
                            <p class="text-sm text-slate-500 dark:text-slate-400">อบรมแล้ว</p>
                            <p class="text-3xl font-bold mt-1">${summary.totalTrained.toLocaleString()}</p>
                        </div>
                        <div class="card p-5 border-l-4 border-teal-500">
                            <p class="text-sm text-slate-500 dark:text-slate-400">% ความสำเร็จรวม</p>
                            <p class="text-3xl font-bold mt-1">${summary.overallPercentage}%</p>
                        </div>
                    </div>
                `;

            const tableContainer = document.getElementById('training-table-container');
            const columns = [{ key: 'CourseName', label: 'ชื่อหลักสูตร' }, { key: 'Department', label: 'ส่วนงาน' }, { key: 'TargetGroup', label: 'กลุ่มเป้าหมาย' }, { key: 'TotalEmployees', label: 'เป้าหมาย (คน)' }, { key: 'TrainedCount', label: 'อบรมแล้ว (คน)' }, { key: 'Remaining', label: 'คงเหลือ', render: (v, row) => `<span class="font-bold ${v > 0 ? 'text-red-500' : 'text-green-500'}">${v}</span>` }, {
                key: 'SuccessRate',
                label: '% ความสำเร็จ',
                render: (v, row) => {
                    const rate = row.SuccessRate || 0;
                    let colorClass = 'is-red';
                    if (rate >= 100) colorClass = 'is-green';
                    else if (rate >= 80) colorClass = 'is-yellow';
                    return `
                                <div class="flex items-center">
                                    <div class="w-full progress-bar-bg rounded-full h-2.5 mr-2">
                                        <div class="progress-bar-fg ${colorClass} h-2.5 rounded-full" style="width: ${rate}%"></div>
                                    </div>
                                    <span class="font-semibold text-sm">${rate}%</span>
                                </div>
                            `;
                }
            }, { key: 'LastTrainingDate', label: 'อบรมล่าสุด' }, {
                key: 'Actions',
                label: 'ดำเนินการ',
                render: (v, row) => `
                        <div class="admin-feature hidden flex items-center gap-2">
                            <button onclick="showAddOrEditTrainingStatusModal(${row.rowIndex})" class="text-yellow-500 hover:underline">แก้ไข</button>
                            <button onclick="handleDeleteTrainingStatus(${row.rowIndex})" class="text-red-500 hover:underline">ลบ</button>
                        </div>`
            }];
            tableContainer.innerHTML = createTable(data.trainingStatusTable, columns, 'ไม่พบข้อมูลการอบรมสำหรับปีที่เลือก');

            // Add event listeners
            if (availableYears.length > 0) {
                document.getElementById('training-year-select').addEventListener('change', (e) => {
                    loadTrainingPage(e.target.value);
                });
            }
            document.getElementById('add-training-status-btn').addEventListener('click', () => showAddOrEditTrainingStatusModal());

            toggleAdminUI(AppState.isAdmin);
        }
        async function showAddOrEditTrainingStatusModal(rowIndex = null) {
            let record = null;
            const isEditing = !!rowIndex;
            const title = isEditing ? 'แก้ไขข้อมูลการอบรม' : 'เพิ่มข้อมูลการอบรม';

            openModal(title, `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`); // Show modal loader

            if (isEditing) {
                try {
                    const year = document.getElementById('training-year-select')?.value || new Date().getFullYear();
                    const result = await getData(`cachedTrainingData_${year}`, 'getTrainingDashboardData', [year]);
                    if (!result.success) throw new Error(result.message);
                    record = result.data.trainingStatusTable.find(r => r.rowIndex === rowIndex);
                } catch (err) {
                    showError(err);
                    closeModal();
                    return;
                }
            }

            const fields = [{ label: 'ชื่อหลักสูตร', name: 'CourseName', value: record?.CourseName, required: true }, { label: 'ส่วนงาน', name: 'Department', type: 'select', options: departmentList, value: record?.Department, required: true }, { label: 'กลุ่มเป้าหมาย', name: 'TargetGroup', value: record?.TargetGroup, required: true }, { label: 'จำนวนพนักงานเป้าหมาย', name: 'TotalEmployees', type: 'number', value: record?.TotalEmployees, required: true }, { label: 'จำนวนที่อบรมผ่านแล้ว', name: 'TrainedCount', type: 'number', value: record?.TrainedCount, required: true }, { label: 'วันที่อบรมล่าสุด', name: 'LastTrainingDate', type: 'date', value: record?.LastTrainingDate, required: true }, { label: 'ปีของข้อมูล', name: 'Year', type: 'number', value: record?.Year || new Date().getFullYear(), required: true }, ];

            let formHtml = `<form id="training-status-form" class="space-y-4">`;
            if (isEditing) {
                formHtml += `<input type="hidden" name="rowIndex" value="${record.rowIndex}">`;
            }
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;

            openModal(title, formHtml);

            document.getElementById('training-status-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const func = isEditing ? 'updateTrainingStatus' : 'addTrainingStatus';
                createFormActionHandler(e.target, func, ['cachedTrainingData']);
            });
        }
        function handleDeleteTrainingStatus(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบข้อมูลการอบรมรายการนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, ['cachedTrainingData']))
                    .withFailureHandler(showError)
                    .deleteTrainingStatus(rowIndex);
            });
        }

        // --- MACHINE REGISTRY MODULE ---
        async function loadMachineRegistryPage() {
            const container = document.getElementById('machine-safety-page');
            // Set up initial HTML structure with placeholders
            container.innerHTML = `
                <div class="card p-4 md:p-6 mb-6">
                    <h2 class="text-xl font-semibold mb-4">ค้นหาเครื่องจักร</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="machine-type-filter" class="text-sm font-medium">กรองตามประเภท</label>
                            <select id="machine-type-filter" class="w-full mt-1 px-3 py-2 form-select">
                                <!-- Options will be loaded dynamically -->
                            </select>
                        </div>
                        <div>
                            <label for="machine-search-input" class="text-sm font-medium">ค้นหาตามชื่อ/รหัส</label>
                            <input type="text" id="machine-search-input" placeholder="พิมพ์เพื่อค้นหา..." class="w-full mt-1 px-3 py-2 form-input">
                        </div>
                    </div>
                </div>
                <div id="machine-admin-panel-container"></div>
                <div id="machine-cards-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6"></div>
                <div id="machine-profile-view" class="mt-6"></div>
            `;

            // Show inline loading for machine cards
            renderLoadingPlaceholder('machine-cards-container', 'กำลังโหลดข้อมูลเครื่องจักร...');

            try {
                const result = await getData('cachedMachineRegistry', 'getMachineRegistryData');
                if (!result.success) throw new Error(result.message);

                AppState.machineRegistry.machines = result.data.machines || [];
                AppState.machineRegistry.documents = result.data.documents || [];
                AppState.machineRegistry.links = result.data.links || [];

                renderMachineRegistryUI();
            } catch (err) {
                showError(err);
                document.getElementById('machine-cards-container').innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูลทะเบียนเครื่องจักรได้');
            } finally {
                hideLoading(); // Hide main loader
            }
        }
        function renderMachineRegistryUI() {
            const container = document.getElementById('machine-safety-page');
            const { machines } = AppState.machineRegistry;
            const machineTypes = ['ทั้งหมด', ...new Set(machines.map(m => m.MachineType).filter(Boolean))];
            
            // Render machine type filter options
            const typeFilter = document.getElementById('machine-type-filter');
            typeFilter.innerHTML = machineTypes.map(type => `<option value="${type}">${type}</option>`).join('');

            // Render admin panel
            const adminPanelContainer = document.getElementById('machine-admin-panel-container');
            adminPanelContainer.innerHTML = `
                <div class="admin-feature hidden mt-6">
                    <div class="card p-4 md:p-6 bg-slate-50 dark:bg-slate-800/50 border-t-4 border-yellow-400">
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-bold text-slate-800 dark:text-slate-200">แผงควบคุมสำหรับ Admin</h3>
                            <div class="flex items-center gap-2">
                                <button onclick="showAddEditMachineModal()" class="btn btn-sm bg-green-600 hover:bg-green-700 text-white">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                                    เพิ่มเครื่องจักร
                                </button>
                                <button onclick="renderAdminDocumentsModal()" class="btn btn-sm btn-secondary">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                                    จัดการเอกสารทั้งหมด
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            const searchInput = document.getElementById('machine-search-input');

            const filterAndRenderMachines = () => {
                const selectedType = typeFilter.value;
                const searchTerm = searchInput.value.toLowerCase();
                let filteredMachines = AppState.machineRegistry.machines;
                if (selectedType !== 'ทั้งหมด') {
                    filteredMachines = filteredMachines.filter(m => m.MachineType === selectedType);
                }
                if (searchTerm) {
                    filteredMachines = filteredMachines.filter(m =>
                        (m.MachineName || '').toLowerCase().includes(searchTerm) ||
                        (m.MachineCode || '').toLowerCase().includes(searchTerm)
                    );
                }

                renderMachineCards(filteredMachines);
                document.getElementById('machine-profile-view').innerHTML = ''; // Clear profile view on filter/search
            };
            typeFilter.addEventListener('change', filterAndRenderMachines);
            searchInput.addEventListener('input', filterAndRenderMachines);

            filterAndRenderMachines(); // Initial render
            toggleAdminUI(AppState.isAdmin);
        }
        function renderMachineCards(filteredMachines) {
            const cardsContainer = document.getElementById('machine-cards-container');
            if (!cardsContainer) return;
            removeLoadingPlaceholder('machine-cards-container'); // Remove inline loader

            if (filteredMachines.length === 0) {
                cardsContainer.innerHTML = `<p class="md:col-span-3 text-center py-8 text-slate-500">ไม่พบเครื่องจักรตามเงื่อนไขที่ค้นหา</p>`;
                return;
            }
            cardsContainer.innerHTML = filteredMachines.map(machine => `
                <div class="card p-4 relative border-2 border-transparent hover:shadow-lg hover:border-blue-500 dark:hover:border-blue-400">
                    <div class="admin-feature hidden absolute top-2 right-2 flex gap-1">
                        <button onclick="event.stopPropagation(); showAddEditMachineModal('${machine.MachineID}')" title="แก้ไขเครื่องจักร" class="p-1.5 rounded-md bg-yellow-100 dark:bg-yellow-800/50 text-yellow-600 dark:text-yellow-300 hover:bg-yellow-200"><svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button>
                        <button onclick="event.stopPropagation(); handleDeleteMachine('${machine.MachineID}')" title="ลบเครื่องจักร" class="p-1.5 rounded-md bg-red-100 dark:bg-red-800/50 text-red-600 dark:text-red-300 hover:bg-red-200"><svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg></button>
                    </div>
                    <div class="cursor-pointer" onclick="handleMachineCardClick('${machine.MachineID}')">
                        <h3 class="font-bold text-blue-600 dark:text-blue-400 truncate pr-16">${machine.MachineName}</h3>
                        <p class="text-sm text-slate-500 dark:text-slate-400">${machine.MachineCode || 'N/A'}</p>
                        <div class="mt-3 pt-3 border-t dark:border-slate-700 text-xs space-x-2">
                            <span class="inline-block bg-slate-100 dark:bg-slate-700 rounded-full px-2 py-1">${machine.MachineType || 'ไม่มีประเภท'}</span>
                            <span class="inline-block bg-slate-100 dark:bg-slate-700 rounded-full px-2 py-1">${machine.Area || 'ไม่มีพื้นที่'}</span>
                        </div>
                    </div>
                </div>
            `).join('');
            toggleAdminUI(AppState.isAdmin);
        }
        function handleMachineCardClick(machineId) {
            renderMachineProfile(machineId);
            const profileView = document.getElementById('machine-profile-view');
            if (profileView) {
                profileView.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
        function renderMachineProfile(machineId) {
            const profileContainer = document.getElementById('machine-profile-view');
            const { machines, documents, links } = AppState.machineRegistry;
            const machine = machines.find(m => String(m.MachineID).trim() === String(machineId).trim());
            if (!machine) {
                profileContainer.innerHTML = `<p class="text-red-500">ไม่พบข้อมูลเครื่องจักร</p>`;
                return;
            }
            const linkedDocIds = new Set(
                links
                .filter(l => String(l.MachineID).trim() === String(machineId).trim())
                .map(l => String(l.DocumentID).trim())
            );
            const linkedDocs = documents.filter(d => linkedDocIds.has(String(d.DocumentID).trim()));
            const docsByType = linkedDocs.reduce((acc, doc) => {
                const type = doc.DocumentType || 'เอกสารทั่วไป';
                if (!acc[type]) acc[type] = [];
                acc[type].push(doc);
                return acc;
            }, {});
            let docsHtml = Object.keys(docsByType).sort().map(type => {
                let docRows = docsByType[type].map(doc => `
                        <li class="flex justify-between items-center py-2 border-b dark:border-slate-700 last:border-b-0">
                            <div>
                                <p class="font-medium">${doc.DocumentName}</p>
                                <p class="text-xs text-slate-500 dark:text-slate-400">Rev: ${doc.Revision || 'N/A'} | อัปเดต: ${doc.LastUpdated || 'N/A'}</p>
                            </div>
                            <a href="${doc.DocumentLink}" target="_blank" class="btn btn-secondary btn-sm">เปิด/ดาวน์โหลด</a>
                        </li>
                    `).join('');
                return `<h4 class="text-md font-semibold mt-4 mb-2">${type}</h4><ul class="divide-y dark:divide-slate-700">${docRows}</ul>`;
            }).join('');
            if (linkedDocs.length === 0) {
                docsHtml = `<p class="mt-4 text-center text-slate-500">ไม่พบเอกสารที่เกี่ยวข้องกับเครื่องจักรนี้</p>`;
            }
            profileContainer.innerHTML = `
                <div class="card p-4 md:p-6">
                    <h3 class="text-lg font-bold text-blue-600 dark:text-blue-400">${machine.MachineName}</h3>
                    <div class="text-sm text-slate-600 dark:text-slate-300 mt-1">
                        <span><strong>รหัส:</strong> ${machine.MachineCode || 'N/A'}</span> | 
                        <span><strong>ประเภท:</strong> ${machine.MachineType || 'N/A'}</span> | 
                        <span><strong>พื้นที่:</strong> ${machine.Area || 'N/A'}</span>
                    </div>
                    <hr class="my-4 dark:border-slate-700">
                    <div>
                        <h3 class="text-lg font-semibold">รายการเอกสารที่เกี่ยวข้อง</h3>
                        ${docsHtml}
                    </div>
                </div>
            `;
        }
        function renderAdminDocumentsModal() {
            const { documents } = AppState.machineRegistry;
            const columns = [{ key: 'DocumentName', label: 'ชื่อเอกสาร' }, { key: 'DocumentType', label: 'ประเภท' }, { key: 'Revision', label: 'Rev.' }, { key: 'LastUpdated', label: 'อัปเดตล่าสุด' }, {
                key: 'Actions',
                label: 'ดำเนินการ',
                render: (v, row) => `
                        <button onclick="showAddEditDocumentModal('${row.DocumentID}')" class="text-yellow-500 hover:underline mr-2">แก้ไข</button>
                        <button onclick="handleDeleteDocument('${row.DocumentID}')" class="text-red-500 hover:underline">ลบ</button>
                    `
            }];
            const modalContent = `
                <div class="flex justify-end mb-4">
                    <button onclick="showAddEditDocumentModal()" class="btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มเอกสารใหม่</button>
                </div>
                <div class="overflow-x-auto">
                    ${createTable(documents, columns, 'ไม่มีข้อมูลเอกสาร')}
                </div>
            `;
            openModal('จัดการเอกสารทั้งหมด', modalContent, 'max-w-4xl');
        }
        function showAddEditMachineModal(machineId = null) {
            const machine = machineId ? AppState.machineRegistry.machines.find(m => m.MachineID === machineId) : null;
            const isEditing = !!machine;
            const title = isEditing ? 'แก้ไขข้อมูลเครื่องจักร' : 'เพิ่มเครื่องจักรใหม่';
            const fields = [{ label: 'ชื่อเครื่องจักร', name: 'MachineName', value: machine?.MachineName, required: true }, { label: 'รหัสเครื่องจักร', name: 'MachineCode', value: machine?.MachineCode }, { label: 'ประเภทเครื่องจักร', name: 'MachineType', value: machine?.MachineType, required: true }, { label: 'พื้นที่/ไลน์ผลิต', name: 'Area', value: machine?.Area }, { label: 'ประเมินความเสี่ยงแล้ว', name: 'RiskAssessmentStatus', type: 'checkbox', value: machine?.RiskAssessmentStatus }];
            let formHtml = `<form id="machine-form" class="space-y-4">`;
            if (isEditing) {
                formHtml += `<input type="hidden" name="MachineID" value="${machine.MachineID}">`;
                formHtml += `<input type="hidden" name="rowIndex" value="${machine.rowIndex}">`;
            }
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('machine-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const func = isEditing ? 'updateMachine' : 'addMachine';
                createFormActionHandler(e.target, func, ['cachedMachineRegistry']);
            });
        }
        function handleDeleteMachine(machineId) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบเครื่องจักรนี้และข้อมูลที่เชื่อมโยงทั้งหมดใช่หรือไม่? การกระทำนี้ไม่สามารถย้อนกลับได้', () => {
                showLoading('กำลังลบเครื่องจักร...');
                google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, ['cachedMachineRegistry']))
                    .withFailureHandler(showError)
                    .deleteMachine(machineId);
            });
        }
        async function showAddEditDocumentModal(documentId = null) {
            const isEditing = !!documentId;
            const title = isEditing ? 'แก้ไขเอกสาร' : 'เพิ่มเอกสารใหม่';
            openModal(title, `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`, 'max-w-4xl'); // Show modal loader

            let doc = null;
            if (isEditing) {
                try {
                    const result = await getData(`doc_${documentId}`, 'getDocumentWithLinks', [documentId]);
                    if (!result.success) throw new Error(result.message);
                    doc = result.data;
                } catch (err) {
                    showError(err);
                    closeModal();
                    return;
                }
            }

            const machineOptions = AppState.machineRegistry.machines.map(m => ({
                value: m.MachineID,
                label: `${m.MachineName} (${m.MachineCode || 'N/A'})`
            }));
            const fields = [{ label: 'ชื่อเอกสาร', name: 'DocumentName', value: doc?.DocumentName, required: true }, { label: 'ประเภทเอกสาร', name: 'DocumentType', type: 'select', options: documentTypeList, value: doc?.DocumentType, required: true }, { label: 'ลิงก์เอกสาร (จาก Google Drive)', name: 'DocumentLink', value: doc?.DocumentLink, required: true }, { label: 'เลข Revision', name: 'Revision', value: doc?.Revision }, { label: 'วันที่อัปเดตล่าสุด', name: 'LastUpdated', type: 'date', value: doc?.LastUpdated, required: true }, { label: 'เครื่องจักรที่เกี่ยวข้อง (เลือกได้หลายรายการ)', name: 'linkedMachineIds', type: 'multicheckbox', options: machineOptions, value: doc?.linkedMachineIds }];
            let formHtml = `<form id="document-form" class="space-y-4">`;
            if (isEditing) {
                formHtml += `<input type="hidden" name="DocumentID" value="${doc.DocumentID}">`;
                formHtml += `<input type="hidden" name="rowIndex" value="${doc.rowIndex}">`;
            }
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;

            openModal(title, formHtml, 'max-w-4xl');
            document.getElementById('document-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const func = isEditing ? 'updateDocument' : 'addDocument';
                createFormActionHandler(e.target, func, ['cachedMachineRegistry', 'doc_']);
            });
        }
        function handleDeleteDocument(documentId) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบเอกสารนี้และข้อมูลที่เชื่อมโยงทั้งหมดใช่หรือไม่? การกระทำนี้ไม่สามารถย้อนกลับได้', () => {
                showLoading('กำลังลบเอกสาร...');
                google.script.run
                    .withSuccessHandler(res => handleApiResponse(res, ['cachedMachineRegistry', 'doc_']))
                    .withFailureHandler(showError)
                    .deleteDocument(documentId);
            });
        }

        // --- Existing Page Loaders & Functions ---
        function loadPlaceholderPage(id, title) {
            const el = document.getElementById(id);
            if (id === 'dashboard-page') {
                el.innerHTML = `<div class="card p-6"><h2 class="text-xl font-semibold">${title}</h2><p class="mt-4 text-slate-500">หน้านี้กำลังอยู่ระหว่างการพัฒนา</p><div class="mt-6"><button id="user-add-attendance-btn-dashboard" class="btn btn-primary">บันทึกการเข้าร่วม Patrol</button></div></div>`;
                document.getElementById('user-add-attendance-btn-dashboard').addEventListener('click', showUserAddAttendanceModal);
            } else {
                if (el) el.innerHTML = createPlaceholder(title);
            }
            hideLoading(); // Hide main loader
        }
        function createCardBasedPageLoader(config) {
            return async () => {
                const container = document.getElementById(`${config.pageId}-page`);
                container.innerHTML = `
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold">${config.title}</h2>
                        <button id="add-${config.pageId}-btn" class="admin-feature hidden btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มใหม่</button>
                    </div>
                    <div id="current-${config.pageId}-container" class="mb-6"></div>
                    <div>
                        <h3 class="text-lg font-semibold mb-3 border-b dark:border-slate-700 pb-2">ประวัติ</h3>
                        <div id="past-${config.pageId}-container" class="space-y-4"></div>
                    </div>
                `;
                document.getElementById(`add-${config.pageId}-btn`).addEventListener('click', () => config.addModalFunction());
                
                // Show inline loading for card containers
                renderLoadingPlaceholder(`current-${config.pageId}-container`, 'กำลังโหลดข้อมูล...');
                renderLoadingPlaceholder(`past-${config.pageId}-container`, 'กำลังโหลดประวัติ...');

                try {
                    const data = await getData(config.cacheKey, config.fetchFunction);
                    renderCardPage(data, config);
                } catch (err) {
                    showError(err);
                    document.getElementById(`current-${config.pageId}-container`).innerHTML = `<div class="card p-4"><p class="text-red-500">ไม่สามารถโหลดข้อมูลได้</p></div>`;
                    document.getElementById(`past-${config.pageId}-container`).innerHTML = `<div class="card p-4"><p class="text-red-500">ไม่สามารถโหลดประวัติได้</p></div>`;
                } finally {
                    hideLoading(); // Hide main loader
                }
            };
        }
        function renderCardPage(data, config) {
            try {
                const currentContainer = document.getElementById(`current-${config.pageId}-container`);
                const pastContainer = document.getElementById(`past-${config.pageId}-container`);
                if (!currentContainer || !pastContainer) return;
                
                removeLoadingPlaceholder(`current-${config.pageId}-container`); // Remove inline loader
                removeLoadingPlaceholder(`past-${config.pageId}-container`); // Remove inline loader

                const { current, past } = data;
                if (!current) {
                    currentContainer.innerHTML = `<div class="card p-4"><p>ไม่พบข้อมูล</p></div>`;
                    pastContainer.innerHTML = '';
                } else {
                    currentContainer.innerHTML = config.cardRenderer(current, true);
                    pastContainer.innerHTML = past.length > 0 ? past.map(p => config.cardRenderer(p, false)).join('') : '<p class="p-4">ไม่มีประวัติ</p>';
                }
            } catch (e) {
                showError(e);
            } finally {
                toggleAdminUI(AppState.isAdmin);
                hideLoading();
            }
        }
        async function loadKpiPage() {
            const container = document.getElementById('kpi-page');
            container.innerHTML = `
                <div id="kpi-dashboard-view">
                    <!-- Initial structure with placeholders -->
                    <div class="flex justify-between items-center mb-6 flex-wrap gap-4 card p-4"> 
                        <div class="flex items-center gap-4 flex-wrap"> 
                            <div class="flex items-center"> 
                                <label for="kpi-year-select" class="mr-2 text-sm font-medium">สรุปผลปี:</label> 
                                <select id="kpi-year-select" class="form-input p-2 text-sm"></select> 
                            </div> 
                            <div class="flex items-center"> 
                                <label for="kpi-dept-select" class="mr-2 text-sm font-medium">แผนก:</label> 
                                <select id="kpi-dept-select" class="form-input p-2 text-sm"></select> 
                            </div> 
                        </div> 
                        <button id="manage-kpi-ann-btn" class="admin-feature hidden btn btn-secondary">จัดการประกาศ KPI</button> 
                    </div> 
                    <div id="kpi-announcement-info" class="mb-6"></div> 
                    <div id="kpi-summary-cards"></div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6"> 
                        <div id="department-summary-container" class="card p-4 md:p-6"></div> 
                        <div id="yearly-trend-container" class="card p-4 md:p-6"></div> 
                    </div> 
                    <div class="flex justify-end mb-4 gap-2"> 
                        <button id="import-kpi-btn" class="admin-feature hidden btn btn-secondary bg-teal-500 text-white hover:bg-teal-600">Import ข้อมูล</button> 
                        <button id="add-kpi-metric-btn" class="admin-feature hidden btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มตัวชี้วัดใหม่</button> 
                    </div> 
                    <div id="kpi-cards-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"></div>
                </div>
                <div id="kpi-announcement-view" class="hidden"></div>
            `;

            // Show inline loading for main KPI sections
            renderLoadingPlaceholder('kpi-summary-cards', 'กำลังโหลดสรุป...');
            renderLoadingPlaceholder('department-summary-container', 'กำลังโหลดกราฟ...');
            renderLoadingPlaceholder('yearly-trend-container', 'กำลังโหลดกราฟ...');
            renderLoadingPlaceholder('kpi-cards-container', 'กำลังโหลดตัวชี้วัด...');

            try {
                AppState.kpi.announcements = await getData('cachedKpiAnnouncements', 'getPageData_KpiAnnouncements');
                renderKpiDashboard();
            } catch (err) {
                showError(err);
                document.getElementById('kpi-dashboard-view').innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูล KPI ได้');
            } finally {
                hideLoading();
            }
        }
        async function renderKpiDashboard(selectedYear = null, selectedDept = 'All') {
            // No need for showLoading() here as it's handled by loadKpiPage or updateDashboard
            
            const dashboardView = document.getElementById('kpi-dashboard-view');
            const yearsFromAnnouncements = AppState.kpi.announcements.past.map(ann => new Date(ann.EffectiveDate).getFullYear());
            if (AppState.kpi.announcements.current) {
                yearsFromAnnouncements.unshift(new Date(AppState.kpi.announcements.current.EffectiveDate).getFullYear());
            }
            const allAvailableYears = [...new Set(yearsFromAnnouncements)].filter(Boolean).sort((a, b) => b - a);
            const latestYearOverall = allAvailableYears.length > 0 ? allAvailableYears[0] : new Date().getFullYear();
            const yearToDisplay = selectedYear || latestYearOverall;
            const departments = ['All', ...departmentList];

            // Update filter dropdowns
            const yearSelect = document.getElementById('kpi-year-select');
            const deptSelect = document.getElementById('kpi-dept-select');
            yearSelect.innerHTML = allAvailableYears.map(y => `<option value="${y}" ${y == yearToDisplay ? 'selected' : ''}>${y}</option>`).join('');
            deptSelect.innerHTML = departments.map(d => `<option value="${d}" ${d === selectedDept ? 'selected' : ''}>${d}</option>`).join('');

            // Re-attach event listeners after innerHTML update
            const updateDashboard = () => renderKpiDashboard(yearSelect.value, deptSelect.value);
            yearSelect.removeEventListener('change', updateDashboard); // Remove old listener
            deptSelect.removeEventListener('change', updateDashboard); // Remove old listener
            yearSelect.addEventListener('change', updateDashboard);
            deptSelect.addEventListener('change', updateDashboard);
            document.getElementById('manage-kpi-ann-btn').addEventListener('click', showKpiAnnouncementView);
            document.getElementById('import-kpi-btn').addEventListener('click', showImportKpiModal);

            // Show inline loading for relevant sections before fetching data
            renderLoadingPlaceholder('kpi-summary-cards', 'กำลังโหลดสรุป...');
            renderLoadingPlaceholder('department-summary-container', 'กำลังโหลดกราฟ...');
            renderLoadingPlaceholder('yearly-trend-container', 'กำลังโหลดกราฟ...');
            renderLoadingPlaceholder('kpi-cards-container', 'กำลังโหลดตัวชี้วัด...');

            try {
                AppState.kpi.dataForYear = await getData(`cachedKpiData_${yearToDisplay}`, 'getKpiDataForYear', [yearToDisplay]);
                let dataForYear = AppState.kpi.dataForYear;
                if (selectedDept !== 'All') {
                    dataForYear = dataForYear.filter(item => item.Department === selectedDept);
                }

                const allAnnouncements = [AppState.kpi.announcements.current, ...AppState.kpi.announcements.past].filter(Boolean);
                const relatedAnn = allAnnouncements.find(a => a.EffectiveDate && String(new Date(a.EffectiveDate).getFullYear()) == String(yearToDisplay));
                
                document.getElementById('add-kpi-metric-btn').onclick = () => { // Use onclick directly as it's re-rendered
                    if (relatedAnn) {
                        showAddOrEditKpiMetricModal(null, relatedAnn.AnnouncementID, yearToDisplay);
                    } else {
                        showInfoModal('ผิดพลาด', `ไม่พบประกาศ KPI ที่เกี่ยวข้องกับปี ${yearToDisplay} กรุณาสร้างประกาศก่อน`);
                    }
                };

                const annInfoContainer = document.getElementById('kpi-announcement-info');
                if (relatedAnn) {
                    annInfoContainer.innerHTML = `<div class="bg-blue-100 dark:bg-blue-900/50 border-l-4 border-blue-500 text-blue-800 dark:text-blue-300 p-4 rounded-lg"><p class="font-bold">${relatedAnn.AnnouncementTitle}</p>${relatedAnn.DocumentLink ? `<button onclick="showDocumentModal('${relatedAnn.DocumentLink}')" class="text-sm hover:underline">เปิดเอกสารประกาศที่เกี่ยวข้อง</button>` : ''}</div>`;
                } else {
                    annInfoContainer.innerHTML = '';
                }

                let metricToSummarize = '';
                if (AppState.kpi.dataForYear.length > 0) {
                    const allMetrics = [...new Set(AppState.kpi.dataForYear.map(d => d.Metric).filter(Boolean))];
                    const trcMetric = allMetrics.find(m => m.toUpperCase().includes('TRC'));
                    const accidentMetric = allMetrics.find(m => m.includes('อุบัติเหตุ'));
                    metricToSummarize = trcMetric || accidentMetric || allMetrics[0] || '';
                }

                const trendYearsData = {};
                for (const year of allAvailableYears) {
                    trendYearsData[year] = await getData(`cachedKpiData_${year}`, 'getKpiDataForYear', [year]);
                }

                renderSummaryCards(yearToDisplay, metricToSummarize);
                drawDepartmentSummaryChart(yearToDisplay, metricToSummarize);
                drawYearlyTrendChart(allAvailableYears, metricToSummarize, trendYearsData);
                
                const cardsContainer = document.getElementById('kpi-cards-container');
                removeLoadingPlaceholder('kpi-cards-container'); // Remove inline loader
                if (dataForYear.length === 0) {
                    cardsContainer.innerHTML = `<div class="md:col-span-3 card p-6 text-center space-y-4"><p>ไม่พบข้อมูล KPI สำหรับปี ${yearToDisplay}</p></div>`;
                } else {
                    cardsContainer.innerHTML = '';
                    dataForYear.forEach(kpi => {
                        const card = createKpiMetricCard(kpi);
                        cardsContainer.appendChild(card);
                        drawKpiChart(kpi);
                    });
                }
            } catch (err) {
                showError(err);
                // Ensure placeholders are replaced with error messages if data fails to load
                document.getElementById('kpi-summary-cards').innerHTML = `<div class="card p-4"><p class="text-red-500">ไม่สามารถโหลดสรุปได้</p></div>`;
                document.getElementById('department-summary-container').innerHTML = `<div class="card p-4"><p class="text-red-500">ไม่สามารถโหลดกราฟได้</p></div>`;
                document.getElementById('yearly-trend-container').innerHTML = `<div class="card p-4"><p class="text-red-500">ไม่สามารถโหลดกราฟได้</p></div>`;
                document.getElementById('kpi-cards-container').innerHTML = `<div class="md:col-span-3 card p-6 text-center space-y-4"><p class="text-red-500">ไม่สามารถโหลดตัวชี้วัดได้</p></div>`;
            } finally {
                toggleAdminUI(AppState.isAdmin);
                hideLoading(); // Hide main loader
            }
        }
        function showKpiAnnouncementView() {
            document.getElementById('kpi-dashboard-view').classList.add('hidden');
            const annView = document.getElementById('kpi-announcement-view');
            annView.classList.remove('hidden');
            annView.innerHTML = `
                <div class="flex items-center mb-6">
                    <button onclick="hideKpiAnnouncementView()" class="flex items-center text-blue-600 dark:text-blue-400 hover:underline">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                        กลับไป Dashboard
                    </button>
                </div>
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold">จัดการประกาศเป้าหมาย KPI</h2>
                    <button id="add-kpi-announcement-btn" class="admin-feature btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มประกาศใหม่</button>
                </div>
                <div id="current-kpi-announcement-container" class="mb-6"></div>
                <div>
                    <h3 class="text-lg font-semibold mb-3 border-b dark:border-slate-700 pb-2">ประวัติประกาศ</h3>
                    <div id="past-kpi-announcements-container" class="space-y-4"></div>
                </div>
            `;
            document.getElementById('add-kpi-announcement-btn').addEventListener('click', () => showAddOrEditKpiAnnouncementModal());
            
            renderLoadingPlaceholder('current-kpi-announcement-container', 'กำลังโหลดประกาศ...');
            renderLoadingPlaceholder('past-kpi-announcements-container', 'กำลังโหลดประวัติประกาศ...');

            renderKpiAnnouncements(AppState.kpi.announcements);
        }
        function hideKpiAnnouncementView() {
            document.getElementById('kpi-announcement-view').classList.add('hidden');
            document.getElementById('kpi-dashboard-view').classList.remove('hidden');
            // Re-load KPI dashboard to refresh data if any announcements were changed
            loadKpiPage(); 
        }
        function renderKpiAnnouncements(announcements) {
            try {
                const currentContainer = document.getElementById('current-kpi-announcement-container');
                const pastContainer = document.getElementById('past-kpi-announcements-container');
                if (!currentContainer || !pastContainer) return;
                
                removeLoadingPlaceholder('current-kpi-announcement-container');
                removeLoadingPlaceholder('past-kpi-announcements-container');

                const { current, past } = announcements;
                if (!current) {
                    currentContainer.innerHTML = '<div class="card p-4"><p>ไม่พบประกาศ KPI</p></div>';
                    pastContainer.innerHTML = '';
                } else {
                    currentContainer.innerHTML = createKpiAnnouncementCard(current, true);
                    pastContainer.innerHTML = past.length > 0 ? past.map(a => createKpiAnnouncementCard(a, false)).join('') : '<p class="p-4">ไม่มีประวัติประกาศ</p>';
                }
            } catch (e) {
                showError(e);
            } finally {
                toggleAdminUI(AppState.isAdmin);
                hideLoading();
            }
        }
        async function loadPatrolCccfPage(year = null, patrolSection = 'All', cccfSection = 'All') {
            const pageContainer = document.getElementById('patrol-cccf-page');
            pageContainer.innerHTML = `
                <div id="patrol-dashboard-view">
                    <div class="flex justify-between items-center mb-4 flex-wrap gap-4">
                        <div class="flex items-center gap-3 flex-wrap">
                            <h2 class="text-2xl font-bold">Patrol & CCCF Dashboard</h2>
                            <select id="patrol-year-select" class="form-input py-2 pl-3 pr-8 text-base"></select>
                        </div>
                        <div class="flex items-center gap-2 flex-wrap">
                            <button id="user-add-attendance-btn" class="btn btn-primary">บันทึกการเข้าร่วม Patrol</button>
                            <button id="manage-patrol-data-btn" class="admin-feature hidden btn btn-secondary bg-yellow-400 text-black hover:bg-yellow-500 border-yellow-500">จัดการข้อมูล</button>
                        </div>
                    </div>
                    <div class="space-y-8">
                        <div id="patrol-dashboard-content"></div>
                        <hr class="my-4 dark:border-slate-700">
                        <div id="cccf-dashboard-content"></div>
                    </div>
                </div>
                <div id="patrol-management-view" class="hidden"></div>
            `;

            // Show inline loaders for main dashboard sections
            renderLoadingPlaceholder('patrol-dashboard-content', 'กำลังโหลดข้อมูล Patrol...');
            renderLoadingPlaceholder('cccf-dashboard-content', 'กำลังโหลดข้อมูล CCCF...');

            try {
                const currentYear = year || new Date().getFullYear();
                const cacheKey = `cachedPatrolData_${currentYear}_${patrolSection}_${cccfSection}`;
                const result = await getData(cacheKey, 'getPatrolCccfDashboardData', [currentYear, patrolSection, cccfSection]);
                if (!result.success) {
                    throw new Error(result.message || "Could not load dashboard data.");
                }
                const { data, availableYears, selectedYear, allPatrolSections, allCccfSections } = result;
                const dashboardView = document.getElementById('patrol-dashboard-view');
                
                // Update year filter
                const yearOptions = availableYears.map(y => `<option value="${y}" ${y == selectedYear ? 'selected' : ''}>${y}</option>`).join('');
                document.getElementById('patrol-year-select').innerHTML = yearOptions.length > 0 ? yearOptions : `<option value="${new Date().getFullYear()}">${new Date().getFullYear()}</option>`;

                // Render Patrol Section
                const ps = data.patrolSystem;
                const patrolSectionOptions = ['All', ...allPatrolSections].map(s => `<option value="${s}" ${s === patrolSection ? 'selected' : ''}>${s}</option>`).join('');
                document.getElementById('patrol-dashboard-content').innerHTML = `
                    <div class="flex justify-between items-center mb-4 flex-wrap gap-2">
                        <h3 class="text-xl font-semibold border-b-2 border-blue-500 pb-2 text-blue-700 dark:text-blue-400">Patrol System (สรุปรายปี)</h3>
                        <div class="flex items-center gap-2">
                            <label for="patrol-section-filter" class="text-sm">หน่วยงาน:</label>
                            <select id="patrol-section-filter" class="form-input text-sm p-1">${patrolSectionOptions}</select>
                            <button onclick="exportElementToPdf('patrol-dashboard-content', 'Patrol_Dashboard_${selectedYear}.pdf')" class="btn btn-sm bg-red-500 text-white hover:bg-red-600">Export PDF</button>
                        </div>
                    </div>
                    <div class="space-y-6">
                        <div id="patrol-aging-issues-container"></div>
                        <div>
                            <h4 class="text-lg font-medium mb-3">ผลการเข้าร่วม (Attendance Result)</h4>
                            <div id="patrol-attendance-overall-cards" class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6"></div>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div id="patrol-attendance-management" class="card p-4"></div>
                                <div id="patrol-attendance-supervisor" class="card p-4"></div>
                            </div>
                        </div>
                        <div>
                            <h4 class="text-lg font-medium mb-3">การติดตามประเด็น (Follow up)</h4>
                            <div id="patrol-issue-status-cards" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6"></div>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                <div id="patrol-followup-by-section" class="card p-4"></div>
                                <div id="patrol-followup-by-type" class="card p-4"><div class="h-96"><canvas id="patrol-rank-chart"></canvas></div></div>
                            </div>
                        </div>
                    </div>
                `;
                if (ps) {
                    const agingContainer = document.getElementById('patrol-aging-issues-container');
                    if (ps.agingIssues && ps.agingIssues.length > 0) {
                        const agingRows = ps.agingIssues.map(i => `<tr><td class="py-1">${i.IssueNumber}</td><td>${i.FoundBy_Section}</td><td class="text-center font-semibold ${i.daysOpen > 60 ? 'text-red-500' : 'text-yellow-500'}">${i.daysOpen} วัน</td></tr>`).join('');
                        agingContainer.innerHTML = `<div class="card p-4 border-l-4 border-red-500 mb-6"><h4 class="font-bold text-red-600 dark:text-red-400">ประเด็นที่ค้างนานเกิน 30 วัน</h4><div class="overflow-auto max-h-48 mt-2 text-sm"><table class="w-full"><thead><tr class="text-left"><th>เลขที่</th><th>หน่วยงาน</th><th class="text-center">ค้างมาแล้ว</th></tr></thead><tbody>${agingRows}</tbody></table></div></div>`;
                    } else {
                        agingContainer.innerHTML = `<div class="card p-4 text-center text-slate-500">ไม่มีประเด็นที่ค้างนานเกิน 30 วัน</div>`;
                    }

                    const mgmtOverall = ps.attendanceResult.managementOverall || { attended: 0, total: 0, percent: 0 };
                    const supOverall = ps.attendanceResult.supervisorOverall || { attended: 0, total: 0, percent: 0 };
                    document.getElementById('patrol-attendance-overall-cards').innerHTML = `<div class="card p-4 bg-slate-50 dark:bg-slate-800/50"><h4 class="font-bold mb-2 text-base">ภาพรวม: Top & Management</h4><div class="flex flex-wrap justify-around items-center text-center gap-4"><div><p class="text-sm text-slate-500 dark:text-slate-400">การเข้าร่วม</p><p class="text-2xl font-bold">${mgmtOverall.attended} / ${mgmtOverall.total}</p></div><div><p class="text-sm text-slate-500 dark:text-slate-400">คิดเป็น</p><p class="text-2xl font-bold text-blue-600">${mgmtOverall.percent}%</p></div></div></div><div class="card p-4 bg-slate-50 dark:bg-slate-800/50"><h4 class="font-bold mb-2 text-base">ภาพรวม: Supervisor</h4><div class="flex flex-wrap justify-around items-center text-center gap-4"><div><p class="text-sm text-slate-500 dark:text-slate-400">การเข้าร่วม</p><p class="text-2xl font-bold">${supOverall.attended} / ${supOverall.total}</p></div><div><p class="text-sm text-slate-500 dark:text-slate-400">คิดเป็น</p><p class="text-2xl font-bold text-blue-600">${supOverall.percent}%</p></div></div></div>`;
                    document.getElementById('patrol-attendance-management').innerHTML = `<h4 class="font-bold mb-2 text-base">รายบุคคล: Top & Management Team</h4><div class="overflow-auto max-h-80">${createTable(ps.attendanceResult.management, [ {key: 'name', label: 'ชื่อ'}, {key: 'attended', label: 'เข้าร่วม'}, {key: 'total', label: 'ทั้งหมด'}, {key: 'percent', label: '%'} ], 'ไม่มีข้อมูล')}</div>`;
                    document.getElementById('patrol-attendance-supervisor').innerHTML = `<h4 class="font-bold mb-2 text-base">รายบุคคล: Supervisor & Section chief Team</h4><div class="overflow-auto max-h-80">${createTable(ps.attendanceResult.supervisor, [ {key: 'name', label: 'ชื่อ'}, {key: 'attended', label: 'เข้าร่วม'}, {key: 'total', label: 'ทั้งหมด'}, {key: 'percent', label: '%'} ], 'ไม่มีข้อมูล')}</div>`;
                    
                    const status = ps.followUp.totalStatus;
                    document.getElementById('patrol-issue-status-cards').innerHTML = `<div class="card p-4 text-center border-t-4 border-red-500"><p class="text-sm text-slate-500 dark:text-slate-400">Open</p><p class="text-3xl font-bold">${status.Open || 0}</p></div><div class="card p-4 text-center border-t-4 border-yellow-500"><p class="text-sm text-slate-500 dark:text-slate-400">On Process</p><p class="text-3xl font-bold">${status['On Process'] || 0}</p></div><div class="card p-4 text-center border-t-4 border-green-500"><p class="text-sm text-slate-500 dark:text-slate-400">Achieved</p><p class="text-3xl font-bold">${status.Achieved || 0}</p></div>`;
                    document.getElementById('patrol-followup-by-section').innerHTML = `<h4 class="font-bold mb-2 text-base">สรุปประเด็นตามส่วนงาน</h4><div class="overflow-auto max-h-96">${createTable(ps.followUp.bySection, [ {key: 'Section', label: 'Section'}, {key: 'Found', label: 'พบ'}, {key: 'Achieved', label: 'แก้ไขแล้ว'}, {key: 'OnProcess', label: 'กำลังทำ'}, {key: 'Percent', label: '% สำเร็จ'} ], 'ไม่มีข้อมูล')}</div>`;
                    
                    if (ps.followUp.byType && ps.followUp.byType.length > 0) {
                        drawAccidentTypeRankChart(ps.followUp.byType, 'patrol-rank-chart', 'สรุปประเด็น Patrol ตามประเภทและระดับ');
                    } else {
                        document.getElementById('patrol-followup-by-type').innerHTML = `<h4 class="font-bold mb-2 text-base">สรุปประเด็นตามประเภท</h4><div class="h-96 flex items-center justify-center text-slate-500">ไม่มีข้อมูล</div>`;
                    }
                }

                // Render CCCF Section
                const ca = data.cccfActivity;
                const overall = ca.overallAnnualSummary;
                const cccfSectionOptions = ['All', ...allCccfSections].map(s => `<option value="${s}" ${s === cccfSection ? 'selected' : ''}>${s}</option>`).join('');
                document.getElementById('cccf-dashboard-content').innerHTML = `
                    <div class="flex justify-between items-center mb-4 flex-wrap gap-2">
                        <h3 class="text-xl font-semibold border-b-2 border-green-500 pb-2 text-green-700 dark:text-green-400">CCCF Activity (สรุปรายปี)</h3>
                        <div class="flex items-center gap-2">
                            <label for="cccf-section-filter" class="text-sm">หน่วยงาน:</label>
                            <select id="cccf-section-filter" class="form-input text-sm p-1">${cccfSectionOptions}</select>
                            <button onclick="exportElementToPdf('cccf-dashboard-content', 'CCCF_Dashboard_${selectedYear}.pdf')" class="btn btn-sm bg-red-500 text-white hover:bg-red-600">Export PDF</button>
                        </div>
                    </div>
                    <div class="card p-6 mb-6">
                        <h4 class="text-lg font-semibold text-center">ภาพรวมปี ${selectedYear} (${cccfSection})</h4>
                        <div class="flex flex-wrap justify-around items-center text-center gap-4 mt-4">
                            <div class="px-4"><p class="text-sm text-slate-500 dark:text-slate-400">เป้าหมายรวม</p><p class="text-3xl font-bold">${overall.target}</p></div>
                            <div class="px-4"><p class="text-sm text-slate-500 dark:text-slate-400">ปิดแล้ว</p><p class="text-3xl font-bold text-green-600">${overall.achieved}</p></div>
                            <div class="px-4"><p class="text-sm text-slate-500 dark:text-slate-400">กำลังทำ</p><p class="text-3xl font-bold text-yellow-500">${overall.onProcess}</p></div>
                            <div class="px-4"><p class="text-sm text-slate-500 dark:text-slate-400">% สำเร็จ</p><p class="text-3xl font-bold text-blue-600">${overall.percent}%</p></div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div id="cccf-monthly-breakdown" class="card p-4"><h4 class="font-bold mb-2 text-base">ผลงานเทียบเป้าหมายรายเดือน</h4><div class="h-96"><canvas id="cccf-monthly-chart"></canvas></div></div>
                        <div id="cccf-summary-by-section" class="card p-4"></div>
                        <div id="cccf-summary-by-accident-type" class="lg:col-span-2 card p-4"></div>
                    </div>
                `;
                if (ca) {
                    drawMonthlyBreakdownChart(ca.monthlyBreakdown);
                    const cccfSectionColumns = [{ key: 'Section', label: 'หน่วยงาน' }, { key: 'Target', label: 'เป้าหมาย' }, { key: 'Achieved', label: 'ปิดแล้ว' }, { key: 'OnProcess', label: 'กำลังทำ' }, { key: 'Percent', label: '% สำเร็จ', render: (v) => `<span class="font-bold ${v < 80 ? 'text-red-500' : 'text-green-500'}">${v}%</span>` }];
                    document.getElementById('cccf-summary-by-section').innerHTML = `<h4 class="font-bold mb-2 text-base">สรุปผล CCCF ตามหน่วยงาน</h4><div class="overflow-auto max-h-96">${createTable(ca.summaryBySection, cccfSectionColumns, 'ไม่มีข้อมูล')}</div>`;
                    
                    const cccfTypeContainer = document.getElementById('cccf-summary-by-accident-type');
                    cccfTypeContainer.innerHTML = `<h4 class="font-bold mb-2 text-base">สรุปประเด็น CCCF ตามประเภท</h4><div class="h-96"><canvas id="cccf-rank-chart"></canvas></div>`;
                    if (ca.summaryByAccidentType && ca.summaryByAccidentType.length > 0) {
                        drawAccidentTypeRankChart(ca.summaryByAccidentType, 'cccf-rank-chart', 'สรุปประเด็น CCCF ตามประเภทและระดับ');
                    } else {
                        cccfTypeContainer.innerHTML = `<h4 class="font-bold mb-2 text-base">สรุปประเด็น CCCF ตามประเภท</h4><div class="h-96 flex items-center justify-center text-slate-500">ไม่มีข้อมูล</div>`;
                    }
                }

                // Re-attach event listeners after innerHTML updates
                const yearSelect = document.getElementById('patrol-year-select');
                const patrolFilter = document.getElementById('patrol-section-filter');
                const cccfFilter = document.getElementById('cccf-section-filter');
                const updateDashboard = () => {
                    const newYear = yearSelect.value;
                    const newPatrolSection = patrolFilter.value;
                    const newCccfSection = cccfFilter.value;
                    // Clear specific cache key for the new filter combination
                    sessionStorage.removeItem(`cachedPatrolData_${newYear}_${newPatrolSection}_${newCccfSection}`);
                    loadPatrolCccfPage(newYear, newPatrolSection, newCccfSection);
                };
                yearSelect.addEventListener('change', updateDashboard);
                patrolFilter.addEventListener('change', updateDashboard);
                cccfFilter.addEventListener('change', updateDashboard);
                document.getElementById('manage-patrol-data-btn').addEventListener('click', showPatrolManagementView);
                document.getElementById('user-add-attendance-btn').addEventListener('click', showUserAddAttendanceModal);
                
                removeLoadingPlaceholder('patrol-dashboard-content'); // Remove inline loader
                removeLoadingPlaceholder('cccf-dashboard-content'); // Remove inline loader

            } catch (err) {
                showError(err);
                pageContainer.innerHTML = `<div class="card p-6 text-red-500">Failed to load Patrol & CCCF data.</div>`;
            } finally {
                hideLoading(); // Hide main loader
                toggleAdminUI(AppState.isAdmin);
            }
        }
        async function showPatrolManagementView() {
            document.getElementById('patrol-dashboard-view').classList.add('hidden');
            const mgmtView = document.getElementById('patrol-management-view');
            mgmtView.classList.remove('hidden');
            mgmtView.innerHTML = ` 
                <div class="flex items-center mb-6">
                    <button onclick="hidePatrolManagementView()" class="flex items-center text-blue-600 dark:text-blue-400 hover:underline">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                        กลับไป Dashboard
                    </button>
                </div> 
                <h2 class="text-2xl font-bold mb-4">จัดการข้อมูล Patrol & CCCF</h2> 
                <div class="border-b border-gray-200 dark:border-gray-700 mb-4">
                    <nav id="patrol-mgmt-tabs" class="-mb-px flex space-x-2 md:space-x-8 overflow-x-auto" aria-label="Tabs">
                        <button class="tab-button active flex-shrink-0" data-target="sessions">Patrol Sessions</button>
                        <button class="tab-button flex-shrink-0" data-target="attendance">Attendance</button>
                        <button class="tab-button flex-shrink-0" data-target="issues">Issues</button>
                        <button class="tab-button flex-shrink-0" data-target="cccf_targets">CCCF Targets</button>
                        <button class="tab-button flex-shrink-0" data-target="cccf_activity">CCCF Activity</button>
                    </nav>
                </div> 
                <div>
                    <div id="sessions-tab" class="tab-content active"></div>
                    <div id="attendance-tab" class="tab-content"></div>
                    <div id="issues-tab" class="tab-content"></div>
                    <div id="cccf_targets-tab" class="tab-content"></div>
                    <div id="cccf_activity-tab" class="tab-content"></div>
                </div>
            `;
            
            // Show inline loader for the initial active tab
            renderLoadingPlaceholder('sessions-tab', 'กำลังโหลดข้อมูล...');

            try {
                // Fetch all necessary data for dropdowns once
                const [employees, sessions] = await Promise.all([
                    getData('cachedEmployees', 'getEmployees'), 
                    getData('cachedPatrolSessions', 'getPatrolSessions')
                ]);
                AppState.patrolMgmtData.employees = employees;
                AppState.patrolMgmtData.sessions = sessions;

                document.querySelectorAll('#patrol-mgmt-tabs .tab-button').forEach(button => {
                    button.addEventListener('click', () => {
                        const targetId = button.dataset.target;
                        document.querySelectorAll('#patrol-mgmt-tabs .tab-button').forEach(btn => btn.classList.remove('active'));
                        button.classList.add('active');
                        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                        document.getElementById(`${targetId}-tab`).classList.add('active');
                        loadPatrolMgmtTabData(targetId);
                    });
                });
                loadPatrolMgmtTabData('sessions'); // Load initial tab data
            } catch (err) {
                showError(err);
                // Display error in all tab containers if initial data fetch fails
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.innerHTML = `<div class="card p-4 text-red-500">ไม่สามารถโหลดข้อมูลได้: ${err.message}</div>`;
                });
            } finally {
                hideLoading(); // Hide main loader
            }
        }
        function hidePatrolManagementView() {
            document.getElementById('patrol-management-view').classList.add('hidden');
            document.getElementById('patrol-dashboard-view').classList.remove('hidden');
            loadPatrolCccfPage(); // Re-load dashboard to refresh data
        }
        async function loadPatrolMgmtTabData(tabId) {
            const container = document.getElementById(`${tabId}-tab`);
            const config = PATROL_CONFIG[tabId];
            if (!config) return;

            // Show inline loading for the current tab content
            renderLoadingPlaceholder(container.id, `กำลังโหลดข้อมูล ${config.title}...`);

            try {
                let summaryHtml = '';
                if (tabId === 'cccf_activity') {
                    const year = new Date().getFullYear();
                    const summaryResult = await getData(`cachedCccfMgmtSummary_${year}`, 'getCccfManagementSummary', [year]);
                    summaryHtml = '<div class="mb-6"><div class="flex justify-between items-center mb-4"> <h3 class="text-lg font-semibold">สรุปภาพรวมรายปี</h3> <div class="flex gap-2"> <button onclick="exportElementToPdf(\'cccf-summary-cards\', \'CCCF_Summary.pdf\')" class="btn btn-sm bg-red-500 text-white hover:bg-red-600">Export PDF</button> <button onclick="exportCccfSummaryToExcel()" class="btn btn-sm bg-green-500 text-white hover:bg-green-600">Export Excel</button> </div> </div><div id="cccf-summary-cards" class="grid grid-cols-1 md:grid-cols-2 gap-4">';
                    if (summaryResult.success && summaryResult.summary.length > 0) {
                        summaryResult.summary.forEach(s => {
                            const accidentTableRows = s.accidentTypes.map(at => `<tr><td class="py-1 pr-2">${at.type}</td><td class="text-center">${at['Rank A']}</td><td class="text-center">${at['Rank B']}</td><td class="text-center">${at['Rank C']}</td><td class="text-center font-semibold">${at.Total}</td></tr>`).join('');
                            summaryHtml += `<div class="card p-4"><h4 class="font-semibold">${s.section}</h4><div class="text-sm mt-2"><p>เป้าหมาย: ${s.target} | ปิดแล้ว: <span class="text-green-600">${s.achieved}</span> | กำลังทำ: <span class="text-yellow-600">${s.onProcess}</span></p><div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mt-1"><div class="bg-blue-600 h-2.5 rounded-full" style="width: ${s.percent}%"></div></div></div><div class="mt-3 text-xs"><table class="w-full"><thead><tr><th class="text-left">ประเภท</th><th>A</th><th>B</th><th>C</th><th>รวม</th></tr></thead><tbody>${accidentTableRows || '<tr><td colspan="5" class="text-center py-2">ไม่มีข้อมูลกิจกรรม</td></tr>'}</tbody></table></div></div>`;
                        });
                    } else {
                        summaryHtml += '<p class="col-span-2">ไม่มีข้อมูลสรุปสำหรับปีนี้</p>';
                    }
                    summaryHtml += '</div></div><hr class="my-6 dark:border-slate-700">';
                }
                
                const data = await getData(config.cacheKey, config.getFunc);
                const mainContentHtml = `
                    ${summaryHtml}
                    <div class="flex justify-between items-center mb-4 flex-wrap gap-2">
                        <h3 class="text-lg font-semibold">รายการทั้งหมด: ${config.title}</h3>
                        <div class="flex gap-2">
                            ${config.importFunc ? `<button onclick="showImportModal('${tabId}')" class="btn btn-secondary bg-teal-500 text-white hover:bg-teal-600">Import Excel</button>` : ''}
                            <button onclick="showAddOrEditModal('${tabId}')" class="btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มรายการใหม่</button>
                        </div>
                    </div>
                    <div id="${tabId}-table-container" class="card p-4 overflow-x-auto"></div>
                `;
                container.innerHTML = mainContentHtml; // Update content after data is fetched

                renderPatrolTable(tabId, data); // Render the table within the new content
            } catch (err) {
                showError(err);
                container.innerHTML = `<div class="card p-4 text-red-500">ไม่สามารถโหลดข้อมูลได้: ${err.message}</div>`;
            } finally {
                removeLoadingPlaceholder(container.id); // Ensure inline loader is removed
            }
        }
        function renderPatrolTable(type, data) {
            const config = PATROL_CONFIG[type];
            if (!config) return;
            document.getElementById(`${type}-table-container`).innerHTML = createTable(data, config.columns, `ไม่พบข้อมูล ${config.title}`);
        }
        async function showAddOrEditModal(type, rowIndex = null) {
            const config = PATROL_CONFIG[type];
            if (!config) return;
            
            // Show modal loader immediately
            openModal(`${rowIndex ? 'แก้ไข' : 'เพิ่ม'}ข้อมูล ${config.title}`, `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`);

            let data = null;
            if (rowIndex) {
                try {
                    const allData = await getData(config.cacheKey, config.getFunc);
                    data = allData.find(item => item.rowIndex === rowIndex);
                } catch (err) {
                    showError(err);
                    closeModal();
                    return;
                }
            }
            const isEditing = !!data;
            const title = `${isEditing ? 'แก้ไข' : 'เพิ่ม'}ข้อมูล ${config.title}`;
            
            let fields = await Promise.all(config.formFields.map(async field => {
                let populatedField = { ...field };
                if (field.name === 'EmployeeID' || field.name === 'ClosedBy_EmployeeID') {
                    // Ensure AppState.patrolMgmtData.employees is populated
                    if (AppState.patrolMgmtData.employees.length === 0) {
                        AppState.patrolMgmtData.employees = await getData('cachedEmployees', 'getEmployees');
                    }
                    populatedField.options = [{ value: '', label: 'กรุณาเลือกพนักงาน' }, ...AppState.patrolMgmtData.employees.map(e => ({ value: e.EmployeeID, label: `${e.EmployeeName} (${e.EmployeeID})` }))];
                }
                if (field.name === 'SessionID') {
                    // Ensure AppState.patrolMgmtData.sessions is populated
                    if (AppState.patrolMgmtData.sessions.length === 0) {
                        AppState.patrolMgmtData.sessions = await getData('cachedPatrolSessions', 'getPatrolSessions');
                    }
                    const sortedSessions = [...AppState.patrolMgmtData.sessions].sort((a, b) => new Date(b.PatrolDate) - new Date(a.PatrolDate));
                    populatedField.options = [{ value: '', label: 'กรุณาเลือกรอบการตรวจ' }, ...sortedSessions.map(s => ({ value: s.SessionID, label: `${s.PatrolDate} (${s.Description || 'รอบตรวจทั่วไป'})` }))];
                }
                populatedField.value = data ? data[field.name] : (field.defaultValue !== undefined ? field.defaultValue : '');
                return populatedField;
            }));

            let formHtml = `<form id="patrol-mgmt-form" class="space-y-4">`;
            if (isEditing) formHtml += `<input type="hidden" name="rowIndex" value="${data.rowIndex}">`;
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            
            openModal(title, formHtml); // Re-open modal with form

            const employeeIdSelect = document.getElementById('form-ClosedBy_EmployeeID');
            if (employeeIdSelect) {
                employeeIdSelect.addEventListener('change', (e) => {
                    const selectedId = e.target.value;
                    const employee = AppState.patrolMgmtData.employees.find(emp => emp.EmployeeID == selectedId);
                    const employeeNameInput = document.getElementById('form-ClosedBy_Name');
                    if (employee && employeeNameInput) {
                        employeeNameInput.value = employee.EmployeeName;
                    }
                });
            }
            document.getElementById('patrol-mgmt-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const form = e.target;
                const submitBtn = form.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                const formData = Object.fromEntries(new FormData(form).entries());
                const funcName = isEditing ? config.updateFunc : config.addFunc;
                showLoading('กำลังบันทึกข้อมูล...');
                google.script.run.withSuccessHandler(res => {
                    const cachesToClear = [config.cacheKey, `cachedCccfMgmtSummary_${new Date().getFullYear()}`];
                    // If Patrol/CCCF data is changed, clear all cached dashboard data
                    if (type.startsWith('cccf') || type.startsWith('patrol')) {
                        Object.keys(sessionStorage).forEach(key => {
                            if (key.startsWith('cachedPatrolData')) {
                                sessionStorage.removeItem(key);
                            }
                        });
                    }
                    handleApiResponse(res, cachesToClear);
                    if (res.status === 'success') {
                        // Re-load the current tab data to reflect changes
                        const activeTab = document.querySelector('#patrol-mgmt-tabs .tab-button.active').dataset.target;
                        loadPatrolMgmtTabData(activeTab);
                    }
                }).withFailureHandler(err => {
                    submitBtn.disabled = false;
                    showError(err);
                })[funcName](formData);
            });
        }
        function handleDeleteItem(type, rowIndex) {
            const config = PATROL_CONFIG[type];
            if (!config) return;
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบรายการนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => {
                    const cachesToClear = [config.cacheKey, `cachedCccfMgmtSummary_${new Date().getFullYear()}`];
                    // If Patrol/CCCF data is changed, clear all cached dashboard data
                    if (type.startsWith('cccf') || type.startsWith('patrol')) {
                        Object.keys(sessionStorage).forEach(key => {
                            if (key.startsWith('cachedPatrolData')) {
                                sessionStorage.removeItem(key);
                            }
                        });
                    }
                    handleApiResponse(res, cachesToClear);
                    if (res.status === 'success') {
                        // Re-load the current tab data to reflect changes
                        const activeTab = document.querySelector('#patrol-mgmt-tabs .tab-button.active').dataset.target;
                        loadPatrolMgmtTabData(activeTab);
                    }
                }).withFailureHandler(showError)[config.deleteFunc](rowIndex);
            });
        }
        async function showUserAddAttendanceModal() {
            if (!AppState.currentUser) {
                showInfoModal('ข้อผิดพลาด', 'ไม่พบข้อมูลผู้ใช้');
                return;
            }
            openModal('บันทึกการเข้าร่วม Patrol', `<div class="flex justify-center items-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div></div>`); // Show modal loader

            try {
                // Fetch sessions if not already in AppState
                if (AppState.patrolMgmtData.sessions.length === 0) {
                    AppState.patrolMgmtData.sessions = await getData('cachedPatrolSessions', 'getPatrolSessions');
                }
                
                const title = 'บันทึกการเข้าร่วม Patrol';
                const sortedSessions = [...AppState.patrolMgmtData.sessions].sort((a, b) => new Date(b.PatrolDate) - new Date(a.PatrolDate));
                const sessionOptions = [{ value: '', label: 'กรุณาเลือกรอบการตรวจ' }, ...sortedSessions.map(s => ({ value: s.SessionID, label: `${s.PatrolDate} (${s.Description || 'รอบตรวจทั่วไป'})` }))];
                const fields = [{ label: 'รอบการตรวจ', name: 'SessionID', type: 'select', options: sessionOptions, required: true }, { label: 'ประเภทการเดิน', name: 'WalkType', type: 'select', options: ['', 'เดินปกติ', 'เดินซ่อม'], required: true }, { label: 'ประเภทการตรวจ', name: 'PatrolType', type: 'select', options: ['', 'Top Management Safety Patrol (Monthly)', 'Management Safety Patrol (Weekly)', '5S & Safety Top management'], required: true }];
                let formHtml = `<form id="user-attendance-form" class="space-y-4"><p class="text-sm">ผู้บันทึก: <span class="font-semibold">${AppState.currentUser.name}</span></p><input type="hidden" name="EmployeeID" value="${AppState.currentUser.id}"><input type="hidden" name="EmployeeName" value="${AppState.currentUser.name}"><input type="hidden" name="Team" value="${AppState.currentUser.team}"><input type="hidden" name="Status" value="Attended">${createForm(fields)}<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">บันทึก</button></div></form>`;
                openModal(title, formHtml);
                document.getElementById('user-attendance-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    const form = e.target;
                    const submitBtn = form.querySelector('button[type="submit"]');
                    submitBtn.disabled = true;
                    const formData = Object.fromEntries(new FormData(form).entries());
                    showLoading('กำลังบันทึกการเข้าร่วม...');
                    google.script.run.withSuccessHandler(res => {
                        handleApiResponse(res, ['cachedPatrolAttendance', 'cachedPatrolData']);
                    }).withFailureHandler(err => {
                        submitBtn.disabled = false;
                        showError(err);
                    }).addPatrolAttendance(formData);
                });
            } catch (err) {
                showError(err);
                closeModal();
            }
        }
        function drawChart(canvasId, type, labels, data, label) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            const bgColors = ['#3b82f6', '#ef4444', '#f59e0b', '#10b981', '#8b5cf6', '#ec4899', '#64748b', '#34d399', '#fbbf24', '#a78bfa'];
            ctx.chart = new Chart(ctx, {
                type: type,
                data: {
                    labels: labels,
                    datasets: [{
                        label: label,
                        data: data,
                        backgroundColor: bgColors,
                        borderColor: isDark ? '#1f2937' : '#ffffff',
                        borderWidth: type === 'pie' || type === 'doughnut' ? 2 : 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: type === 'pie' || type === 'doughnut' ? 'bottom' : 'top',
                            labels: {
                                color: textColor,
                                boxWidth: 12
                            }
                        },
                        tooltip: {
                            boxPadding: 4
                        }
                    },
                    scales: type !== 'pie' && type !== 'doughnut' ? {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                color: gridColor
                            }
                        },
                        x: {
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                color: gridColor
                            }
                        }
                    } : {}
                }
            });
        }
        function drawAccidentTypeRankChart(data, canvasId, titleText) {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const labels = data.map(d => d.AccidentType);
            const rankAData = data.map(d => d['Rank A']);
            const rankBData = data.map(d => d['Rank B']);
            const rankCData = data.map(d => d['Rank C']);
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Rank A',
                        data: rankAData,
                        backgroundColor: '#ef4444'
                    }, {
                        label: 'Rank B',
                        data: rankBData,
                        backgroundColor: '#f59e0b'
                    }, {
                        label: 'Rank C',
                        data: rankCData,
                        backgroundColor: '#22c55e'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: titleText,
                            color: textColor,
                            font: {
                                size: 16
                            }
                        },
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: textColor
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                color: gridColor
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                color: textColor,
                                stepSize: 1
                            },
                            grid: {
                                color: gridColor
                            }
                        }
                    }
                }
            });
        }
        function drawKpiChart(kpi) {
            const canvasId = `kpi-chart-${kpi.Metric.replace(/[^a-zA-Z0-9]/g, '')}-${kpi.rowIndex}`;
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            if (ctx.chart) {
                ctx.chart.destroy();
            }
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const actualData = months.map(m => kpi[m] !== '' && kpi[m] != null ? parseFloat(kpi[m]) : null);
            const datasets = [{
                label: `ผลงานจริง (${kpi.Year})`,
                data: actualData,
                borderColor: '#3B82F6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                fill: true,
                tension: 0.3,
                spanGaps: true
            }];
            const annualTarget = parseFloat(kpi.Target);
            if (!isNaN(annualTarget)) {
                datasets.push({
                    label: 'เป้าหมายรายปี',
                    data: Array(12).fill(annualTarget),
                    borderColor: '#F59E0B',
                    borderDash: [5, 5],
                    fill: false,
                    pointRadius: 0,
                    type: 'line'
                });
            }
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                color: gridColor
                            }
                        },
                        x: {
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                color: gridColor
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                font: {
                                    size: 10
                                },
                                color: textColor
                            }
                        }
                    }
                }
            });
        }
        function getDepartmentColor(index) {
            const colors = ['#4C51BF', '#E53E3E', '#DD6B20', '#38A169', '#3182CE', '#805AD5', '#D53F8C', '#319795', '#4A5568', '#FBBF24', '#059669', '#9333EA', '#DC2626', '#F59E0B', '#1D4ED8', '#BE185D', '#047857', '#5B21B6', '#B91C1C', '#D97706'];
            return colors[index % colors.length];
        }
        function renderSummaryCards(yearToDisplay, metric) {
            const container = document.getElementById('kpi-summary-cards');
            removeLoadingPlaceholder('kpi-summary-cards'); // Remove inline loader

            if (!metric) {
                container.innerHTML = ''; // Clear if no metric
                return;
            }
            const now = new Date();
            const currentMonthIndex = now.getMonth();
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const currentMonthName = months[currentMonthIndex];
            const dataForYear = AppState.kpi.dataForYear.filter(d => d.Metric === metric);
            
            const totalCasesThisYear = dataForYear.reduce((total, item) => {
                const dataYear = parseInt(item.Year);
                let ytd = 0;
                if (dataYear < now.getFullYear()) {
                    ytd = months.reduce((sum, month) => sum + (parseFloat(item[month]) || 0), 0);
                } else if (dataYear === now.getFullYear()) {
                    ytd = months.slice(0, currentMonthIndex + 1).reduce((sum, month) => sum + (parseFloat(item[month]) || 0), 0);
                }
                return total + ytd;
            }, 0);
            
            const totalCasesThisMonth = dataForYear.reduce((sum, item) => sum + (parseFloat(item[currentMonthName]) || 0), 0);
            
            let lastAccidentDate = null;
            const trcData = AppState.kpi.dataForYear.filter(d => d.Metric === metric);
            for (const item of trcData) {
                for (const month of months) {
                    const value = parseFloat(item[month]);
                    const updatedDateStr = item[`${month}_Updated`]; // Assuming you have a column like 'Jan_Updated'
                    if (value > 0 && updatedDateStr) {
                        const updatedDate = new Date(updatedDateStr);
                        if (!lastAccidentDate || updatedDate > lastAccidentDate) {
                            lastAccidentDate = updatedDate;
                        }
                    }
                }
            }
            const daysSinceLastAccident = lastAccidentDate ? Math.floor((now - lastAccidentDate) / (1000 * 60 * 60 * 24)) : 'N/A';

            container.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                    <div class="card p-6 flex items-center">
                        <div>
                            <p class="text-sm text-slate-500 dark:text-slate-400">วันทำงานปลอดภัย</p>
                            <p class="text-3xl font-bold">${daysSinceLastAccident}</p>
                        </div>
                    </div>
                    <div class="card p-6 flex items-center">
                        <div>
                            <p class="text-sm text-slate-500 dark:text-slate-400">เคสเดือนนี้</p>
                            <p class="text-3xl font-bold">${totalCasesThisMonth}</p>
                        </div>
                    </div>
                    <div class="card p-6 flex items-center">
                        <div>
                            <p class="text-sm text-slate-500 dark:text-slate-400">เคสรวม (YTD ${yearToDisplay})</p>
                            <p class="text-3xl font-bold">${totalCasesThisYear}</p>
                        </div>
                    </div>
                </div>
            `;
        }
        function drawDepartmentSummaryChart(year, metric) {
            const container = document.getElementById('department-summary-container');
            removeLoadingPlaceholder('department-summary-container'); // Remove inline loader

            const titleHtml = `<h3 class="text-lg font-semibold mb-4">สรุปอุบัติเหตุรายแผนก (ปี ${year})</h3>`;
            if (!metric) {
                container.innerHTML = titleHtml + `<div class="h-80 flex items-center justify-center text-slate-500">ไม่พบข้อมูลตัวชี้วัดเกี่ยวกับอุบัติเหตุ</div>`;
                return;
            }
            container.innerHTML = titleHtml + `<div class="h-80 relative"><canvas id="dept-summary-chart"></canvas></div>`;
            const ctx = document.getElementById('dept-summary-chart');
            if (!ctx) return;

            const dataForChart = AppState.kpi.dataForYear.filter(d => d.Metric === metric).reduce((acc, curr) => {
                const dept = curr.Department;
                if (!acc[dept]) acc[dept] = 0;
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                const ytd = months.reduce((sum, month) => sum + (parseFloat(curr[month]) || 0), 0);
                acc[dept] += ytd;
                return acc;
            }, {});

            const labels = Object.keys(dataForChart);
            const values = Object.values(dataForChart);

            if (labels.length === 0) {
                container.innerHTML = titleHtml + `<div class="h-80 flex items-center justify-center text-slate-500">ไม่พบข้อมูล "${metric}" ในปี ${year}</div>`;
                return;
            }

            // Destroy existing chart if it exists
            if (ctx.chart) ctx.chart.destroy();

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'จำนวนเคส',
                        data: values,
                        backgroundColor: 'rgba(59, 130, 246, 0.7)',
                        borderColor: 'rgba(59, 130, 246, 1)',
                        borderWidth: 1,
                        borderRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }
        function drawYearlyTrendChart(years, metric, trendData) {
            const container = document.getElementById('yearly-trend-container');
            removeLoadingPlaceholder('yearly-trend-container'); // Remove inline loader

            const titleHtml = `<h3 class="text-lg font-semibold mb-4">แนวโน้มอุบัติเหตุเทียบรายปี</h3>`;
            if (!metric) {
                container.innerHTML = titleHtml + `<div class="h-80 flex items-center justify-center text-slate-500">ไม่พบข้อมูลตัวชี้วัดเกี่ยวกับอุบัติเหตุ</div>`;
                return;
            }
            container.innerHTML = titleHtml + `<div class="h-80 relative"><canvas id="yearly-trend-chart"></canvas></div>`;
            const ctx = document.getElementById('yearly-trend-chart');
            if (!ctx) return;

            const sortedYears = [...years].sort((a, b) => a - b);
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

            const datasets = sortedYears.map((year, index) => {
                const yearData = trendData[year] || [];
                const monthlyTotals = months.map(month => {
                    const dataForMonth = yearData.filter(d => d.Metric === metric);
                    return dataForMonth.reduce((sum, item) => sum + (parseFloat(item[month]) || 0), 0);
                });
                const color = getDepartmentColor(index);
                return {
                    label: String(year),
                    data: monthlyTotals,
                    borderColor: color,
                    backgroundColor: color + '1A', // Add some transparency for fill
                    fill: false,
                    tension: 0.1
                };
            });

            if (datasets.length === 0) {
                container.innerHTML = titleHtml + `<div class="h-80 flex items-center justify-center text-slate-500">ไม่พบข้อมูล "${metric}"</div>`;
                return;
            }

            // Destroy existing chart if it exists
            if (ctx.chart) ctx.chart.destroy();

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        async function loadEmployeePage() {
            const container = document.getElementById('employee-page');
            container.innerHTML = `
                <div class="flex justify-between items-center mb-4 gap-4 flex-wrap">
                    <h2 class="text-xl font-semibold">จัดการข้อมูลพนักงาน</h2>
                    <div class="flex gap-2">
                        <button id="import-employee-btn" class="admin-feature hidden btn btn-secondary bg-teal-500 text-white hover:bg-teal-600">Import</button>
                        <button id="add-employee-btn" class="admin-feature hidden btn btn-primary bg-green-600 hover:bg-green-700">เพิ่มพนักงาน</button>
                    </div>
                </div>
                <div id="employee-table-container" class="card p-4 overflow-x-auto"></div>
            `;
            document.getElementById('add-employee-btn').addEventListener('click', showAddEmployeeModal);
            document.getElementById('import-employee-btn').addEventListener('click', showImportEmployeeModal);
            
            renderLoadingPlaceholder('employee-table-container', 'กำลังโหลดข้อมูลพนักงาน...');

            try {
                const employees = await getData('cachedEmployees', 'getEmployees');
                renderEmployeeTable(employees);
            } catch (err) {
                showError(err);
                document.getElementById('employee-table-container').innerHTML = createPlaceholder('ไม่สามารถโหลดข้อมูลพนักงานได้');
            } finally {
                hideLoading();
            }
        }
        function renderEmployeeTable(employees) {
            const container = document.getElementById('employee-table-container');
            try {
                if (!container || !Array.isArray(employees)) return;
                removeLoadingPlaceholder('employee-table-container'); // Remove inline loader

                const columns = [{ key: 'EmployeeID', label: 'รหัสพนักงาน' }, { key: 'EmployeeName', label: 'ชื่อ - นามสกุล' }, { key: 'Department', label: 'แผนก' }, { key: 'Role', label: 'สิทธิ์' }, {
                    key: 'Actions',
                    label: 'ดำเนินการ',
                    render: (v, row) => `<button onclick='handleDeleteEmployee(${row.rowIndex})' class="admin-feature hidden text-red-500 hover:underline">ลบ</button>`
                }];
                container.innerHTML = createTable(employees, columns, 'ไม่พบข้อมูลพนักงาน');
            } catch (e) {
                showError(e);
            } finally {
                toggleAdminUI(AppState.isAdmin);
                hideLoading();
            }
        }
        function createPolicyCard(policy, isCurrent) {
            if (!policy) return '';
            let ackList = [];
            try {
                if (policy.AcknowledgedBy) ackList = JSON.parse(policy.AcknowledgedBy);
            } catch (e) {
                console.warn("Error parsing AcknowledgedBy for policy:", e);
            }
            const isAcknowledged = AppState.currentUser?.name ? ackList.includes(AppState.currentUser.name) : false;
            return `<div class="card p-5">${isCurrent ? '<div class="text-xs font-bold uppercase text-green-600 dark:text-green-400 mb-2">นโยบายปัจจุบัน</div>' : ''}<div class="flex justify-between items-start flex-wrap gap-4"><div class="flex-grow"><h3 class="text-lg font-semibold text-blue-600 dark:text-blue-400">${policy.PolicyTitle || 'N/A'}</h3><p class="text-sm text-slate-500 dark:text-slate-400 mb-4">วันที่บังคับใช้: ${policy.EffectiveDate || 'N/A'}</p><p class="whitespace-pre-wrap mb-4">${policy.Description || ''}</p>${policy.DocumentLink ? `<button onclick="showDocumentModal('${policy.DocumentLink}')" class="btn btn-secondary">เปิดเอกสาร</button>` : ''}</div><div class="flex-shrink-0 space-y-3 text-right"><div>${isAcknowledged ? `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300">รับทราบแล้ว</span>` : `<button onclick="handleAcknowledge('Policy', ${policy.rowIndex})" class="btn btn-primary">รับทราบ</button>`}</div><div class="admin-feature hidden pt-3 border-t dark:border-slate-700 space-x-2"><button onclick="handleEditPolicyClick(${policy.rowIndex})" title="แก้ไข" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button><button onclick="handleDeletePolicy(${policy.rowIndex})" title="ลบ" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg></button></div></div></div></div>`;
        }
        function createCommitteeCard(committee, isCurrent) {
            if (!committee) return '';
            let ackList = [];
            try {
                if (committee.AcknowledgedBy) ackList = JSON.parse(committee.AcknowledgedBy);
            } catch (e) {
                console.warn("Error parsing AcknowledgedBy for committee:", e);
            }
            const isAcknowledged = AppState.currentUser?.name ? ackList.includes(AppState.currentUser.name) : false;
            let linksHtml = '';
            if (committee.MainOrgChartLink) linksHtml += `<button onclick="showDocumentModal('${committee.MainOrgChartLink}')" class="btn btn-secondary mb-2">ผังองค์กรหลัก</button>`;
            if (committee.SubOrgChartLink) linksHtml += `<button onclick="showDocumentModal('${committee.SubOrgChartLink}')" class="btn btn-primary ml-0 sm:ml-2 mb-2">ผังคณะอนุกรรมการ</button>`;
            return `<div class="card p-5">${isCurrent ? '<div class="text-xs font-bold uppercase text-green-600 dark:text-green-400 mb-2">ชุดปัจจุบัน</div>' : ''}<div class="flex justify-between items-start flex-wrap gap-4"><div class="flex-grow"><span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full bg-blue-200 dark:bg-blue-900/50 text-blue-800 dark:text-blue-300">${committee.CommitteeType || 'ทั่วไป'}</span><h3 class="text-lg font-semibold text-blue-600 dark:text-blue-400 mt-2">${committee.CommitteeTitle || 'N/A'}</h3><p class="text-sm text-slate-500 dark:text-slate-400 mb-4">วาระ: ${committee.TermStartDate || '?'} ถึง ${committee.TermEndDate || '?'}</p><p class="whitespace-pre-wrap mb-4">${committee.Members || ''}</p><div class="flex flex-col sm:flex-row">${linksHtml}</div></div><div class="flex-shrink-0 space-y-3 text-right"><div>${isAcknowledged ? `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300">รับทราบแล้ว</span>` : `<button onclick="handleAcknowledge('Committee', ${committee.rowIndex})" class="btn btn-primary">รับทราบ</button>`}</div><div class="admin-feature hidden pt-3 border-t dark:border-slate-700 space-x-2"><button onclick="handleEditCommitteeClick(${committee.rowIndex})" title="แก้ไข" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button><button onclick="handleDeleteCommittee(${committee.rowIndex})" title="ลบ" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg></button></div></div></div></div>`;
        }
        function createKpiAnnouncementCard(ann, isCurrent) {
            if (!ann) return '';
            let ackList = [];
            try {
                if (ann.AcknowledgedBy) ackList = JSON.parse(ann.AcknowledgedBy);
            } catch (e) {
                console.warn("Error parsing AcknowledgedBy for KPI announcement:", e);
            }
            const isAcknowledged = AppState.currentUser?.name ? ackList.includes(AppState.currentUser.name) : false;
            return `<div class="card p-5">${isCurrent ? '<div class="text-xs font-bold uppercase text-green-600 dark:text-green-400 mb-2">ประกาศปัจจุบัน</div>' : ''}<div class="flex justify-between items-start flex-wrap gap-4"><div class="flex-grow"><h3 class="text-lg font-semibold text-blue-600 dark:text-blue-400">${ann.AnnouncementTitle || 'N/A'}</h3><p class="text-sm text-slate-500 dark:text-slate-400 mb-4">วันที่มีผล: ${ann.EffectiveDate || 'N/A'}</p>${ann.DocumentLink ? `<button onclick="showDocumentModal('${ann.DocumentLink}')" class="btn btn-secondary">เปิดเอกสาร</button>` : ''}</div><div class="flex-shrink-0 space-y-3 text-right"><div>${isAcknowledged ? `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300">รับทราบแล้ว</span>` : `<button onclick="handleAcknowledge('KpiAnnouncement', ${ann.rowIndex})" class="btn btn-primary">รับทราบ</button>`}</div><div class="admin-feature hidden pt-3 border-t dark:border-slate-700 space-x-2"><button onclick="handleEditKpiAnnouncementClick(${ann.rowIndex})" title="แก้ไข" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button><button onclick="handleDeleteKpiAnnouncement(${ann.rowIndex})" title="ลบ" class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg></button></div></div></div></div>`;
        }
        function createKpiMetricCard(kpi) {
            const cardEl = document.createElement('div');
            cardEl.className = 'card p-6 flex flex-col';
            cardEl.innerHTML = `<div class="flex justify-between items-start"><h3 class="font-semibold flex-grow pr-2">${kpi.Metric}</h3><div class="admin-feature hidden flex-shrink-0 space-x-1"><button onclick="handleEditKpiMetricClick(${kpi.rowIndex})" title="แก้ไข" class="p-1 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-4 h-4 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z"></path></svg></button><button onclick="handleDeleteKpiMetric(${kpi.rowIndex})" title="ลบ" class="p-1 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700"><svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg></button></div></div><div class="text-xs text-slate-500 dark:text-slate-400 mb-2">${kpi.Department || ''}</div><div class="flex-grow min-h-[200px]"><canvas id="kpi-chart-${kpi.Metric.replace(/[^a-zA-Z0-9]/g, '')}-${kpi.rowIndex}"></canvas></div>`;
            return cardEl;
        }
        function showAddOrEditPolicyModal(policy = null) {
            const isEditing = !!policy;
            const title = isEditing ? 'แก้ไขนโยบาย' : 'เพิ่มนโยบายใหม่';
            const fields = [{ label: 'หัวข้อนโยบาย', name: 'PolicyTitle', value: policy?.PolicyTitle, required: true }, { label: 'รายละเอียด', name: 'Description', type: 'textarea', value: policy?.Description }, { label: 'ลิงก์เอกสาร (ถ้ามี)', name: 'DocumentLink', type: 'text', value: policy?.DocumentLink }, { label: 'วันที่บังคับใช้', name: 'EffectiveDate', type: 'date', value: policy?.EffectiveDate, required: true }, { label: 'เป็นนโยบายปัจจุบัน', name: 'IsCurrent', type: 'checkbox', value: policy?.IsCurrent }];
            let formHtml = `<form id="policy-form" class="space-y-4">`;
            if (isEditing) formHtml += `<input type="hidden" name="rowIndex" value="${policy.rowIndex}">`;
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('policy-form').addEventListener('submit', handleAddOrEditPolicy);
        }
        function showAddOrEditCommitteeModal(committee = null) {
            const isEditing = !!committee;
            const title = isEditing ? 'แก้ไขข้อมูลคณะกรรมการ' : 'เพิ่มคณะกรรมการชุดใหม่';
            const fields = [{ label: 'ประเภทคณะกรรมการ', name: 'CommitteeType', type: 'select', options: ['', 'คณะกรรมการหลัก', 'คณะอนุกรรมการ'], value: committee?.CommitteeType, required: true }, { label: 'หัวข้อ/ชื่อชุด', name: 'CommitteeTitle', value: committee?.CommitteeTitle, required: true }, { label: 'รายชื่อสมาชิก (โดยย่อ)', name: 'Members', type: 'textarea', value: committee?.Members }, { label: 'ลิงก์ผังองค์กรหลัก (ทั้งบริษัท)', name: 'MainOrgChartLink', type: 'text', value: committee?.MainOrgChartLink }, { label: 'ลิงก์ผังคณะอนุกรรมการ (ถ้ามี)', name: 'SubOrgChartLink', type: 'text', value: committee?.SubOrgChartLink }, { label: 'วันที่เริ่มวาระ', name: 'TermStartDate', type: 'date', value: committee?.TermStartDate, required: true }, { label: 'วันที่สิ้นสุดวาระ', name: 'TermEndDate', type: 'date', value: committee?.TermEndDate, required: true }, { label: 'เป็นชุดปัจจุบัน', name: 'IsCurrent', type: 'checkbox', value: committee?.IsCurrent }];
            let formHtml = `<form id="committee-form" class="space-y-4">`;
            if (isEditing) formHtml += `<input type="hidden" name="rowIndex" value="${committee.rowIndex}">`;
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('committee-form').addEventListener('submit', handleAddOrEditCommittee);
        }
        function showAddEmployeeModal() {
            const title = 'เพิ่มพนักงานใหม่';
            const fields = [{ label: 'รหัสพนักงาน (6 หลัก)', name: 'EmployeeID', required: true }, { label: 'ชื่อ - นามสกุล', name: 'EmployeeName', required: true }, { label: 'ส่วนงาน', name: 'Department', type: 'select', options: ['', ...departmentList], required: true }, { label: 'ทีม (สำหรับ Patrol)', name: 'Team', type: 'select', options: ['', 'Management', 'Supervisor'] }, { label: 'สิทธิ์ (Role)', name: 'Role', type: 'select', options: ['User', 'Admin'], required: true }];
            const formHtml = `<form id="employee-form" class="space-y-4">${createForm(fields)}<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('employee-form').addEventListener('submit', handleAddEmployee);
        }
        function showAddOrEditKpiAnnouncementModal(ann = null) {
            const isEditing = !!ann;
            const title = isEditing ? 'แก้ไขประกาศ KPI' : 'เพิ่มประกาศ KPI ใหม่';
            const fields = [{ label: 'รหัสอ้างอิง (เช่น KPI-2568)', name: 'AnnouncementID', value: ann?.AnnouncementID, required: true }, { label: 'ชื่อประกาศ', name: 'AnnouncementTitle', value: ann?.AnnouncementTitle, required: true }, { label: 'ลิงก์เอกสารประกาศ', name: 'DocumentLink', type: 'text', value: ann?.DocumentLink }, { label: 'วันที่มีผลบังคับใช้', name: 'EffectiveDate', type: 'date', value: ann?.EffectiveDate, required: true }, { label: 'เป็นประกาศปัจจุบัน', name: 'IsCurrent', type: 'checkbox', value: ann?.IsCurrent }];
            let formHtml = `<form id="kpi-ann-form" class="space-y-4">`;
            if (isEditing) formHtml += `<input type="hidden" name="rowIndex" value="${ann.rowIndex}">`;
            formHtml += createForm(fields);
            formHtml += `<div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('kpi-ann-form').addEventListener('submit', handleAddOrEditKpiAnnouncement);
        }
        function showAddOrEditKpiMetricModal(metric = null, announcementID, year) {
            const isEditing = !!metric;
            const title = isEditing ? 'แก้ไขตัวชี้วัด KPI' : 'เพิ่มตัวชี้วัด KPI ใหม่';
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            let fields = [{ label: 'ชื่อตัวชี้วัด (Metric)', name: 'Metric', value: metric?.Metric, required: true }, { label: 'แผนก', name: 'Department', type: 'select', options: ['', ...departmentList], value: metric?.Department, required: true }, { label: 'หน่วยนับ (Unit)', name: 'Unit', value: metric?.Unit, required: true }, { label: 'เป้าหมายทั้งปี (Target)', name: 'Target', type: 'number', step: 'any', value: metric?.Target, required: true }, ];
            let monthFieldsHtml = months.map(month => `<div><label class="text-sm font-medium">${month}</label><input type="number" step="any" name="${month}" value="${metric ? (metric[month] || '') : ''}" class="w-full mt-1 px-3 py-2 form-input"></div>`).join('');
            let formHtml = `<form id="kpi-metric-form" class="space-y-4"><input type="hidden" name="AnnouncementID" value="${isEditing ? metric.AnnouncementID : announcementID}"><input type="hidden" name="Year" value="${isEditing ? metric.Year : year}">${isEditing ? `<input type="hidden" name="rowIndex" value="${metric.rowIndex}">` : ''}${createForm(fields)}<hr class="dark:border-slate-700"><p class="text-md font-medium">ค่าที่ทำได้จริงรายเดือน</p><div class="grid grid-cols-2 sm:grid-cols-4 gap-4">${monthFieldsHtml}</div><div class="pt-4 text-right"><button type="submit" class="btn btn-primary">${title}</button></div></form>`;
            openModal(title, formHtml);
            document.getElementById('kpi-metric-form').addEventListener('submit', handleAddOrEditKpiMetric);
        }
        function showImportEmployeeModal() {
            const title = 'นำเข้าข้อมูลพนักงานจาก Excel';
            const contentHtml = `<div class="space-y-4"><p class="text-sm">เลือกไฟล์ Excel (.xlsx) ที่มีคอลัมน์: EmployeeID, EmployeeName, Department, Role, Team, Email</p><input type="file" id="import-file-input" accept=".xlsx, .xls" class="block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-teal-50 file:text-teal-700 hover:file:bg-teal-100"/><div class="text-right"><button id="process-import-btn" class="btn btn-primary bg-teal-500 hover:bg-teal-600">นำเข้าข้อมูล</button></div></div>`;
            openModal(title, contentHtml);
            document.getElementById('process-import-btn').addEventListener('click', () => handleImport('employees'));
        }
        function showImportKpiModal() {
            const title = 'นำเข้าข้อมูล KPI จาก Excel';
            const contentHtml = `<div class="space-y-4"><p class="text-sm">เลือกไฟล์ Excel (.xlsx) ที่มีคอลัมน์ตามลำดับดังนี้: AnnouncementID, Year, Department, Metric, Unit, Target, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec</p><input type="file" id="import-file-input" accept=".xlsx, .xls" class="block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-teal-50 file:text-teal-700 hover:file:bg-teal-100"/><div class="text-right"><button id="process-import-btn" class="btn btn-primary bg-teal-500 hover:bg-teal-600">นำเข้าข้อมูล</button></div></div>`;
            openModal(title, contentHtml);
            document.getElementById('process-import-btn').addEventListener('click', () => handleImport('kpi'));
        }
        function showImportModal(type) {
            const config = PATROL_CONFIG[type];
            if (!config || !config.importFunc) return;
            const title = `นำเข้าข้อมูล ${config.title}`;
            const contentHtml = `<div class="space-y-4"><p class="text-sm">เลือกไฟล์ Excel (.xlsx) ที่มีคอลัมน์ตรงกับในระบบ</p><input type="file" id="import-file-input" accept=".xlsx, .xls" class="block w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-teal-50 file:text-teal-700 hover:file:bg-teal-100"/><div class="text-right"><button id="process-import-btn" class="btn btn-primary bg-teal-500 hover:bg-teal-600">นำเข้าข้อมูล</button></div></div>`;
            openModal(title, contentHtml);
            document.getElementById('process-import-btn').addEventListener('click', () => handleImport(type));
        }
        function handleImport(type) {
            const fileInput = document.getElementById('import-file-input');
            const importBtn = document.getElementById('process-import-btn');
            if (!fileInput.files.length) {
                return showInfoModal('ผิดพลาด', 'กรุณาเลือกไฟล์ Excel');
            }
            showLoading('กำลังนำเข้าไฟล์...');
            importBtn.disabled = true;
            let importFunction = '';
            let cacheKeys = [];
            if (type === 'employees') {
                importFunction = 'importEmployees';
                cacheKeys = ['cachedEmployees'];
            } else if (type === 'kpi') {
                importFunction = 'importKpiData';
                cacheKeys = ['cachedKpiData'];
            } else {
                const config = PATROL_CONFIG[type];
                if (!config || !config.importFunc) {
                    hideLoading();
                    return;
                }
                importFunction = config.importFunc;
                cacheKeys = [config.cacheKey, 'cachedPatrolData', `cachedCccfMgmtSummary_${new Date().getFullYear()}`];
            }
            const reader = new FileReader();
            reader.onload = e => {
                try {
                    const workbook = XLSX.read(new Uint8Array(e.target.result), {
                        type: 'array',
                        cellDates: true
                    });
                    const json = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
                    const formattedJson = json.map(row => {
                        const newRow = { ...row };
                        Object.keys(newRow).forEach(key => {
                            if (newRow[key] instanceof Date) {
                                newRow[key] = newRow[key].toISOString().split('T')[0]; // Format date to YYYY-MM-DD
                            }
                        });
                        return newRow;
                    });
                    google.script.run.withSuccessHandler(res => handleApiResponse(res, cacheKeys)).withFailureHandler(err => {
                        importBtn.disabled = false;
                        showError(err);
                    })[importFunction](formattedJson);
                } catch (err) {
                    importBtn.disabled = false;
                    showError({
                        message: "ไม่สามารถอ่านไฟล์ Excel ได้: " + err.message
                    });
                }
            };
            reader.readAsArrayBuffer(fileInput.files[0]);
        }
        function handleAddOrEditPolicy(e) {
            e.preventDefault();
            const func = e.target.rowIndex ? 'updatePolicy' : 'addPolicy';
            createFormActionHandler(e.target, func, ['cachedPolicies']);
        }
        async function handleEditPolicyClick(rowIndex) {
            showLoading('กำลังดึงข้อมูล...');
            try {
                const policies = await getData('cachedPolicies', 'getPageData_Policy');
                const allPolicies = [policies.current, ...policies.past].filter(Boolean);
                const item = allPolicies.find(p => p.rowIndex === rowIndex);
                hideLoading();
                if (item) showAddOrEditPolicyModal(item);
                else showError({
                    message: 'ไม่พบข้อมูล'
                });
            } catch (err) {
                showError(err);
            }
        }
        function handleDeletePolicy(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบนโยบายนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedPolicies'])).withFailureHandler(showError).deletePolicy(rowIndex);
            });
        }
        function handleAddOrEditCommittee(e) {
            e.preventDefault();
            const func = e.target.rowIndex ? 'updateCommittee' : 'addCommittee';
            createFormActionHandler(e.target, func, ['cachedCommittees']);
        }
        async function handleEditCommitteeClick(rowIndex) {
            showLoading('กำลังดึงข้อมูล...');
            try {
                const committees = await getData('cachedCommittees', 'getPageData_Committee');
                const allItems = [committees.current, ...committees.past].filter(Boolean);
                const item = allItems.find(c => c.rowIndex === rowIndex);
                hideLoading();
                if (item) showAddOrEditCommitteeModal(item);
                else showError({
                    message: 'ไม่พบข้อมูล'
                });
            } catch (err) {
                showError(err);
            }
        }
        function handleDeleteCommittee(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบข้อมูลคณะกรรมการชุดนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedCommittees'])).withFailureHandler(showError).deleteCommittee(rowIndex);
            });
        }
        function handleAddOrEditKpiAnnouncement(e) {
            e.preventDefault();
            const func = e.target.rowIndex ? 'updateKpiAnnouncement' : 'addKpiAnnouncement';
            createFormActionHandler(e.target, func, ['cachedKpiAnnouncements']);
        }
        function handleEditKpiAnnouncementClick(rowIndex) {
            const allItems = [AppState.kpi.announcements.current, ...AppState.kpi.announcements.past].filter(Boolean);
            const item = allItems.find(a => a.rowIndex === rowIndex);
            if (item) showAddOrEditKpiAnnouncementModal(item);
            else showError({
                message: 'ไม่พบข้อมูล'
            });
        }
        function handleDeleteKpiAnnouncement(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบประกาศนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedKpiAnnouncements'])).withFailureHandler(showError).deleteKpiAnnouncement(rowIndex);
            });
        }
        function handleAcknowledge(type, rowIndex) {
            if (!AppState.currentUser?.name) {
                showInfoModal('ข้อผิดพลาด', 'ไม่พบข้อมูลผู้ใช้สำหรับบันทึกการรับทราบ');
                return;
            }
            showLoading('กำลังบันทึกการรับทราบ...');
            const handlerFunction = `acknowledge${type}`;
            const cacheKey = `cached${type}s`; // e.g., cachedPolicies, cachedCommittees, cachedKpiAnnouncements
            google.script.run.withSuccessHandler(res => {
                hideLoading();
                showInfoModal(res.status === 'info' ? 'ข้อมูล' : 'สำเร็จ', res.message);
                if (res.status === 'success') {
                    sessionStorage.removeItem(cacheKey); // Clear specific cache for the updated item
                    if (pageLoaders[AppState.currentPageId]) pageLoaders[AppState.currentPageId](); // Re-load current page
                }
            }).withFailureHandler(showError)[handlerFunction](rowIndex, AppState.currentUser.name);
        }
        function handleAddOrEditKpiMetric(e) {
            e.preventDefault();
            const func = e.target.rowIndex ? 'updateKpiMetric' : 'addKpiMetric';
            createFormActionHandler(e.target, func, ['cachedKpiData']);
        }
        function handleEditKpiMetricClick(rowIndex) {
            const metricToEdit = AppState.kpi.dataForYear.find(d => d.rowIndex === rowIndex);
            if (metricToEdit) showAddOrEditKpiMetricModal(metricToEdit, metricToEdit.AnnouncementID, metricToEdit.Year);
            else showError({
                message: 'ไม่พบข้อมูลตัวชี้วัด'
            });
        }
        function handleDeleteKpiMetric(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบตัวชี้วัดนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedKpiData'])).withFailureHandler(showError).deleteKpiMetric(rowIndex);
            });
        }
        function handleAddEmployee(e) {
            e.preventDefault();
            createFormActionHandler(e.target, 'addEmployee', ['cachedEmployees']);
        }
        function handleDeleteEmployee(rowIndex) {
            showConfirmModal('ยืนยันการลบ', 'คุณต้องการลบข้อมูลพนักงานคนนี้ใช่หรือไม่?', () => {
                showLoading('กำลังลบข้อมูล...');
                google.script.run.withSuccessHandler(res => handleApiResponse(res, ['cachedEmployees'])).withFailureHandler(showError).deleteEmployee(rowIndex);
            });
        }
        function drawMonthlyBreakdownChart(monthlyData) {
            const canvasId = 'cccf-monthly-chart';
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            if (ctx.chart) ctx.chart.destroy();
            const monthNames = ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."];
            const labels = monthNames;
            const targetData = monthlyData.map(d => d.target);
            const achievedData = monthlyData.map(d => d.achieved);
            const isDark = document.documentElement.classList.contains('dark');
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';
            const textColor = isDark ? '#cbd5e1' : '#475569';
            ctx.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'เป้าหมาย',
                        data: targetData,
                        backgroundColor: isDark ? '#475569' : '#e2e8f0',
                        barPercentage: 0.7
                    }, {
                        label: 'ปิดแล้ว (Achieved)',
                        data: achievedData,
                        backgroundColor: '#10b981',
                        barPercentage: 0.7
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: textColor
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: textColor
                            },
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: textColor,
                                stepSize: 1
                            },
                            grid: {
                                color: gridColor
                            }
                        }
                    }
                }
            });
        }
        async function exportElementToPdf(elementId, fileName) {
            const element = document.getElementById(elementId);
            if (!element) {
                showInfoModal('ผิดพลาด', 'ไม่พบส่วนที่ต้องการ Export');
                return;
            }
            showLoading('กำลังสร้างไฟล์ PDF...');
            const { jsPDF } = window.jspdf;
            try {
                const canvas = await html2canvas(element, {
                    scale: 2, // Higher scale for better resolution
                    useCORS: true // Important for images loaded from external sources
                });
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF({
                    orientation: 'landscape', // or 'portrait'
                    unit: 'pt', // points
                    format: 'a4'
                });
                const imgProps = pdf.getImageProperties(imgData);
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
                pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
                pdf.save(fileName);
            } catch (e) {
                showError({
                    message: 'ไม่สามารถสร้างไฟล์ PDF ได้: ' + e.message
                });
            } finally {
                hideLoading();
            }
        }
        async function exportCccfSummaryToExcel() {
            const year = document.getElementById('patrol-year-select')?.value || new Date().getFullYear();
            showLoading('กำลังสร้างไฟล์ Excel...');
            try {
                const result = await getData(`cachedCccfMgmtSummary_${year}`, 'getCccfManagementSummary', [year]);
                if (!result.success || !result.summary) {
                    throw new Error('ไม่สามารถดึงข้อมูลสรุปได้');
                }
                const rows = [];
                // Add headers
                rows.push(['หน่วยงาน', 'เป้าหมาย', 'ปิดแล้ว', 'กำลังทำ', '% สำเร็จ', 'ประเภทอุบัติเหตุ', 'Rank A', 'Rank B', 'Rank C', 'รวม']);
                
                result.summary.forEach(s => {
                    if (s.accidentTypes.length === 0) {
                        rows.push([s.section, s.target, s.achieved, s.onProcess, s.percent, 'N/A', 0, 0, 0, 0]);
                    } else {
                        s.accidentTypes.forEach((at, index) => {
                            if (index === 0) {
                                // First row for the section includes section summary
                                rows.push([s.section, s.target, s.achieved, s.onProcess, s.percent, at.type, at['Rank A'], at['Rank B'], at['Rank C'], at.Total]);
                            } else {
                                // Subsequent rows for the same section only include accident type details
                                rows.push(['', '', '', '', '', at.type, at['Rank A'], at['Rank B'], at['Rank C'], at.Total]);
                            }
                        });
                    }
                });
                const worksheet = XLSX.utils.aoa_to_sheet(rows);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, 'CCCF Summary');
                XLSX.writeFile(workbook, `CCCF_Summary_${year}.xlsx`);
            } catch (e) {
                showError({
                    message: 'ไม่สามารถสร้างไฟล์ Excel ได้: ' + e.message
                });
            } finally {
                hideLoading();
            }
        }
        function createPlaceholder(title) {
            return `<div class="card p-6"><h2 class="text-xl font-semibold">${title}</h2><p class="mt-4 text-slate-500">หน้านี้กำลังอยู่ระหว่างการพัฒนา</p></div>`;
        }
    </script>
</body>
</html>

